!Object.values && (Object.values = function (obj) {
    if (obj !== Object(obj))
        throw new TypeError('Object.values called on a non-object');
    var val = [], key;
    for (key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            val.push(obj[key]);
        }
    }
    return val;
});
if (typeof Object.assign != 'function') {
    // Must be writable: true, enumerable: false, configurable: true
    Object.defineProperty(Object, "assign", {
        value: function assign(target, varArgs) {
            'use strict';
            if (target == null) { // TypeError if undefined or null
                throw new TypeError('Cannot convert undefined or null to object');
            }
            var to = Object(target);
            for (var index = 1; index < arguments.length; index++) {
                var nextSource = arguments[index];
                if (nextSource != null) { // Skip over if undefined or null
                    for (var nextKey in nextSource) {
                        // Avoid bugs when hasOwnProperty is shadowed
                        if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                            to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
            }
            return to;
        },
        writable: true,
        configurable: true
    });
}
Promise && (Promise.prototype.finally = function (callback) {
    var P = this.constructor;
    return this.then(function (value) { return P.resolve(callback()).then(function () { return value; }); }, function (reason) { return P.resolve(callback()).then(function () { throw reason; }); });
});
!Array.from && (Array.from = (function () {
    var toStr = Object.prototype.toString;
    var isCallable = function (fn) {
        return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
    };
    var toInteger = function (value) {
        var number = Number(value);
        if (isNaN(number)) {
            return 0;
        }
        if (number === 0 || !isFinite(number)) {
            return number;
        }
        return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
    };
    var maxSafeInteger = Math.pow(2, 53) - 1;
    var toLength = function (value) {
        var len = toInteger(value);
        return Math.min(Math.max(len, 0), maxSafeInteger);
    };
    // The length property of the from method is 1.
    return function from(arrayLike /*, mapFn, thisArg */) {
        // 1. Let C be the this value.
        var C = this;
        // 2. Let items be ToObject(arrayLike).
        var items = Object(arrayLike);
        // 3. ReturnIfAbrupt(items).
        if (arrayLike == null) {
            throw new TypeError('Array.from requires an array-like object - not null or undefined');
        }
        // 4. If mapfn is undefined, then let mapping be false.
        var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
        var T;
        if (typeof mapFn !== 'undefined') {
            // 5. else
            // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
            if (!isCallable(mapFn)) {
                throw new TypeError('Array.from: when provided, the second argument must be a function');
            }
            // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
            if (arguments.length > 2) {
                T = arguments[2];
            }
        }
        // 10. Let lenValue be Get(items, "length").
        // 11. Let len be ToLength(lenValue).
        var len = toLength(items.length);
        // 13. If IsConstructor(C) is true, then
        // 13. a. Let A be the result of calling the [[Construct]] internal method 
        // of C with an argument list containing the single item len.
        // 14. a. Else, Let A be ArrayCreate(len).
        var A = isCallable(C) ? Object(new C(len)) : new Array(len);
        // 16. Let k be 0.
        var k = 0;
        // 17. Repeat, while k < len… (also steps a - h)
        var kValue;
        while (k < len) {
            kValue = items[k];
            if (mapFn) {
                A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
            }
            else {
                A[k] = kValue;
            }
            k += 1;
        }
        // 18. Let putStatus be Put(A, "length", len, true).
        A.length = len;
        // 20. Return A.
        return A;
    };
}()));
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
if (!Array.prototype.includes) {
    Object.defineProperty(Array.prototype, 'includes', {
        value: function (searchElement, fromIndex) {
            if (fromIndex === void 0) { fromIndex = 0; }
            // 1. Let O be ? ToObject(this value).
            if (this == null) {
                throw new TypeError('"this" is null or not defined');
            }
            var o = Object(this);
            // 2. Let len be ? ToLength(? Get(O, "length")).
            var len = o.length >>> 0;
            // 3. If len is 0, return false.
            if (len === 0) {
                return false;
            }
            // 5. If n ≥ 0, then
            //  a. Let k be n.
            // 6. Else n < 0,
            //  a. Let k be len + n.
            //  b. If k < 0, let k be 0.
            var k = Math.max(fromIndex >= 0 ? fromIndex : len - Math.abs(fromIndex), 0);
            // 7. Repeat, while k < len
            while (k < len) {
                // a. Let elementK be the result of ? Get(O, ! ToString(k)).
                // b. If SameValueZero(searchElement, elementK) is true, return true.
                // c. Increase k by 1.
                // NOTE: === provides the correct "SameValueZero" comparison needed here.
                if (o[k] === searchElement) {
                    return true;
                }
                k++;
            }
            // 8. Return false
            return false;
        }
    });
}
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object['setPrototypeOf'] ||
        ({ __proto__: [] } instanceof Array && function (d, b) {
            d.__proto__ = b;
        }) ||
        function (d, b) {
            for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p];
        };
    return function (d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || Object.assign;

DOMTokenList.prototype.toggle = function (token, force) {
    if (force === void 0) { force = !this.contains(token); }
    force = !!force; // false
    var result = this.contains(token), // false
    method = result ? force !== true && "remove" : force !== false && "add";
    if (method) {
        this[method](token);
    }
    return force;
};

/**
 * js各种公用且与业务无关的工具类方法
 */
var G;
(function (G) {
    var isMb = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    G.tools = {
        toArray: function (any) {
            if (!Array.isArray(any)) {
                return [any];
            }
            else {
                return any;
            }
        },
        /**
         * undefined null '' [] {} 为空
         * @param {*} obj
         * @return {boolean} is_empty
         */
        isEmpty: function (obj) {
            var is_empty = false;
            if (obj === undefined || obj === null || obj === '') {
                is_empty = true;
            }
            else if (Array.isArray(obj) && obj.length === 0) {
                is_empty = true;
            }
            else if (obj.constructor === Object && Object.keys(obj).length === 0) {
                is_empty = true;
            }
            return is_empty;
        },
        isNotEmpty: function (obj) {
            return !G.tools.isEmpty(obj);
        },
        isNotEmptyArray: function (arr) {
            return Array.isArray(arr) && !G.tools.isEmpty(arr);
        },
        isFunction: function (fun) {
            return typeof fun === 'function';
        },
        isUndefined: function (any) {
            return typeof any === 'undefined';
        },
        isPrimitive: function (any) {
            return ['string', 'number', 'boolean'].includes(typeof any);
        },
        // randomColor() {
        //     let colorClass = ['blue', 'green', 'yellow', 'red', 'purple', 'black', 'grey'];
        //     return colorClass[(Math.random() * (colorClass.length - 1)).toFixed(0)];
        // },
        escapeRegExp: function (str) {
            return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
        },
        /**
         * 为特定字符串设置为高亮
         * @param {string} str - 整个字符串
         * @param {string} hlstr - 需要设置为高亮的字符串
         * @param {string} color - 高亮颜色
         * @param {boolean} ignoreCase
         * @returns {string}
         */
        highlight: function (str, hlstr, color, ignoreCase) {
            if (ignoreCase === void 0) { ignoreCase = true; }
            if (typeof str === 'string' && hlstr.trim()) {
                var searchPara = new RegExp("(" + G.tools.escapeRegExp(hlstr) + ")", ignoreCase ? 'ig' : 'g');
                return str.replace(searchPara, "<span class=\"" + color + "\">$1</span>");
            }
            else {
                return str;
            }
        },
        /**
         * 直接通过键值组获取数据，没有则返回undefined
         * @param obj
         * @param {(number | string)[]} keys - 键值数组
         * @return {boolean}
         */
        keysVal: function (obj) {
            var keys = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                keys[_i - 1] = arguments[_i];
            }
            var last = obj, keyLen = keys.length;
            for (var i = 0; i < keyLen; i++) {
                var key = keys[i];
                if (typeof last === 'object' && last !== null) {
                    if (key in last) {
                        last = last[key];
                    }
                    else {
                        return undefined;
                    }
                    // 最后
                }
                else {
                    return i === keyLen - 2 ? last : undefined;
                }
            }
            return last;
        },
        copy: function (text) {
            var input = G.d.create('<textarea style="position: absolute;top: -1px;height: 1px;width: 1px;"></textarea>');
            input.value = text;
            G.d.append(document.body, input);
            input.select();
            document.execCommand("Copy");
            // G.Modal.toast('复制成功');
            G.d.remove(input);
        },
        getGuid: (function () {
            var guid = 999;
            return function (prefix) {
                if (prefix === void 0) { prefix = 'guid-'; }
                return "" + prefix + guid++;
            };
        }()),
        isMb: isMb,
        isPc: !isMb,
        val2RGB: function (colorVal) {
            var r = 0, g = 0, b = 0;
            // 显示颜色
            if (typeof colorVal === 'number') {
                r = colorVal % 256;
                g = Math.floor(colorVal / 256) % 256;
                b = Math.floor(colorVal / 256 / 256) % 256;
            }
            return { r: r, g: g, b: b };
        },
        url: {
            /**
             * 获取url中请求参数的值
             * @param {string} name - 参数名
             * @param {string} [url]
             * @returns {*}
             */
            getPara: function (name, url) {
                if (url === void 0) { url = window.location.href; }
                var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
                var r = url.split('?')[1] ? url.split('?')[1].match(reg) : null;
                return r !== null ? decodeURIComponent(r[2]) : null;
            },
            /**
             * url连接object为后面的参数
             * @param {string} url
             * @param {object} obj
             * @param {boolean} [isLowCase=true]
             * @return {string}
             */
            addObj: function (url, obj, isLowCase) {
                if (isLowCase === void 0) { isLowCase = true; }
                for (var key in obj) {
                    if (G.tools.url.getPara(key, url)) {
                        delete obj[key];
                    }
                }
                if (!G.tools.isEmpty(obj)) {
                    return url + (url.indexOf('?') === -1 ? '?' : '&') + G.tools.obj.toUri(obj, isLowCase);
                }
                else {
                    return url;
                }
            }
        },
        str: {
            /**
             * null,undefined,false 转为 ''
             * @param value
             * @param str
             * @return {*|string}
             */
            toEmpty: function (value, str) {
                if (str === void 0) { str = ''; }
                return value || value === 0 ? value : str;
            },
            /**
             * 移除html标签
             * @param s
             * @return {string}
             */
            _htmlTagReg: /(&nbsp;|<([^>]+)>)/ig,
            removeHtmlTags: function (s) {
                if (typeof s === 'string') {
                    return s.replace(G.tools.str._htmlTagReg, '').replace(/\s+/g, ' ');
                }
                else {
                    return s;
                }
                // let div = document.createElement('div');
                // div.innerHTML = s;
                // return div.innerText;
            },
            /**
             * html encode
             * @param html
             * @return {string}
             */
            htmlEncode: function (html) {
                if (html === null || typeof html === 'undefined') {
                    html = '';
                }
                return html.toString().replace(/&/g, '&amp;')
                    .replace(/"/g, '&quot;')
                    .replace(/'/g, '&#39;')
                    .replace(/</g, '&lt;')
                    .replace(/>/g, '&gt;')
                    .replace(/\//g, '&#x2F;');
            },
            /**
             * 解析模版 模板中的{{xxx}} 对应 data中的属性名xxx
             * @param tpl
             * @param data
             * @param isEncode
             * @return {string}
             */
            parseTpl: function (tpl, data, isEncode) {
                if (isEncode === void 0) { isEncode = true; }
                var parseReg = /\{\{\S+?}}/g, self = this;
                return tpl.replace(parseReg, function (param) {
                    param = param.slice(2, -2);
                    var _a = param.split(','), key = _a[0], param1 = _a[1], isEn = param1 ? param1 === '1' : isEncode;
                    return G.tools.isEmpty(data[key]) ? '' : (isEn ? self.htmlEncode(data[key]) : data[key]);
                });
            },
            removeEmpty: function (str) {
                var parseReg = /\s{2,}/g;
                if (typeof str === 'string') {
                    return str.replace(parseReg, ' ');
                }
                return str;
            },
            /**
             * 按utf-8编码 截取字符串
             * @param {string} str 字符串
             * @param {int} len 长度
             * @return {string}
             */
            cut: function (str, len) {
                var cutStr = '';
                var realLength = 0;
                if (!G.tools.isEmpty(len)) {
                    var sLen = str.length;
                    for (var i = 0; i < sLen; i++) {
                        if (str.charCodeAt(i) >= 0 && str.charCodeAt(i) <= 128) {
                            realLength += 1;
                        }
                        else {
                            realLength += 2;
                        }
                        if (realLength > len) {
                            continue;
                        }
                        cutStr += str[i];
                    }
                    if (cutStr.length > 0 && realLength > len) {
                        cutStr += '...';
                    }
                }
                else {
                    cutStr = str;
                }
                return cutStr;
            },
            utf8Len: function (str) {
                var sLen = str.length, utf8len = 0;
                for (var i = 0; i < sLen; i++) {
                    if (str.charCodeAt(i) >= 0 && str.charCodeAt(i) <= 128) {
                        utf8len += 1;
                    }
                    else {
                        utf8len += 2;
                    }
                }
                return utf8len;
            },
            toBytes: function (str) {
                var pos = 0;
                var len = str.length;
                if (len % 2 != 0) {
                    return null;
                }
                len /= 2;
                var hexA = [];
                for (var i = 0; i < len; i++) {
                    var s = str.substr(pos, 2);
                    var v = parseInt(s, 16);
                    hexA.push(v);
                    pos += 2;
                }
                return hexA;
            },
            /**
             * 为特定字符串设置为高亮
             * @param {string} str - 整个字符串
             * @param {string} hlstr - 需要设置为高亮的字符串
             * @param {string} hue - 高亮颜色
             * @returns {string}
             */
            setHeightLight: function (str, hlstr, hue) {
                var color = {
                    red: '#dd524d',
                };
                if (Object.prototype.toString.call(str).slice(8, -1) === 'String') {
                    return str.replace(hlstr, "<span style=\"color:" + hue + "\" >" + hlstr + "</span>");
                }
                else {
                    return str;
                }
            }
        },
        obj: {
            /**
             * 原型继承
             * @param Child 子类
             * @param Parent 父类
             * @param {Object} [newProto] 需要重写的prototype
             */
            protoExtend: function (Child, Parent, newProto) {
                newProto = newProto || {};
                var F = function () {
                };
                F.prototype = Parent.prototype;
                Child.prototype = new F();
                //新的proto
                for (var attr in newProto) {
                    if (!newProto.hasOwnProperty(attr)) {
                        continue;
                    }
                    Child.prototype[attr] = newProto[attr];
                }
                Child.prototype.constructor = Child;
            },
            /**
             * 对象转成url参数
             * @param {Object} object
             * @param {boolean} isLowCase
             * @returns {string} urlDataStr
             */
            toUri: function (object, isLowCase) {
                if (isLowCase === void 0) { isLowCase = true; }
                var urlDataStr = '';
                if (object) {
                    for (var key in object) {
                        if (object.hasOwnProperty(key)) {
                            urlDataStr += "&" + (isLowCase ? key.toLowerCase() : key) + "=" + encodeURIComponent(object[key]);
                        }
                    }
                }
                return urlDataStr.slice(1);
            },
            /**
             * object转dom属性
             * @param {Object} object
             * @return {string}
             */
            toAttr: function (object) {
                var attrStr = '';
                for (var key in object) {
                    if (object.hasOwnProperty(key)) {
                        attrStr += (' ' + key + '="' + G.tools.str.htmlEncode(object[key]) + '"');
                    }
                }
                return attrStr;
            },
            /**
             * 浅复制Object
             * @param {object} object
             * @return {object}
             */
            copy: function (object) {
                var key, cp = {};
                for (key in object) {
                    if (object.hasOwnProperty(key)) {
                        cp[key] = object[key];
                    }
                }
                return cp;
            },
            /**
             * 对象合并，第一个参数为true时，则为深度合并
             * @param args
             * @return {{}}
             */
            merge: function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                // Variables
                var extended = {};
                var deep = false;
                var i = 0;
                var length = args.length;
                // Check if a deep merge
                if (Object.prototype.toString.call(args[0]) === '[object Boolean]') {
                    deep = args[0];
                    i++;
                }
                // Merge the object into the extended object
                var merge = function (obj) {
                    for (var prop in obj) {
                        if (!Object.prototype.hasOwnProperty.call(obj, prop)) {
                            continue;
                        }
                        // If deep merge and property is an object, merge properties
                        var objStr = Object.prototype.toString.call(obj[prop]);
                        if (deep && (objStr === '[object Object]' || objStr === '[object Array]')) {
                            if (objStr === '[object Object]') {
                                extended[prop] = G.tools.obj.merge(true, extended[prop], obj[prop]);
                            }
                            else {
                                extended[prop] = obj[prop].slice(0);
                            }
                        }
                        else {
                            extended[prop] = obj[prop];
                        }
                    }
                };
                // Loop through each object and conduct a merge
                for (; i < length; i++) {
                    var obj = args[i];
                    merge(obj);
                }
                return extended;
            },
            /**
             * 对象转数组
             * @param {obj} o
             * @return {Array}
             */
            toArr: function (o) {
                var arr = [];
                for (var key in o) {
                    if (o.hasOwnProperty(key)) {
                        arr.push(o[key]);
                    }
                }
                return arr;
            },
            /**
             * 比较两个对象是否相等
             * @param o1
             * @param o2
             * @returns {boolean}
             */
            isEqual: function (o1, o2) {
                var props1 = Object.getOwnPropertyNames(o1), props2 = Object.getOwnPropertyNames(o2);
                if (props1.length != props2.length) {
                    return false;
                }
                for (var i = 0, max = props1.length; i < max; i++) {
                    var propName = props1[i];
                    if (o1[propName] !== o2[propName]) {
                        return false;
                    }
                }
                return true;
            }
        },
        cookie: {
            set: function (name, value, days) {
                var expires = "";
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + value + expires + "; path=/sf";
            },
            get: function (name) {
                var nameEQ = name + "=";
                var ca = document.cookie.split(';');
                for (var i = 0; i < ca.length; i++) {
                    var c = ca[i];
                    while (c.charAt(0) == ' ')
                        c = c.substring(1, c.length);
                    if (c.indexOf(nameEQ) == 0)
                        return c.substring(nameEQ.length, c.length);
                }
                return null;
            },
            clear: function eraseCookie(name) {
                this.set(name, "", 0);
            }
        },
        valid: {
            isTel: function (tel) {
                return /^1\d{10}$/.test(tel);
            },
        },
        event: {
            /**
             * 触发自定义事件
             * @param eventName
             * @param detail
             * @param [win]
             */
            fire: function (eventName, detail, win) {
                if (detail === void 0) { detail = null; }
                if (win === void 0) { win = window; }
                var e = null;
                if (typeof eventName !== 'string' || !eventName) {
                    return;
                }
                if ('CustomEvent' in window) {
                    e = new CustomEvent(eventName, { detail: detail, bubbles: true });
                }
                else {
                    e = document.createEvent('CustomEvent');
                    e.initCustomEvent(eventName, true, false, { detail: detail });
                }
                win.dispatchEvent(e);
            }
        },
        date: {
            oneDay: 86400000,
            today: function () { return new Date(); },
            add: function (date, day) {
                date.setTime(date.getTime() + day * G.tools.date.oneDay);
                return date;
            },
            tomorrow: function () { return G.tools.date.add(new Date(), 1); },
            yesterday: function () { return G.tools.date.add(new Date(), -1); },
            range: {
                today: function () {
                    return G.tools.date._getRange(new Date(), new Date());
                },
                yesterday: function () {
                    return G.tools.date._getRange(G.tools.date.yesterday(), G.tools.date.yesterday());
                },
                tomorrow: function () {
                    return G.tools.date._getRange(G.tools.date.tomorrow(), G.tools.date.tomorrow());
                },
                thisWeek: function () {
                    var date1 = new Date(), date2 = G.tools.date.yesterday(), day = date1.getDay();
                    return G.tools.date._getRange(G.tools.date.add(date1, -7), date2);
                },
                lastWeek: function () {
                    var date1 = new Date(), date2 = new Date();
                    // lastWeekDay = date1.getDay();
                    // lastWeekDay = lastWeekDay === 0 ? 7 : lastWeekDay;
                    return G.tools.date._getRange(G.tools.date.add(date1, -14), G.tools.date.add(date2, -8));
                },
                thisMonth: function () {
                    var date = new Date(), year = date.getFullYear(), month = date.getMonth();
                    return G.tools.date._getRange(new Date(year, month, 1), new Date(year, month + 1, 0));
                },
                lastMonth: function () {
                    var date = new Date();
                    date.setMonth(date.getMonth() - 1);
                    var year = date.getFullYear(), month = date.getMonth();
                    return G.tools.date._getRange(new Date(year, month, 1), new Date(year, month + 1, 0));
                },
                _getSeasonIndex: function (date) { return Math.floor(date.getMonth() / 3); },
                _getSeason: function (year, season) {
                    var firstMonth = season * 3, monthLen = ((firstMonth / 9 % 1 === 0) ? 31 : 30);
                    return G.tools.date._getRange(new Date(year, firstMonth, 1), new Date(year, firstMonth + 2, monthLen));
                },
                // (year) => [new Date(year, 3, 1), new Date(year, 5, 30)],
                // (year) => [new Date(year, 6, 1), new Date(year, 8, 30)],
                // (year) => [new Date(year, 9, 1), new Date(year, 11, 31)]
                thisSeason: function () {
                    var date = new Date(), dateRange = G.tools.date.range;
                    return dateRange._getSeason(date.getFullYear(), dateRange._getSeasonIndex(date));
                },
                lastSeason: function () {
                    var date = new Date(), dateRange = G.tools.date.range, lastSeasonIndex = (dateRange._getSeasonIndex(date) - 1 + 4) % 4, year = date.getFullYear() - (lastSeasonIndex === 3 ? 1 : 0);
                    return dateRange._getSeason(year, lastSeasonIndex);
                },
                thisYear: function () {
                    var year = new Date().getFullYear();
                    return G.tools.date._getRange(new Date(year, 0, 1), new Date(year, 11, 31));
                },
                lastYear: function () {
                    var year = new Date().getFullYear() - 1;
                    return G.tools.date._getRange(new Date(year, 0, 1), new Date(year, 11, 31));
                }
            },
            _getRange: function (date1, date2) {
                date1.setHours(0, 0, 0, 0);
                date2.setHours(23, 59, 59, 999);
                return [date1, date2];
            },
            format: function (date, fmt) {
                if (!fmt) {
                    return date.toString();
                }
                var o = {
                    "M+": date.getMonth() + 1,
                    "d+": date.getDate(),
                    "H+": date.getHours(),
                    "m+": date.getMinutes(),
                    "s+": date.getSeconds() //秒
                    // "S": date.getMilliseconds()             //毫秒
                };
                if (/(y+)/.test(fmt))
                    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
                for (var k in o)
                    if (new RegExp("(" + k + ")").test(fmt))
                        fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
                return fmt;
            }
        },
        pattern: {
            singleton: function (fn) {
                var single = null;
                return function () {
                    return single || (single = fn.apply(this, arguments));
                };
            },
            throttling: function (action, delay) {
                var last = 0;
                return function () {
                    var curr = +new Date();
                    if (curr - last > delay) {
                        action.apply(this, arguments);
                        last = curr;
                    }
                };
            },
            debounce: function (method, delay) {
                var timer = null;
                return function () {
                    var context = this, args = arguments;
                    clearTimeout(timer);
                    timer = setTimeout(function () {
                        method.apply(context, args);
                    }, delay);
                };
            }
        },
        /**
         * 获取offset参数
         * @author yrh
         */
        offset: {
            left: function (obj) {
                if (obj === window) {
                    return 0;
                }
                return obj.offsetLeft + (obj.offsetParent ? this.left(obj.offsetParent) : 0);
            },
            top: function (obj) {
                if (obj === window) {
                    return 0;
                }
                return obj.offsetTop + (obj.offsetParent ? this.top(obj.offsetParent) : 0);
            }
        },
        /**
         * 获取滚动条scrollTop
         * @author yrh
         */
        scrollTop: function () {
            return document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;
        },
        getScrollTop: function (element) {
            var ele = element.parentElement, scrollTopArr = [];
            while (ele !== document.documentElement) {
                scrollTopArr.push(ele.scrollTop);
                ele = ele.parentElement;
            }
            for (var i = scrollTopArr.length - 1; i >= 0; i--) {
                if (scrollTopArr[i] !== 0) {
                    return scrollTopArr[i];
                }
            }
            return document.documentElement.scrollTop || window.pageYOffset || document.body.scrollTop;
        },
        calc: function (express) {
            var operator = '', num1, num2;
            if (typeof express !== 'string') {
                return;
            }
            express = express.replace(/\s+/g, '');
            for (var i = 0, len = express.length; i < len; i++) {
                var char = express[i];
                if (~'+-*/'.indexOf(char)) {
                    if (i === 0 && ~'+-'.indexOf(char)) {
                        continue;
                    }
                    operator = char;
                    num1 = Number(express.substr(0, i));
                    num2 = Number(express.substr(i + 1));
                    break;
                }
            }
            // for(let op of ['+','-','*','/']){
            //     if(~express.indexOf(op)) {
            //         operator = op;
            //         [num1, num2] = express.split(op);
            //
            //         num1 = Number(num1);
            //         num2 = Number(num2);
            //
            //         break;
            //     }
            // }
            if (!operator) {
                return Number(express);
            }
            var is1Num = !isNaN(num1);
            var is2Num = !isNaN(num2);
            if (!is1Num && ['+', '-'].includes(operator)) {
                return Number(operator + num2);
            }
            if (is1Num && !operator && !is2Num) {
                return num1;
            }
            if (operator && is1Num && is2Num) {
                switch (operator) {
                    case '+':
                        return num1 + num2;
                    case '-':
                        return num1 - num2;
                    case '*':
                        return num1 * num2;
                    case '/':
                        return num1 / num2;
                }
            }
            return NaN;
        },
        // select多选下拉框，选中项移动
        // selectMove: function (oldSel, newSel) {
        //     let opts = oldSel.options;
        //     for (let i = 0, l = opts.length; i < l; i++) {
        //         if (opts[i].selected) {
        //             newSel.appendChild(opts[i]);
        //             i--;
        //             l--;
        //         }
        //     }
        // },
        iPage: function (src, attrs) {
            var iframe = G.d.create("<iframe class=\"pageIframe\" src=\"" + src + "\" " + G.tools.obj.toAttr(attrs) + "></iframe>");
            document.body.appendChild(iframe);
            return {
                show: function () {
                    // console.log(1);
                    iframe.classList.add('active');
                },
                close: function () {
                    iframe.classList.remove('active');
                },
                get: function () { return iframe; }
            };
        },
        // 设置select表单选中
        selVal: function (select, val) {
            for (var i = 0; i < select.options.length; i++) {
                if (select.options[i].value == val) {
                    select.options[i].selected = true;
                    break;
                }
            }
        },
        os: (function () {
            var ua = navigator.userAgent, os = {
                wechat: {
                    version: ''
                },
                ios: false,
                iphone: false,
                ipad: false,
                android: false,
                version: ''
            };
            var funcs = [
                function () {
                    var wechat = ua.match(/(MicroMessenger)\/([\d\.]+)/i);
                    if (wechat) { //wechat
                        os.wechat = {
                            version: wechat[2].replace(/_/g, '.')
                        };
                    }
                    return false;
                },
                function () {
                    var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
                    if (android) {
                        os.android = true;
                        os.version = android[2];
                        // os.isBadAndroid = !(/Chrome\/\d/.test(window.navigator.appVersion));
                    }
                    return os.android;
                },
                function () {
                    var iphone = ua.match(/(iPhone\sOS)\s([\d_]+)/);
                    if (iphone) { //iphone
                        os.ios = os.iphone = true;
                        os.version = iphone[2].replace(/_/g, '.');
                    }
                    else {
                        var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
                        if (ipad) { //ipad
                            os.ios = os.ipad = true;
                            os.version = ipad[2].replace(/_/g, '.');
                        }
                    }
                    return os.ios;
                }
            ];
            funcs.every(function (func) {
                return !func();
            });
            return os;
        })()
    };
    // tools.iPage.prototype.getActives = function () {
    //     return document.querySelectorAll('iframe.pageIframe.active');
    // };
    document.body.classList.add(G.tools.isMb ? 'fl-mobile' : 'fl-pc'); // 全局类
})(G || (G = {}));
var Tools = {
    event: {
        fire: function () {
            G.tools.event.fire.apply(null, arguments);
        }
    }
};
// function applyMixins(derivedCtor: any, baseCtors: any[]) {
//     baseCtors.forEach(baseCtor => {
//         Object.getOwnPropertyNames(baseCtor.prototype).forEach(name => {
//             derivedCtor.prototype[name] = baseCtor.prototype[name];
//         });
//     });
// }

var G;
(function (G) {
    /**
     * 操作element自定义数据
     * @type {{get: ((elem: Node) => obj); remove: ((elem: Node) => any)}}
     */
    G.__EL_DATA_INNER_KEY__ = {
        event: '__event',
        data: '__customData',
        tree: '__virtualTree'
    };
    G.elemData = (function () {
        var cache = {}, guidCounter = 1, expando = "_D_A_T_A_" + (new Date).getTime();
        /**
         * 获取数据
         * @param {Node} elem
         * @returns {obj}
         */
        function get(elem) {
            if (typeof elem === 'object' && elem) {
                var guid = elem[expando];
                if (!guid) {
                    guid = elem[expando] = guidCounter++;
                    cache[guid] = {};
                }
                return cache[guid];
            }
            return null;
        }
        /**
         * 删除
         * @param {Node} elem
         */
        function remove(elem) {
            if (typeof elem === 'object' && elem) {
                var guid = elem[expando];
                if (guid) {
                    delete cache[guid];
                    delete elem[expando];
                }
            }
        }
        return { get: get, remove: remove };
    }());
    /**
     * 事件管理
     */
    var event = (function () {
        // 委托元素对应的回调
        var eventHash = G.__EL_DATA_INNER_KEY__.event, noDelegateSelector = '';
        var customEvent = (function () {
            var SUPPORT_TOUCH = G.tools.isMb, EVENT_START = SUPPORT_TOUCH ? 'touchstart' : 'mousedown', EVENT_MOVE = SUPPORT_TOUCH ? 'touchmove' : 'mousemove', EVENT_END = SUPPORT_TOUCH ? 'touchend' : 'mouseup';
            function dispatcherGet(el) {
                return G.elemData.get(el)[eventHash] && G.elemData.get(el)[eventHash].dispatcher;
            }
            function typesGet(el) {
                var eventData = G.elemData.get(el)[eventHash];
                return eventData && eventData.handlers ? Object.keys(eventData.handlers) : null;
            }
            var panHandlers = {
                start: null,
                end: null,
                move: null,
            };
            var events = {
                press: {
                    type: 'press',
                    time: 500,
                    longClick: 0,
                    handler: null,
                    on: function (el, selector) {
                        var press = events.press, timer = null, touchY = 0, moveHandler, endHandler;
                        eventOn(el, EVENT_START, selector, press.handler = function (ev) {
                            clearTimeout(timer);
                            press.longClick = 0;
                            var touch = ev.touches[0];
                            touchY = touch.clientY;
                            timer = setTimeout(function () {
                                press.longClick = 1;
                                var dispatcher = dispatcherGet(el);
                                dispatcher && dispatcher.call(el, getCustomEvent(ev, 'press'));
                            }, press.time);
                        });
                        eventOn(document, EVENT_MOVE, moveHandler = function (ev) {
                            var touch = ev.touches[0];
                            if (Math.abs(touch.clientY - touchY) < 10) {
                                clearTimeout(timer);
                            }
                        });
                        eventOn(document, EVENT_END, endHandler = function (ev) {
                            // if(press.startTime !== null && (new Date().getTime() - press.startTime >= press.time + 100)){
                            clearTimeout(timer);
                            if (press.longClick === 1) {
                                ev.preventDefault();
                                // setTimeout(() => {
                                press.longClick = 0;
                                // }, 100);
                            }
                            // }
                        });
                    },
                    off: function (el, selector) {
                        eventOff(el, EVENT_START, selector, this.handler);
                    }
                },
                pan: {
                    default: 'pan panstart panmove panend pancancel panleft panright',
                    all: 'panstart panmove panend pancancel panleft panright panup pandown',
                    prev: null,
                    first: null,
                    firstTime: 0,
                    once: true,
                    isTriggerMove: true,
                    direction: null,
                    handlers: {
                        start: function (event) {
                            lockEvent(this, event, 'start');
                        },
                        move: function (event) {
                            lockEvent(this, event, 'move');
                        },
                        end: function (event) {
                            lockEvent(this, event, 'end');
                        }
                    },
                    on: function (el, selector) {
                        // start
                        var _this = this;
                        // end
                        // move
                        eventOn(el, EVENT_START, selector, panHandlers.start = function (ev) {
                            _this.handlers.start.call(el, ev);
                            // eventOn(el, EVENT_MOVE, selector, this.handlers.move);
                            eventOn(el, EVENT_MOVE, panHandlers.move = function (ev) {
                                _this.handlers.move.call(el, ev);
                            });
                            // eventOn(el, EVENT_END, this.handlers.end);
                            eventOn(el, EVENT_END, panHandlers.end = function (ev) {
                                _this.handlers.end.call(el, ev);
                                eventOff(el, EVENT_MOVE, panHandlers.move);
                                eventOff(el, EVENT_END, panHandlers.end);
                            });
                        });
                    },
                    off: function (el, selector) {
                        eventOff(el, EVENT_START, selector, panHandlers.start);
                    }
                }
            };
            function getCustomEvent(ev, type) {
                return {
                    type: type,
                    target: ev.target,
                    preventDefault: function () { ev.preventDefault(); },
                    deltaX: ev.touches[0].clientX,
                    deltaY: ev.touches[0].clientY,
                };
            }
            var lockEvent = (function () {
                var move_lock = false, start_lock = false, end_lock = false, move_id = null, start_id = null, end_id = null;
                return function (el, ev, type) {
                    if (type === 'move') {
                        if (!move_lock) {
                            move_lock = true;
                            clearTimeout(move_id);
                            move_id = setTimeout(function () {
                                triggerEvent(el, ev, type);
                                move_lock = false;
                            }, 1);
                        }
                    }
                    else if (type === 'start') {
                        if (!start_lock) {
                            start_lock = true;
                            clearTimeout(start_id);
                            start_id = setTimeout(function () {
                                triggerEvent(el, ev, type);
                                start_lock = false;
                            }, 1);
                        }
                    }
                    else if (type === 'end') {
                        if (!end_lock) {
                            end_lock = true;
                            clearTimeout(end_id);
                            end_id = setTimeout(function () {
                                triggerEvent(el, ev, type);
                                end_lock = false;
                            }, 1);
                        }
                    }
                };
            })();
            function triggerEvent(el, ev, type) {
                // console.log(type)
                var eventList = recognizer(typesGet(el));
                var event = eventObjGet(ev, eventList.indexOf('pan') !== -1 ? '' : type, (function () {
                    if (type === 'start') {
                        return 0;
                    }
                    else if (type === 'move') {
                        return 1;
                    }
                    else if (type === 'end') {
                        return 2;
                    }
                    return null;
                })());
                if (type === 'start') {
                    events.pan.once = true;
                    events.pan.direction = '';
                }
                if (type === 'move' && events.pan.once) {
                    events.pan.once = false;
                    events.pan.isTriggerMove = events.pan.all.indexOf(event.direction) !== -1;
                    events.pan.direction = event.direction;
                }
                if (type === 'move' && !events.pan.isTriggerMove) {
                    return;
                }
                if (eventList.indexOf('pan') !== -1) {
                    var dispatcher = dispatcherGet(el);
                    dispatcher && dispatcher.call(el, event);
                }
                else if (eventList.indexOf('pan' + type) !== -1) {
                    var dispatcher = dispatcherGet(el);
                    dispatcher && dispatcher.call(el, event);
                }
                else if (eventList.indexOf('pan' + events.pan.direction) !== -1 && type === 'move') {
                    var dispatcher = dispatcherGet(el);
                    event.type = 'pan' + events.pan.direction;
                    dispatcher && dispatcher.call(el, event);
                }
            }
            function eventObjGet(event, eventType, staus) {
                var customEvent = {
                    type: 'pan' + eventType,
                    deltaX: 0,
                    deltaY: 0,
                    deltaTime: 0,
                    distance: 0,
                    angle: 0,
                    velocityX: 0,
                    velocityY: 0,
                    velocity: 0,
                    direction: null,
                    offsetDirection: null,
                    srcEvent: event,
                    target: (function () {
                        if (staus === 2) {
                            return event.target;
                        }
                        else {
                            return SUPPORT_TOUCH ? event.changedTouches[0].target : event.target;
                        }
                    })(),
                    // eventType:0
                    isFirst: false,
                    isFinal: false,
                    preventDefault: function () { event.preventDefault(); }
                };
                switch (staus) {
                    case 0:
                        events.pan.prev = {};
                        for (var attr in customEvent) {
                            events.pan.prev[attr] = customEvent[attr];
                        }
                        customEvent.isFirst = true;
                        events.pan.first = customEvent;
                        events.pan.firstTime = new Date().getTime();
                        break;
                    case 1:
                        customEvent = getMoveEvent(customEvent);
                        break;
                    case 2:
                        customEvent = getMoveEvent(customEvent);
                        customEvent.isFirst = false;
                        customEvent.isFinal = true;
                        break;
                }
                return customEvent;
            }
            function getMoveEvent(ev) {
                var event = getEvent(ev.srcEvent), prevEv = getEvent(events.pan.prev.srcEvent), firstEv = getEvent(events.pan.first.srcEvent);
                function getEvent(ev) {
                    return SUPPORT_TOUCH ? ev.changedTouches[0] : ev;
                }
                ev.deltaX = event.clientX - prevEv.clientX; //	x轴偏移量
                ev.deltaY = event.clientY - prevEv.clientY; //	y轴偏移量
                ev.angle = Math.atan2(ev.deltaY, ev.deltaX) / Math.PI * 180; //	偏移角度.
                ev.distance = Math.sqrt(Math.pow(ev.deltaY, 2) + Math.pow(ev.deltaX, 2)); //	偏移距离
                ev.direction = getDirection(ev.angle); //	偏移方向 up down left right.
                ev.offsetDirection = //	从起点的偏移方向.
                    getDirection(Math.atan2(event.clientY - firstEv.clientY, event.clientX - firstEv.clientX) / Math.PI * 180);
                ev.deltaTime = new Date().getTime() - events.pan.firstTime;
                ev.velocityX = ev.deltaX / (ev.deltaTime - events.pan.prev.deltaTime);
                ev.velocityY = ev.deltaY / (ev.deltaTime - events.pan.prev.deltaTime);
                events.pan.prev = ev;
                return ev;
            }
            function getDirection(angle) {
                if (angle <= 45 && angle > -45) {
                    return 'right';
                }
                else if (angle <= 135 && angle > 45) {
                    return 'down';
                }
                else if (angle <= -45 && angle > -135) {
                    return 'up';
                }
                else if (angle > 135 || angle <= -135) {
                    return 'left';
                }
                else {
                    return null;
                }
            }
            /**
             * 判断是否时自定义事件，并返回自定义事件对象
             */
            var recognizer = function (eventTypes) {
                var eventList = [];
                if (G.tools.isNotEmpty(eventTypes)) {
                    for (var i = 0; i < eventTypes.length; i++) {
                        var position = events.pan.all.indexOf(eventTypes[i]);
                        if (position !== -1) {
                            eventList.push(events.pan.all.substr(position, eventTypes[i].length));
                        }
                    }
                }
                return eventList;
            };
            var on = function (el, type, selector) {
                if (events.pan.all.indexOf(type) !== -1) {
                    events.pan.on(el, selector);
                }
                else if (events.press.type === type) {
                    events.press.on(el, selector);
                }
            };
            var off = function (el, type, selector) {
                if (events.pan.all.indexOf(type) !== -1) {
                    events.pan.off(el, selector);
                }
                else if (events.press.type === type) {
                    events.press.off(el, selector);
                }
            };
            return { on: on, off: off };
        })();
        function fixEvent(event) {
            var stopPropagation = event.stopPropagation;
            event['isPropagationStopped'] = false;
            event.stopPropagation = function () {
                stopPropagation.call(event);
                event['isPropagationStopped'] = true;
            };
            var stopImmediatePropagation = event.stopImmediatePropagation;
            event['isImmediatePropagationStopped'] = false;
            event.stopImmediatePropagation = function () {
                stopImmediatePropagation.call(event);
                event['isImmediatePropagationStopped'] = true;
            };
        }
        var eventDispatcherGet = function (eventCache) {
            return function (evt) {
                var eventType = evt.type, typeHandlers = eventCache.handlers && eventCache.handlers[eventType];
                if (eventCache.disabled || G.tools.isEmpty(typeHandlers) || G.d.closest(this, '.disabled')) { // this has disabled
                    return;
                }
                fixEvent(evt);
                var isBubbleEnd = false, bubbleEl = evt.target;
                // 开始委托、冒泡
                do {
                    if (bubbleEl !== this) {
                        if (bubbleEl instanceof Element) {
                            for (var selector in typeHandlers) {
                                var selectorHandlers = typeHandlers[selector], target = null;
                                // debugger;
                                // 匹配委托元素
                                if (selector != noDelegateSelector) {
                                    target = G.d.matches(bubbleEl, selector) ? bubbleEl : null;
                                }
                                var isImmediateStop = runHandler(target, selectorHandlers);
                                if (isImmediateStop) {
                                    isBubbleEnd = true;
                                    break;
                                }
                            }
                            isBubbleEnd = evt['isPropagationStopped'];
                        }
                    }
                    else {
                        // 到达绑定元素，事件冒泡结束
                        runHandler(this, typeHandlers[noDelegateSelector]);
                        isBubbleEnd = true;
                    }
                    if (!isBubbleEnd) {
                        // 冒泡
                        if (bubbleEl instanceof Element) {
                            bubbleEl = bubbleEl.parentElement;
                        }
                        // 冒泡到了html节点,继续冒泡
                        if (!bubbleEl) {
                            bubbleEl = document;
                        }
                        else if (bubbleEl === document) {
                            bubbleEl = window;
                        }
                    }
                } while (!isBubbleEnd && bubbleEl !== window);
                function runHandler(target, handlers) {
                    if (target) {
                        var isImmediateStop = false, isDocWin = target === window || target === document, el = target;
                        if (isDocWin || (!el.classList.contains('disabled') && handlers && handlers[0])) {
                            for (var _i = 0, handlers_1 = handlers; _i < handlers_1.length; _i++) {
                                var handler = handlers_1[_i];
                                handler.call(target, evt);
                                if (evt['isImmediatePropagationStopped']) {
                                    isImmediateStop = true;
                                    break;
                                }
                            }
                        }
                        return isImmediateStop;
                    }
                    return false;
                }
            };
        };
        function eventArrayGet(type) {
            return type.split(' ').filter(function (str) { return str; });
        }
        /**
         * 开启事件
         * @param {EventTarget | Node} el
         * @param {string} types
         * @param {EventListener | string} selector
         * @param {EventListener} cb
         */
        var eventOn = function (el, types, selector, cb) {
            if (!el || !(!window['EventTarget'] || el instanceof EventTarget) || !(typeof types === 'string')) {
                return;
            }
            eventArrayGet(types).forEach(function (type) {
                // 兼容mui
                if ('mui' in window && G.tools.isMb && type === 'click') {
                    type = 'tap';
                }
                // 是否第一次绑定此元素的此事件类型
                var first = false;
                // 委托选择器是函数的时候，则选择器为空
                if (typeof selector === 'function') {
                    cb = selector;
                    selector = noDelegateSelector;
                }
                customEvent.on(el, type, selector);
                // 获取当前是否已经绑定事件
                !G.elemData.get(el)[eventHash] && (G.elemData.get(el)[eventHash] = {});
                var eventCache = G.elemData.get(el)[eventHash];
                // 初始化数据结
                !eventCache.handlers && (eventCache.handlers = {});
                var handlers = eventCache.handlers;
                if (!handlers[type]) {
                    first = true;
                    handlers[type] = {};
                }
                !handlers[type][selector] && (handlers[type][selector] = []);
                // 回调函数入栈
                handlers[type][selector].push(cb);
                //
                if (!eventCache.dispatcher) {
                    eventCache.disabled = false;
                    eventCache.dispatcher = eventDispatcherGet(eventCache);
                }
                if (first) {
                    // let passiveTypes = ['mousewheel', 'touchmove', 'touchstart', 'touchend'];
                    // try{
                    el.addEventListener(type, eventCache.dispatcher, false);
                    // }catch (e){
                    //     el.addEventListener(type, eventCache.dispatcher, false);
                    // }
                }
            });
        };
        /**
         *
         * 关闭事件
         * @param {EventTarget | Node} el
         * @param {string} types
         * @param {EventListener | string} selector
         * @param {EventListener} cb
         */
        var eventOff = function (el, types, selector, cb) {
            if (!el || !(!window['EventTarget'] || el instanceof EventTarget)) {
                return;
            }
            var elData = G.elemData.get(el)[eventHash];
            if (!elData || !elData.dispatcher) {
                return;
            }
            if (typeof types === "undefined") {
                for (var type in elData.handlers) {
                    removeHandler(type);
                }
                return;
            }
            customEvent.off(el, types, selector);
            eventArrayGet(types).forEach(function (type) {
                // 兼容mui
                if ('mui' in window && G.tools.isMb && type === 'click') {
                    type = 'tap';
                }
                if (typeof selector === 'undefined') {
                    removeHandler(type);
                    return;
                }
                // 委托选择器是函数的时候，则选择器为空
                if (typeof selector !== 'string') {
                    cb = selector;
                    selector = noDelegateSelector;
                }
                if (typeof cb === 'undefined') {
                    removeHandler(type, selector);
                    return;
                }
                // 删除一个回调函数
                var selectorHandlers = G.tools.keysVal(elData.handlers, type, selector), cbIndex = Array.isArray(selectorHandlers) ? selectorHandlers.indexOf(cb) : -1;
                if (cbIndex >= 0) {
                    selectorHandlers.splice(cbIndex, 1);
                }
                tidyUp(el, type, selector);
            });
            function removeHandler(t, s) {
                var selectorHandlers = elData.handlers[t];
                if (typeof s === 'undefined') {
                    for (var selector_1 in selectorHandlers) {
                        selectorHandlers[selector_1] = [];
                        tidyUp(el, t, selector_1);
                    }
                }
                else {
                    selectorHandlers[s] = [];
                    tidyUp(el, t, s);
                }
            }
            function tidyUp(el, type, seletor) {
                var elData = G.elemData.get(el)[eventHash], isEmpty = G.tools.isEmpty;
                // 选择器函数数组为空
                if (elData.handlers[type] && isEmpty(elData.handlers[type][seletor])) {
                    delete elData.handlers[type][seletor];
                }
                // 一个事件下没有委托的选择器
                if (isEmpty(elData.handlers[type])) {
                    delete elData.handlers[type];
                    el.removeEventListener(type, elData.dispatcher);
                }
                if (isEmpty(elData.handlers)) {
                    delete elData.handlers;
                    delete elData.dispatcher;
                }
                if (isEmpty(elData)) {
                    delete G.elemData.get(el)[eventHash];
                    // elemData.remove(el);
                }
            }
        };
        /**
         * 只执行一次事件
         * @param {EventTarget | Node} el
         * @param {string} types
         * @param {EventListener | string} selector
         * @param {EventListener} cb
         */
        var eventOnce = function (el, types, selector, cb) {
            eventArrayGet(types).forEach(function (type) {
                if (typeof selector === 'function') {
                    var func_1 = selector;
                    selector = function (e) {
                        eventOff(el, type, selector, cb);
                        func_1(e);
                    };
                }
                else {
                    var func_2 = cb;
                    cb = function (e) {
                        // debugger;
                        eventOff(el, type, selector, cb);
                        func_2(e);
                    };
                }
                eventOn(el, type, selector, cb);
            });
        };
        /**
         * 触发一次事件
         * @param {EventTarget} elem
         * @param {string} type
         * @param {string} selector
         */
        var trigger = function (elem, type, selector) {
            // if(el !== window){
            // for (let el of <Element[]>_getElPath(<Node>elem)) {
            //     let eventData = elemData.get(el)[eventHash];
            //     if (eventData) {
            //
            //     }
            // }
            // }
            if (selector) {
            }
        };
        // let elSelectorEventOn:EventSelectorFunPara = function(a, b, c, d?, e?){
        //     if(typeof a !== 'string'){
        //         on(a, b, c, d);
        //     }else{
        //         if(typeof b === 'string'){
        //             G.d.queryAll(document, b).forEach(el => on(el, b, c, d))
        //         }else{
        //             G.d.queryAll(b, a).forEach(el => on(el, c, d, e))
        //         }
        //     }
        // };
        //
        // let elSelectorEventOff:EventSelectorFunPara = function(a, b, c, d?, e?){
        //     if(typeof a !== 'string'){
        //         off(a, b, c, d);
        //     }else{
        //         if(typeof b === 'string'){
        //             G.d.queryAll(document, b).forEach(el => off(el, b, c, d))
        //         }else{
        //             G.d.queryAll(b, a).forEach(el => off(el, c, d, e))
        //         }
        //     }
        // };
        // let elSelectorEventOnce:EventSelectorFunPara = function(a, b, c, d?, e?){
        //     if(typeof a !== 'string'){
        //         off(a, b, c, d);
        //     }else{
        //         if(typeof b === 'string'){
        //             G.d.queryAll(document, b).forEach(el => off(el, b, c, d))
        //         }else{
        //             G.d.queryAll(b, a).forEach(el => off(el, c, d, e))
        //         }
        //     }
        // };
        return { eventOn: eventOn, eventOff: eventOff, eventOnce: eventOnce };
    }());
    function createElement(html, parent) {
        if (parent === void 0) { parent = 'div'; }
        //常用不闭合标签
        var notCloseEle = ['br', 'input', 'hr', 'img', 'meta'];
        if (typeof html === 'string') {
            var div = document.createElement(parent);
            div.innerHTML = html;
            return div.firstElementChild;
        }
        else if (typeof html === 'object') {
            if (Array.isArray(html)) {
                var f_1 = document.createDocumentFragment();
                html.forEach(function (child, index) {
                    G.d.append(f_1, createEle(child));
                });
                return f_1;
            }
            else {
                return createEle(html);
            }
        }
        else {
            return null;
        }
        function createEle(_a, parent) {
            var tag = _a.tag, children = _a.children, props = _a.props;
            // 创建标签
            var container = document.createElement(tag);
            if (parent) {
                parent.appendChild(container);
            }
            // 添加属性
            if (props) {
                for (var prop in props) {
                    if (prop === 'dataset') {
                        var datasetObj = props.dataset;
                        for (var datasetName in datasetObj) {
                            container.dataset[datasetName] = datasetObj[datasetName];
                        }
                    }
                    else if (prop === "className") {
                        container.setAttribute('class', props[prop]);
                    }
                    else {
                        // if (prop in container){
                        container.setAttribute(prop, props[prop]);
                        // }
                    }
                }
            }
            if (notCloseEle.indexOf(tag) === -1 && Array.isArray(children)) {
                // 添加子标签
                children.forEach(function (child, index) {
                    if (typeof child === 'string') {
                        container.appendChild(document.createTextNode(child));
                    }
                    else {
                        createEle(child, container);
                    }
                });
            }
            return container;
        }
    }
    // function diff(newSet: T[], oldSet: K[], operate: { create?(now: T): void, replace?(now: T, old: K): void, destroy?(old: K): void }) => {
    //        let i = 0,
    //            {create, replace, destroy} = operate;
    //
    //        newSet = [...(newSet || [])];
    //        oldSet = [...(oldSet || [])];
    //
    //        while (newSet[i] || oldSet[i]) {
    //            let n = newSet[i],
    //                o = oldSet[i];
    //
    //            if(n && o) {
    //                replace && replace(n, o);
    //
    //            }else if(n && !o) {
    //                create && create(n);
    //            }else if(!n && o) {
    //                destroy && destroy(o);
    //            }
    //            i++;
    //        }
    //    })
    G.d = {
        /**
         * 一个元素是否匹配一个css选择器
         * @param {Element} dom
         * @param {string} selector
         * @return {boolean}
         */
        matches: function (dom, selector) {
            if (dom instanceof Element && typeof selector === 'string' && selector) {
                if (dom.webkitMatchesSelector) {
                    // 兼容android 4.4
                    return dom.webkitMatchesSelector(selector);
                    // }else if('matchesSelector' in dom){
                    // 兼容老版本浏览器
                    // return dom.matches(selector);
                }
                else if (dom.matches) {
                    return dom.matches(selector);
                }
            }
            return false;
        },
        /**
         * 设置innerHTML 可执行html中的script里面脚本
         * @param {HTMLElement} dom
         * @param {string} html
         */
        setHTML: function (dom, html) {
            if (dom instanceof Element && typeof html === 'string') {
                dom.innerHTML = G.tools.str.toEmpty(html);
                var scripts = dom.querySelectorAll('script');
                for (var i = 0, s = null; s = scripts.item(i); i++) {
                    var newSc = document.createElement('script');
                    newSc.text = s.text;
                    s.parentNode && s.parentNode.replaceChild(newSc, s);
                }
            }
        },
        /**
         * 通过html字符串创建元素
         * @param {string} html
         * @param {string} parent
         * @return {HTMLElement}
         */
        create: createElement,
        /**
         * 移除一个元素
         * @param {Element} node
         * @param {boolean} [clearEvent=true] - 是否移除此元素以及所有子元素的事件, 默认true
         */
        remove: function (node, clearEvent) {
            if (clearEvent === void 0) { clearEvent = true; }
            if (node instanceof Element) {
                if (clearEvent) {
                    G.d.off(node);
                    G.d.queryAll('*', node).forEach(function (nd) {
                        G.d.off(nd);
                        G.elemData.remove(node);
                    });
                }
                node.parentNode && node.parentNode.removeChild(node);
            }
        },
        /**
         * 向上冒泡遍历查找与能与css选择器匹配的元素(包含自身),
         */
        closest: function (target, selector, stopNode) {
            if (target instanceof HTMLElement && typeof selector === 'string' && (G.tools.isUndefined(stopNode) || stopNode instanceof HTMLElement)) {
                var tar = target;
                while (tar) {
                    if (G.d.matches(tar, selector)) {
                        return tar;
                    }
                    tar = tar.parentElement;
                    if (stopNode && stopNode.isSameNode(tar)) {
                        return null;
                    }
                }
            }
            return null;
        },
        /**
         * 查询匹配的集合
         * @param {string} selector
         * @param {NodeSelector} dom
         * @return {HTMLElement[]}
         */
        queryAll: function (selector, dom) {
            if (dom === void 0) { dom = document; }
            if (typeof selector === 'string' && dom && G.tools.isFunction(dom.querySelectorAll)) {
                return Array.prototype.slice.call(dom.querySelectorAll(selector), 0);
            }
            return [];
        },
        /**
         * 查询一个
         * @param {string} selector
         * @param {NodeSelector} dom
         * @return {HTMLElement}
         */
        query: function (selector, dom) {
            if (dom === void 0) { dom = document; }
            // if(dom === window){
            //     dom = document;
            // }
            if (typeof selector === 'string' && dom && G.tools.isFunction(dom.querySelector)) {
                return dom.querySelector(selector);
            }
            else {
                return null;
            }
        },
        /**
         * 往父元素最后附加一个元素
         */
        append: function (parent, child) {
            if (parent instanceof Node && parent !== child) {
                if (G.tools.isPrimitive(child)) {
                    child = document.createTextNode(child + '');
                }
                if (child instanceof Node) {
                    try {
                        parent.appendChild(child);
                    }
                    catch (e) {
                        console.log(e);
                    }
                }
            }
        },
        /**
         * 往父元素第一个位置插入一个元素
         */
        prepend: function (parent, child) {
            if (parent instanceof Node) {
                if (G.tools.isPrimitive(child)) {
                    child = document.createTextNode(child + '');
                }
                if (child instanceof Node) {
                    parent.insertBefore(child, parent.firstChild);
                }
            }
        },
        /**
         * 在某个元素之前插入一个元素
         */
        before: function (ref, el) {
            if (ref instanceof Node) {
                if (G.tools.isPrimitive(el)) {
                    el = document.createTextNode(el + '');
                }
                if (el instanceof Node) {
                    ref.parentNode && ref.parentNode.insertBefore(el, ref);
                }
            }
        },
        /**
         * 在某个元素之后插入一个元素
         * @param {Element} ref
         * @param {Node | string} el
         */
        after: function (ref, el) {
            if (ref instanceof Node) {
                if (G.tools.isPrimitive(el)) {
                    el = document.createTextNode(el + '');
                }
                if (el instanceof Node) {
                    ref.parentNode && ref.parentNode.insertBefore(el, ref.nextSibling);
                }
            }
        },
        /**
         * 将oldEl替换为newEl
         */
        replace: function (newEl, oldEl) {
            if (oldEl instanceof Node) {
                if (G.tools.isPrimitive(newEl)) {
                    newEl = document.createTextNode(newEl + '');
                }
                if (newEl instanceof Node) {
                    oldEl.parentNode && oldEl.parentNode.replaceChild(newEl, oldEl);
                }
            }
        },
        /**
         * 设置el相对relEl的绝对定位位置, 使得el出现在relEl的下方
         * 调用该函数后，el会被放到body下
         * @param {HTMLElement} el
         * @param {HTMLElement} relEl
         * @param {boolean} [useRelWidth]
         */
        setPosition: function (el, relEl, useRelWidth) {
            if (useRelWidth === void 0) { useRelWidth = true; }
            if (el instanceof HTMLElement && relEl instanceof HTMLElement) {
                if (el.parentNode !== document.body) {
                    G.d.append(document.body, el);
                }
                var relRect = relEl.getBoundingClientRect();
                if (useRelWidth) {
                    el.style.width = relRect.width + "px";
                }
                var elHeight = el.offsetHeight, elWidth = el.offsetWidth, bodyWidth = document.body.offsetWidth, bodyHeight = document.body.offsetHeight, top_1 = relRect.bottom, left = relRect.left - 2;
                top_1 = top_1 + elHeight < bodyHeight ? top_1 : relRect.top - elHeight - 2;
                left = left + elWidth > bodyWidth ? left - (left + elWidth - bodyWidth) - 2 : left;
                el.style.position = 'absolute';
                el.style.left = left + "px";
                el.style.top = top_1 + "px";
                el.style.zIndex = '1020';
                //是否将el的宽度设置为relEl的宽度
            }
        },
        off: event.eventOff,
        on: event.eventOn,
        once: event.eventOnce,
        /**
         * 添加/获取 数据
         * @param {Node} node
         * @param data
         * @return {any}
         */
        data: function (node, data) {
            if (node instanceof Node) {
                var eleData = G.elemData.get(node);
                if (data) {
                    eleData[G.__EL_DATA_INNER_KEY__.data] = data;
                }
                else {
                    return eleData[G.__EL_DATA_INNER_KEY__.data];
                }
            }
        },
        // <>(nowArr: T[], oldArr: K[], operate: {
        //     create?(now: T): void,
        //     replace?(now: T, old: K): void,
        //     destroy?(old: K): void
        // });
        diff: function (newSet, oldSet, operate) {
            var i = 0, create = operate.create, replace = operate.replace, destroy = operate.destroy;
            newSet = (newSet || []).slice();
            oldSet = (oldSet || []).slice();
            var hasNew = i in newSet, hasOld = i in oldSet;
            while (hasNew || hasOld) {
                var n = newSet[i], o = oldSet[i];
                if (hasNew && hasOld) {
                    replace && replace(n, o);
                }
                else if (hasNew && !hasOld) {
                    create && create(n);
                }
                else if (!hasNew && hasOld) {
                    destroy && destroy(o);
                }
                i++;
                hasNew = i in newSet;
                hasOld = i in oldSet;
            }
        },
        classAdd: function (el, tokens) {
            var _a;
            if (el instanceof Element) {
                var classArr = G.tools.toArray(tokens)
                    .reduce(function (per, cur) { return per.concat(cur.split(' ')); }, []);
                (_a = el.classList).add.apply(_a, classArr.filter(function (token) { return !!token; }));
            }
        },
        classRemove: function (el, tokens) {
            var _a;
            if (el instanceof Element) {
                var classArr = G.tools.toArray(tokens)
                    .reduce(function (per, cur) { return per.concat(cur.split(' ')); }, []);
                (_a = el.classList).remove.apply(_a, classArr.filter(function (token) { return !!token; }));
            }
        },
        classToggle: function (el, token, force) {
            if (el instanceof Element) {
                el.classList.toggle(token, force);
            }
        },
        hide: function (el, force) {
            if (force === void 0) { force = true; }
            G.d.classToggle(el, 'hide', force);
        },
        disable: function (el, force) {
            if (force === void 0) { force = true; }
            G.d.classToggle(el, 'disable', force);
        }
    };
})(G || (G = {}));
function h(tag, props) {
    var children = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        children[_i - 2] = arguments[_i];
    }
    var TREE_KEY = G.__EL_DATA_INNER_KEY__.tree;
    var isCustom = typeof tag !== 'string', // 是否是自定义标签
    com;
    if (isCustom) {
        com = comCreate.apply(void 0, [tag, props].concat(children));
    }
    else {
        com = domCreate.apply(void 0, [tag, props].concat(children));
    }
    function childrenNodeGet(com, children) {
        if (!Array.isArray(children)) {
            return null;
        }
        if (Array.isArray(children[0])) {
            children = children[0];
        }
        // 虚拟树
        var currentData = G.elemData.get(com);
        currentData[TREE_KEY] = Object.assign({}, currentData[TREE_KEY], {
            childs: [],
        });
        return children.filter(function (c) { return G.tools.isNotEmpty(c); }).map(function (child) {
            var node = null;
            if (['string', 'boolean', 'number'].includes(typeof child)) {
                child = node = document.createTextNode(child + '');
            }
            else if (child instanceof Node) {
                node = child;
            }
            else if (child.wrapper instanceof Node) {
                node = child.wrapper;
            }
            // 虚拟树
            currentData[TREE_KEY].childs.push(child);
            var childData = G.elemData.get(child);
            childData[TREE_KEY] = Object.assign({}, childData[TREE_KEY], { parent: com });
            return node;
        });
    }
    function comCreate(Tag, props) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var nodes, com = new Tag(Object.assign({}, props, {
            '__cmdInit': function (com) {
                cmdParse(com, props);
                if ((com._body instanceof Node)) {
                    nodes = childrenNodeGet(com, children);
                }
            }
        }));
        Array.isArray(nodes) && com._body && nodes.forEach(function (node) {
            G.d.append(com._body, node);
        });
        return com;
    }
    function domCreate(tag, props) {
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var element = document.createElement(tag);
        if (props && typeof props === 'object') {
            for (var prop in props) {
                var val = props[prop];
                if (prop === 'class') {
                    prop = 'className';
                }
                if (prop === 'style' && val) {
                    if (typeof val === 'string') {
                        element.style.cssText = val;
                    }
                    else if (typeof val === 'object') {
                        for (var name_1 in val) {
                            element.style[name_1] = val[name_1];
                        }
                    }
                }
                else if (prop.indexOf('data-') === 0) {
                    prop = prop.slice(5).split('-').map(function (name, i) {
                        if (i !== 0) {
                            name = name[0].toUpperCase() + name.slice(1);
                        }
                        return name;
                    }).join('');
                    element.dataset[prop] = val;
                }
                else if (prop === 'placeholder') {
                    element[prop] = G.tools.str.toEmpty(val);
                }
                else {
                    element[prop] = val;
                }
            }
        }
        cmdParse(element, props);
        var nodes = childrenNodeGet(element, children);
        Array.isArray(nodes) && nodes.forEach(function (node) {
            G.d.append(element, node);
        });
        return element;
    }
    function cmdParse(com, props) {
        var currentData = G.elemData.get(com);
        currentData[TREE_KEY] = {
            cmd: {}
        };
        if (props && typeof props === 'object') {
            for (var prop in props) {
                var val = props[prop];
                if (prop.indexOf('c-') === 0) {
                    delete [props][prop];
                    prop = prop.slice(2).split('-').map(function (name, i) {
                        if (i !== 0) {
                            name = name[0].toUpperCase() + name.slice(1);
                        }
                        return name;
                    }).join('');
                    currentData[TREE_KEY].cmd[prop] = val;
                }
            }
        }
    }
    return com;
}

var G;
(function (G) {
    var Ajax = /** @class */ (function () {
        function Ajax() {
            this._xhr = null;
            this.cache = new AjaxCache();
            this._promise = null;
            this._xhr = new XMLHttpRequest();
        }
        Object.defineProperty(Ajax.prototype, "promise", {
            get: function () {
                return this._promise || Promise.resolve();
            },
            enumerable: true,
            configurable: true
        });
        Ajax.prototype.fetch = function (url, setting) {
            var _this = this;
            this._promise = new Promise(function (resolve, reject) {
                _this.request(url, setting, function (result) {
                    resolve(result);
                }, function (result) {
                    reject(result);
                });
            });
            return this._promise;
        };
        Ajax.prototype.request = function (url, setting, success, error) {
            var _this = this;
            var accepts = {
                text: 'text/plain',
                html: 'text/html',
                xml: 'application/xml, text/xml',
                json: 'application/json, text/javascript',
                script: 'text/javascript, application/javascript, application/x-javascript'
            }, xhr = this._xhr, 
            // 处理ajax参数
            s = getSetting(url, setting), 
            // 判断是否开启本地缓存
            isLocalCache = s.cache && s.type === 'GET' && ~['text', 'json'].indexOf(s.dataType), abortTimeoutId = null;
            // isLocalCache = s.cache && s.localCache && s.type === 'GET' && ~['text', 'json'].indexOf(s.dataType);
            // 直接调用本地缓存
            if (isLocalCache && this.cache.has(s)) {
                done(null, this.cache.get(s));
                return;
            }
            // url是否加入禁用缓存参数
            var uncacheUrl = s.cache === false ? { '_': new Date().getTime() } : null;
            // 打开xhr
            xhr.open(s.type, G.tools.url.addObj(s.url, uncacheUrl));
            // 返回类型设置
            var mine = accepts[s.dataType];
            if (mine) {
                xhr.overrideMimeType(mine.split(',')[0]);
            }
            // Apply custom fields if provided
            if (setting && setting.xhrFields) {
                for (var i in setting.xhrFields) {
                    xhr[i] = setting.xhrFields[i];
                }
            }
            // headers 设置
            for (var name_1 in s.headers) {
                xhr.setRequestHeader(name_1, s.headers[name_1]);
            }
            //超时设置
            if (s.timeout > 0) {
                abortTimeoutId = setTimeout(function () {
                    xhr.onreadystatechange = function () {
                    };
                    xhr.abort();
                    failure('timeout');
                }, s.timeout);
            }
            // 文件类型
            if (s.dataType === 'file') {
                xhr.responseType = 'blob';
            }
            // 返回状态处理
            xhr.onreadystatechange = function (e) {
                if (xhr.readyState !== XMLHttpRequest.DONE) {
                    return;
                }
                // 成功
                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304) {
                    var type2response = {
                        xml: 'responseXML',
                        file: 'response'
                    };
                    done(xhr, xhr[type2response[s.dataType] || 'responseText']);
                    // 加入缓存
                    if (isLocalCache) {
                        _this.cache.push(s, xhr.responseText);
                    }
                }
                else {
                    // 失败
                    failure(xhr.status ? 'error' : 'abort', xhr.statusText);
                    // error(Ajax.errRes(xhr, 'error', xhr.statusText));
                }
            };
            // xhr.onabort = function() {
            //     error(Ajax.errRes(xhr, 'abort', ''));
            // };
            // xhr.onerror = function() {
            //     error(Ajax.errRes(xhr, 'error', ''));
            // };
            // 发送
            xhr.send(s.data);
            function done(xhr, response) {
                var result = null;
                if (s.dataType === 'json') {
                    try {
                        result = JSON.parse(response);
                    }
                    catch (e) {
                        failure('parsererror', e);
                        return;
                    }
                }
                else {
                    result = response;
                }
                // success({response: result, statusText: 'success', xhr});
                clearTimeout(abortTimeoutId);
                success(Ajax.sucRes(result, 'success', xhr));
            }
            function failure(statusType, errorThrown) {
                if (errorThrown === void 0) { errorThrown = ''; }
                clearTimeout(abortTimeoutId);
                error(Ajax.errRes(xhr, statusType, errorThrown));
            }
            function getSetting(url, setting) {
                // 默认值
                setting = Object.assign({
                    type: 'GET',
                    dataType: 'text',
                    timeout: 0,
                    processData: true,
                    traditional: false
                }, setting);
                var s = {
                    url: url,
                    timeout: setting.timeout,
                    processData: setting.processData,
                    cache: setting.cache
                    // , localCache: setting.localCache
                    ,
                    type: setting.type.toUpperCase(),
                    dataType: setting.dataType.toLowerCase(),
                    traditional: setting.traditional,
                    xhrFields: setting.xhrFields
                };
                // 确定content type
                if (typeof setting.contentType === 'string' && setting.contentType) {
                    // 如果有传入content type, 则直接赋值
                    s.contentType = setting.contentType;
                }
                else if (setting.contentType !== false && s.type !== 'GET' && setting.data) {
                    // 如果传入的contentType不为false，type为GET时不需要发送数据，所以不为GET时才设置ContentType, 然后data不为空
                    s.contentType = s.traditional ? 'application/x-www-form-urlencoded' : accepts.json;
                }
                //设置headers
                s.headers = {
                    Accept: accepts[setting.dataType] || '*/*',
                    'X-Requested-With': 'XMLHttpRequest'
                };
                if (s.contentType) {
                    // 设置contentType
                    s.headers['Content-Type'] = s.contentType;
                }
                if (setting.headers) {
                    // 设置用户自定义的header
                    for (var name_2 in setting.headers) {
                        s.headers[name_2] = setting.headers[name_2];
                    }
                }
                // 处理数据
                if (setting.data) {
                    var sData = setting.data;
                    if (setting.processData && typeof sData === 'object') {
                        if (s.type === 'GET') {
                            s.url = G.tools.url.addObj(url, sData);
                            s.data = '';
                        }
                        else if (s.contentType) {
                            // 发送数据为json时将json转为字符串
                            s.data = s.traditional ? G.tools.obj.toUri(sData) : JSON.stringify(sData);
                        }
                    }
                    else if (typeof sData === 'string') {
                        s.data = sData;
                    }
                    else if (typeof sData.toString === 'function') {
                        s.data = sData.toString();
                    }
                }
                return s;
            }
        };
        Ajax.errRes = function (xhr, statusText, errorThrown) {
            return { xhr: xhr, statusText: statusText, errorThrown: errorThrown };
        };
        Ajax.sucRes = function (response, statusText, xhr) {
            return { response: response, statusText: statusText, xhr: xhr };
        };
        Ajax.fetch = function (url, setting) {
            return new Ajax().fetch(url, setting);
        };
        return Ajax;
    }());
    G.Ajax = Ajax;
    var AjaxCache = /** @class */ (function () {
        function AjaxCache() {
            this.hashArr = [];
            this.dataArr = [];
        }
        AjaxCache.prototype.hashGet = function (s) {
            return s.url + s.data;
        };
        AjaxCache.prototype.push = function (s, data) {
            var hash = this.hashGet(s), index = this.hashArr.indexOf(hash);
            // 如果已经存在此hash 则替换上面的数据
            if (index >= 0) {
                this.dataArr[index] = data;
                return;
            }
            // 如果已经是最大长度，则先做出栈
            if (this.hashArr.length === this.max) {
                this.hashArr.shift();
                this.dataArr.shift();
            }
            this.hashArr.push(hash);
            this.dataArr.push(data);
        };
        AjaxCache.prototype.get = function (s) {
            var hash = this.hashGet(s), index = this.hashArr.indexOf(hash);
            return index >= 0 ? this.dataArr[index] : null;
        };
        AjaxCache.prototype.has = function (s) {
            return this.hashArr.indexOf(this.hashGet(s)) >= 0;
        };
        AjaxCache.prototype.clear = function () {
            this.hashArr = [];
            this.dataArr = [];
        };
        return AjaxCache;
    }());
})(G || (G = {}));

var G;
(function (G) {
    var SPA_PAGE_FLAG = '__IS_SPA_PAGE__'; // SPAPage类的标识, 用于判断路由是普通函数还是SPAPage构造函数
    G.SPA = (function (document, window) {
        var currentHash = '', spaItems = null, hash2data = {}, noChangeHash = [];
        var SPAItem = /** @class */ (function () {
            function SPAItem(_a) {
                var name = _a.name, max = _a.max, router = _a.router, container = _a.container, main = _a.main, defaultRouter = _a.defaultRouter, tab = _a.tab;
                this.name = '';
                this.pages = null;
                this.max = 10;
                this.router = null;
                this.history = null;
                this._containerPara = null;
                this._container = null;
                this.name = name;
                this.max = max || 10;
                this.router = router;
                this._containerPara = container;
                this.main = main;
                this.defaultRouter = defaultRouter;
                this.history = new SPAHistory(name);
                this.tabPara = tab;
            }
            Object.defineProperty(SPAItem.prototype, "container", {
                get: function () {
                    var para = this._containerPara;
                    if (!this._container && para) {
                        if (typeof para === 'string') {
                            this._container = G.d.query(para);
                        }
                        else {
                            this._container = this._containerPara;
                        }
                    }
                    return this._container;
                },
                enumerable: true,
                configurable: true
            });
            // 初始化main 和 default
            SPAItem.prototype.init = function (hash) {
                var _this = this;
                // init main
                var main = this.main, promise;
                if (main) {
                    var _a = main.router, mainName = _a[0], mainPara = _a[1];
                    promise = this.pageCreate(mainName, mainPara, this.main.container).then(function (page) {
                        _this.mainPage = page;
                        G.d.classAdd(page.wrapper, 'main-page-container');
                    });
                }
                else {
                    promise = Promise.resolve();
                }
                return promise.then(function () {
                    var tabPara = _this.tabPara;
                    if (G.tools.isNotEmpty(tabPara)) {
                        _this.tab = new tabPara.TabClass({ container: tabPara.container });
                    }
                    // init default
                    var _a = hashAnalyze(hash), spaName = _a.spaName, routeName = _a.routeName;
                    if (spaName && routeName) {
                        open(hash);
                    }
                    else if (_this.defaultRouter) {
                        _this.defaultRouterInit();
                    }
                });
            };
            SPAItem.prototype.defaultRouterInit = function () {
                if (this.defaultRouter) {
                    for (var routeName in this.defaultRouter) {
                        open(hashCreate(this.name, routeName, this.defaultRouter[routeName]));
                    }
                }
            };
            /**
             * 打开页面，内部调用
             * @param {string} hash
             */
            SPAItem.prototype.open = function (hash) {
                var _this = this;
                var _a = hashAnalyze(hash), routeName = _a.routeName, para = _a.para;
                // 防止打开main页面
                var mainName = this.main && this.main.router && this.main.router[0];
                if (!routeName || mainName === routeName) {
                    return;
                }
                var page = this.pageGet(hash), tab = this.tab;
                if (!para['_noHide']) {
                    // 隐藏当前页面
                    this.pages && this.pages.forEach(function (page) {
                        if (page.isOnceClose) {
                            _this.close(page.hash, true);
                        }
                        else {
                            page.isShow = false;
                        }
                    });
                    // let currentPage = this.pageGet(currentHash);
                    // if (currentPage) {
                    //     currentPage.isShow = false;
                    // }
                }
                // 销毁弹窗的页面
                if (noChangeHash[0]) {
                    noChangeHash = noChangeHash.filter(function (noChange) {
                        var isClose = noChange !== hash;
                        if (isClose) {
                            _this.close(noChange, true);
                        }
                        return !isClose;
                    });
                }
                var promise = null;
                if (page) {
                    page.isShow = true;
                    promise = Promise.resolve(page);
                }
                else {
                    // 打开新页面时需要清理多余的界面
                    this.clearMax();
                    promise = this.pageCreate(routeName, para).then(function (page) {
                        if (page) {
                            page['_hash'] = hash;
                            _this.pages || (_this.pages = []);
                            _this.pages.push(page);
                            tab && tab.add(hash, page.title);
                        }
                        return page;
                    });
                }
                promise.then(function () {
                    // debugger;
                    _this.history.add({ hash: hash });
                    tab && tab.active(hash);
                });
                return promise;
            };
            SPAItem.prototype.pageCreate = function (routeName, para, container) {
                var _this = this;
                if (!this.router[routeName]) {
                    require(['Modal'], function (m) {
                        m.Modal.alert('没有配置此页面路由');
                    });
                    return Promise.reject('');
                }
                var ConstructorPromise = null, routerFun = this.router[routeName], mainName = this.main && this.main.router && this.main.router[0], hash = hashCreate(this.name, routeName === mainName ? '' : routeName, para), data = hash2data[hash];
                if (routerFun[SPA_PAGE_FLAG]) {
                    // 是构造函数
                    ConstructorPromise = Promise.resolve(routerFun);
                }
                else if (typeof routerFun === 'function') {
                    //是返回构造函数的函数
                    ConstructorPromise = routerFun();
                }
                return new Promise(function (resolve, reject) {
                    ConstructorPromise.then(function (PageConstructor) {
                        if (PageConstructor) {
                            var page = new PageConstructor(para, data);
                            if (!page.container) {
                                if (container) {
                                    container = typeof container === 'string' ? G.d.query(container) : container;
                                }
                                page.container = container || _this.container;
                                G.tools.isFunction(page.domReady) && page.domReady();
                            }
                            delete hash2data[hash];
                            resolve(page);
                        }
                        else {
                            reject();
                        }
                    }).catch(function (e) {
                        console.log(e);
                        require(['Modal'], function (m) {
                            m.Modal.alert('页面加载错误, 请重试');
                        });
                        reject(e);
                    });
                });
            };
            SPAItem.prototype.pageGet = function (hash) {
                if (this.pages) {
                    for (var _i = 0, _a = this.pages; _i < _a.length; _i++) {
                        var page = _a[_i];
                        if (page.hash === hash) {
                            return page;
                        }
                    }
                }
                return null;
            };
            SPAItem.prototype.clearMax = function () {
                while (this.history.length >= this.max && this.max > 0) {
                    var first = this.history.all[0];
                    this.close(first.hash);
                }
            };
            SPAItem.prototype.close = function (hash, onHide) {
                if (onHide === void 0) { onHide = false; }
                var currentPage = this.pageGet(hash);
                if (!currentPage) {
                    return;
                }
                var isCurrent = currentPage === this.pageGet(currentHash);
                currentPage.close();
                this.history.remove(hash);
                this.pages = this.pages.filter(function (page) { return page !== currentPage; });
                this.tab && this.tab.remove(hash);
                if (!onHide && this.history.length > 0 && isCurrent) {
                    // 显示上一个页面
                    open(this.history.last.hash);
                }
            };
            SPAItem.prototype.closeAll = function () {
                this.pages && this.pages.forEach(function (page) { return page.close(); });
                this.pages = null;
            };
            SPAItem.prototype.disappear = function () {
                Array.isArray(this.pages) && this.pages.forEach(function (page) { return page.close(); });
                this.mainPage && this.mainPage.close();
                this.tab && this.tab.destroy();
                this.tab = null;
                this.mainPage = null;
                this.pages = null;
                this.history.removeAll();
                this._container = null;
            };
            SPAItem.prototype.destroy = function () {
                this.name = '';
                this._container = null;
                this.router = null;
                this.disappear();
                this.history = null;
                this._containerPara = null;
            };
            return SPAItem;
        }());
        /**
         * 事件初始化, 整个页面通过hashChange来
         */
        var hashChangeEvent = (function () {
            var customOnChange = null;
            var handler = function (ev) {
                // openInner(ev.newURL.split('#')[1], unusedPageData);
                hashChange(ev.newURL);
                if (G.tools.isFunction(customOnChange)) {
                    customOnChange(url2hash(ev.newURL, 1), url2hash(ev.oldURL, 1));
                }
            };
            return {
                on: function () {
                    G.d.on(window, 'hashchange', handler);
                },
                off: function () {
                    G.d.on(window, 'hashchange', handler);
                },
                onChange: function (handler) {
                    customOnChange = handler;
                }
            };
        })();
        function url2hash(url, type) {
            if (type === void 0) { type = 1; }
            var hash = url.split('#')[1];
            return type === 0 ? hash : hashAnalyze(hash);
        }
        /**
         *
         * @param url - 新url
         */
        function hashChange(url) {
            // debugger;
            var hash = url2hash(url, 0), spaName = hashAnalyze(hash).spaName;
            var spaItem = spaItems[spaName];
            if (spaItem) {
                var oldSpaName = hashAnalyze(currentHash).spaName, promise = null;
                if (oldSpaName !== spaName && spaItems[oldSpaName]) {
                    // 如果换了一个单页应用, 则清理到之前的所有页面
                    spaItems[oldSpaName].disappear();
                    // 初始化新的应用
                    promise = spaItem.init();
                }
                else {
                    promise = Promise.resolve();
                }
                promise.then(function () {
                    return spaItem.open(hash);
                }).then(function () {
                    currentHash = hash;
                }).catch(function (e) {
                    console.log(e);
                });
            }
            // debugger;
        }
        /**
         * 初始化
         */
        function init(paras) {
            // destroy();
            if (G.tools.isEmpty(paras)) {
                return false;
            }
            spaItems = {};
            paras.forEach(function (para) {
                spaItems[para.name] = new SPAItem(para);
            });
            var hash = location.hash;
            location.hash = '';
            hashChangeEvent.on();
            var spaName = hashAnalyze(hash).spaName;
            spaName = spaName || paras[0].name;
            //
            // // 数组第一个作为默认打开单页应用
            spaItems[spaName].init(hash);
            //     .then(() => {
            //     if(hash){
            //         open(hash);
            //     }
            // });
        }
        function open(hash, data, noHashChange) {
            if (noHashChange === void 0) { noHashChange = false; }
            var hashStr = Array.isArray(hash) ? hashCreate(hash[0], hash[1], hash[2]) : hash;
            if ('#' + hashStr === location.hash) {
                currentHash = hashStr;
            }
            else {
                if (noHashChange) {
                    hashChange('#' + hashStr);
                    noChangeHash.push(hashStr);
                }
                else {
                    location.hash = hashStr;
                }
            }
            hash2data[hashStr] = data;
        }
        /**
         * 返回
         */
        function back() {
            history.back();
        }
        /**
         * 分解url的hash值, 返回hash, routeName, para
         * @param {string} hash
         * @return
         */
        function hashAnalyze(hash) {
            if (hash) {
                var hashArr = hash.split('?'), _a = hashArr[0].split('/').map(function (str) { return decodeURIComponent(str); }), spaName = _a[1], routeName = _a[2], para_1 = {};
                if (hashArr[1]) {
                    hashArr[1].split('&').forEach(function (keyVal) {
                        var arr = keyVal.split('=');
                        if (arr[0]) {
                            para_1[arr[0]] = valTrans(arr[1]);
                        }
                    });
                }
                function valTrans(val) {
                    var obj = {
                        'null': null,
                        'true': true,
                        'false': false,
                        'undefined': void 0
                    };
                    return val in obj ? obj[val] : decodeURIComponent(val);
                }
                // if (hashArr[1]) {
                //                let search = {};
                //                hashArr[1].split('&').forEach((keyVal) => {
                //                    let arr = keyVal.split('=');
                //                    search[arr[0]] = arr[1] || '';
                //                });
                //                let paraStr = search[PARA_NAME];
                //                para = typeof paraStr === 'string' ? paraStr.split(',').map(p => decodeURIComponent(p)) : null;
                //            }
                return { spaName: spaName, routeName: routeName, para: para_1 };
            }
            return { spaName: '', routeName: '', para: null };
        }
        function hashCreate(spaName, routeName, para) {
            spaName = encodeURIComponent(spaName);
            routeName = encodeURIComponent(routeName);
            // let paraStr = Array.isArray(para) ? encodeURIComponent(para.join(',')) : '';
            var paraStr = G.tools.obj.toUri(para, false);
            return "/" + spaName + "/" + routeName + (paraStr ? "?" + paraStr : '');
        }
        function hashCompare(hash1, hash2) {
            var _a = hashAnalyze(hash1), spaName1 = _a.spaName, routeName1 = _a.routeName, para1 = _a.para, _b = hashAnalyze(hash1), spaName2 = _b.spaName, routeName2 = _b.routeName, para2 = _b.para;
            if (spaName1 === spaName2 && routeName1 === routeName2) {
                if (Array.isArray(para1) && Array.isArray(para2)) {
                }
                else {
                    return;
                }
            }
        }
        function close(hash) {
            if (hash === void 0) { hash = currentHash; }
            var route = spaItems[hashAnalyze(hash).spaName];
            route.close(hash);
        }
        function destroy() {
            hashChangeEvent.off();
            hash2data = null;
            currentHash = null;
            spaItems && Object.values(spaItems).forEach(function (item) { return item.destroy(); });
            spaItems = null;
        }
        /**
         * 对外提供公共属性与方法
         */
        function pageGet(hash) {
            if (hash === void 0) { hash = currentHash; }
            var spaName = hashAnalyze(hash).spaName;
            var route = spaItems[spaName];
            return route ? route.pageGet(hash) : null;
        }
        /**
         * 给上个页面发送事件
         * @param event - 事件名
         * @param para - 事件参数
         */
        function firePre(event) {
            var para = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                para[_i - 1] = arguments[_i];
            }
            var spaName = hashAnalyze(currentHash).spaName, spaItem = spaItems[spaName], page = spaItem.pages[spaItem.pages.length - 2];
            page && page.trigger.apply(page, [event].concat(para));
        }
        return {
            init: init, open: open, close: close, pageGet: pageGet, hashAnalyze: hashAnalyze, hashCreate: hashCreate, firePre: firePre, onChange: hashChangeEvent.onChange
        };
    })(document, window);
    var SPAPage = /** @class */ (function () {
        function SPAPage(para, data) {
            this.para = para;
            this.data = data;
            this._container = null;
            this._isShow = false;
            this.eventHandlers = {};
            this.isOnceClose = false;
            this.beforeClose = function (page) {
            };
            this.afterClose = function (hash) {
            };
            this.domReady = function () { };
            this.initInner();
        }
        // 初始化, 刷新
        SPAPage.prototype.initInner = function () {
            if (this.wrapper) {
                G.d.append(this.wrapper, this.wrapperInit());
            }
            this.init(this.para, this.data);
        };
        Object.defineProperty(SPAPage.prototype, "hash", {
            get: function () {
                return this._hash;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPAPage.prototype, "wrapper", {
            get: function () {
                if (!this._wrapper) {
                    this._wrapper = this.wrapperCreate();
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        SPAPage.prototype.wrapperCreate = function () {
            var dom = document.createElement('div');
            dom.classList.add('page-container');
            G.d.data(dom, { hash: this.hash });
            return dom;
        };
        Object.defineProperty(SPAPage.prototype, "container", {
            get: function () {
                return this._container;
            },
            set: function (el) {
                if (el) {
                    G.d.append(el, this.wrapper);
                    this._container = el;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPAPage.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                this.wrapper && this.wrapper.classList.toggle('hide', !isShow);
                this._isShow = !!isShow;
            },
            enumerable: true,
            configurable: true
        });
        SPAPage.prototype.refresh = function () {
            this.destroy();
            this.initInner();
            G.d.append(this.container, this.wrapper);
        };
        SPAPage.prototype.on = function (name, handler) {
            this.eventHandlers = this.eventHandlers || {};
            if (!this.eventHandlers[name]) {
                this.eventHandlers[name] = [];
            }
            this.eventHandlers[name].push(handler);
        };
        SPAPage.prototype.off = function (name, handler) {
            var handlers = this.eventHandlers[name];
            if (handlers && handlers[name]) {
                if (typeof handler === 'function') {
                    handlers[name].forEach(function (item, index) {
                        if (item === handler) {
                            handlers[name].splice(index, 1);
                        }
                    });
                }
                else {
                    delete handlers[name];
                }
            }
        };
        SPAPage.prototype.trigger = function (type) {
            var para = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                para[_i - 1] = arguments[_i];
            }
            var handlers = this.eventHandlers[type];
            handlers && handlers.forEach(function (item) {
                typeof item === 'function' && item.apply(void 0, para);
            });
        };
        SPAPage.prototype.close = function () {
            this.beforeClose(this);
            this.destroy();
            this.afterClose(this._hash);
            this._hash = null;
            this.beforeClose = null;
            this.afterClose = null;
            this._container = null;
            this.para = null;
            this.data = null;
        };
        SPAPage.prototype.destroy = function () {
            G.d.remove(this._wrapper);
            this._wrapper = null;
            this.eventHandlers = {};
        };
        return SPAPage;
    }());
    G.SPAPage = SPAPage;
    SPAPage[SPA_PAGE_FLAG] = true;
    var ITEM_SELECTOR = '[data-role="item"]', CLOSE_SELECTOR = '[data-role="close"]', TITLE_SELECTOR = '[data-role="title"]';
    var SPATab = /** @class */ (function () {
        function SPATab(para) {
            var _this = this;
            this.clickEvent = (function () {
                var selector = ITEM_SELECTOR + ", " + CLOSE_SELECTOR, itemHandler = function (e) {
                    var role = this.dataset.role, isClose = role === 'close', item = isClose ? G.d.closest(this, ITEM_SELECTOR) : this, hash = G.d.data(item);
                    if (isClose) {
                        G.SPA.close(hash);
                    }
                    else {
                        G.SPA.open(hash);
                    }
                    e.stopPropagation();
                };
                return {
                    on: function () {
                        G.d.on(_this.wrapper, 'click', selector, itemHandler);
                    },
                    off: function () {
                        G.d.off(_this.wrapper, 'click', selector, itemHandler);
                    }
                };
            })();
            this.items = {};
            this.wrapper = this.wrapperInit();
            this.container = para.container;
            G.d.append(this.container, this.wrapper);
            this.initInner();
            this.init();
        }
        SPATab.prototype.initInner = function () {
            this.clickEvent.on();
        };
        SPATab.prototype.init = function () { };
        ;
        SPATab.prototype.add = function (hash, title) {
            var wrapper = this.itemCreate();
            G.d.data(wrapper, hash);
            G.d.append(this.wrapper, wrapper);
            this.items[hash] = new SPATabItem({ wrapper: wrapper, hash: hash, title: title });
        };
        SPATab.prototype.remove = function (hash) {
            var items = this.items;
            items[hash].destroy();
            delete items[hash];
        };
        SPATab.prototype.get = function (hash) {
            return this.items[hash] || null;
        };
        SPATab.prototype.active = function (hash) {
            if (this._active) {
                var prev = this.get(this._active);
                prev && (prev.active = false);
            }
            var current = this.get(hash);
            if (current) {
                current.active = true;
                this._active = hash;
            }
        };
        SPATab.prototype.destroy = function () {
            Object.values(this.items).forEach(function (item) {
                item.active;
            });
            this.items = {};
            G.d.remove(this.wrapper);
            this.container = null;
            this.wrapper = null;
        };
        return SPATab;
    }());
    G.SPATab = SPATab;
    var SPATabItem = /** @class */ (function () {
        function SPATabItem(para) {
            this.wrapper = para.wrapper;
            this.hash = para.hash;
            this.title = para.title;
        }
        Object.defineProperty(SPATabItem.prototype, "titleEl", {
            get: function () {
                if (!this._titleEl) {
                    this._titleEl = G.d.query(TITLE_SELECTOR, this.wrapper);
                }
                return this._titleEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPATabItem.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (str) {
                this.titleEl.innerHTML = G.tools.str.toEmpty(str);
                this._title = str;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPATabItem.prototype, "active", {
            get: function () {
                return this.wrapper.classList.contains('active');
            },
            set: function (flag) {
                this.wrapper.classList.toggle('active', flag);
            },
            enumerable: true,
            configurable: true
        });
        SPATabItem.prototype.destroy = function () {
            G.d.remove(this.wrapper);
            this.wrapper = null;
            this._titleEl = null;
            this._title = null;
            this.hash = null;
        };
        return SPATabItem;
    }());
    var SPAHistory = /** @class */ (function () {
        function SPAHistory(spaName) {
            this._localKey = '__SAP_LOCAL_HISTORY__';
            this.isLocal = false;
            this.items = null;
            this.spaName = spaName;
        }
        Object.defineProperty(SPAHistory.prototype, "localKey", {
            get: function () {
                this.spaName = this.spaName || '';
                return this._localKey + this.spaName;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPAHistory.prototype, "all", {
            get: function () {
                return this.items ? this.items.slice() : [];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPAHistory.prototype, "last", {
            get: function () {
                return this.all ? this.all.pop() : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SPAHistory.prototype, "length", {
            get: function () {
                return this.items ? this.items.length : 0;
            },
            enumerable: true,
            configurable: true
        });
        SPAHistory.prototype.add = function (newItem) {
            if (!newItem || !newItem.hash) {
                return;
            }
            var oldItemIndex = this.indexOf(newItem.hash);
            if (~oldItemIndex) {
                var oldItem = this.items.splice(oldItemIndex, 1)[0];
                newItem.data = newItem.data === void 0 ? oldItem.data : newItem.data;
            }
            this.items = this.items || [];
            this.items.push(newItem);
        };
        SPAHistory.prototype.remove = function (hash) {
            var index = this.indexOf(hash);
            if (~index) {
                this.items.splice(index, 1);
            }
        };
        SPAHistory.prototype.removeAll = function () {
            this.items = [];
        };
        SPAHistory.prototype.has = function (hash) {
            return ~this.indexOf(hash);
        };
        SPAHistory.prototype.get = function (hash) {
            var index = this.indexOf(hash);
            return index >= 0 ? this.items[index] : null;
        };
        SPAHistory.prototype.indexOf = function (hash) {
            if (!this.items) {
                return -1;
            }
            for (var i = 0, item = void 0; item = this.items[i]; i++) {
                if (item.hash === hash) {
                    return i;
                }
            }
            return -1;
        };
        return SPAHistory;
    }());
})(G || (G = {}));

var G;
(function (G) {
    G.Shell = (function (window, document) {
        var _device;
        var base = {
            get device() {
                if (!_device) {
                    _device = ShellBase.handler('deviceGet', {});
                }
                return _device;
            },
            fullScreenSet: function (fullScreen, back) {
                return ShellBase.handler('setFullScreen', { fullScreen: fullScreen }, back);
            },
            versionGet: function () {
                return ShellBase.handler('versionGet', {});
            },
            versionUpdate: function (url, back, info) {
                var versionGet = G.Shell.base.versionGet();
                return G.Ajax.fetch(url, {
                    type: 'POST',
                    data: { msg: versionGet && versionGet.data },
                    dataType: 'json'
                }).then(function (_a) {
                    var response = _a.response;
                    if (response && response.data && response.data.byteLength > 0) {
                        ShellBase.handler('versionUpdate', {
                            byteLength: response.data.byteLength,
                            file: response.data.file
                        }, back, info);
                    }
                    else {
                        back({
                            success: false,
                            msg: '已经是最新版本了',
                            data: null
                        });
                    }
                    return response;
                });
            }
        };
        var finger = {
            get: function (para, back, info, isKeepOn) {
                if (isKeepOn === void 0) { isKeepOn = false; }
                return ShellBase.handler('fingerGet', para, back, info, isKeepOn);
            },
            cancel: function () {
                ShellBase.eventOff('fingerGet');
                return ShellBase.handler('fingerCancel', {});
            },
            verify: function (enterFinger, matchFinger, fingerType) {
                return ShellBase.handler('fingerVerify', {
                    enterFinger: enterFinger,
                    matchFinger: matchFinger,
                    fingerType: fingerType // 是那一种指纹器，值为0或1或2
                });
            }
        };
        var file = {
            save: function (path, file, isAppend, back, info, isDecode) {
                if (isAppend === void 0) { isAppend = false; }
                if (isDecode === void 0) { isDecode = false; }
                return ShellBase.handler('fileSave', {
                    path: path,
                    file: file,
                    isAppend: isAppend,
                    isDecode: isDecode
                }, back, info);
            },
            syncSave: function (path, file, isAppend) {
                if (isAppend === void 0) { isAppend = false; }
                return ShellBase.handler('fileSave', {
                    path: path,
                    file: file,
                    isAppend: isAppend // false覆盖，true添加
                });
            },
            remove: function (path, back, info) {
                return ShellBase.handler('fileDelete', {
                    path: path
                }, back, info);
            },
            syncRemove: function (path) {
                return ShellBase.handler('fileDelete', {
                    path: path
                });
            },
            directoryDelete: function (path) {
                return ShellBase.handler('directoryDelete', {
                    path: path
                });
            },
            unZip: function (path, outdir, back, info) {
                return ShellBase.handler('fileUnzip', {
                    path: path,
                    outdir: outdir
                }, back, info);
            },
            syncUnZip: function (path, outdir) {
                return ShellBase.handler('fileUnzip', {
                    path: path,
                    outdir: outdir
                });
            },
            read: function (path, back, info) {
                return ShellBase.handler('fileRead', {
                    path: path
                }, back, info);
            },
            syncRead: function (path) {
                return ShellBase.handler('fileRead', {
                    path: path
                });
            },
        };
        var casio = {
            upload: function (port, speed, back, infor) {
                // let innerBack = function () {
                //     back(ShellBase.handler('casioDataGet', {}));
                // };
                return ShellBase.handler('casioUpload', { port: port, speed: speed }, back, infor);
            },
            download: function (port, speed, data, back, infor) {
                return ShellBase.handler('casioDownload', { port: port, data: data, speed: speed }, back, infor);
            }
        };
        var sqlite = (function () {
            function query(str, back) {
                return back ? ShellBase.handler('sqliteQuery', { query: str }, back) :
                    ShellBase.handler('sqliteQuery', { query: str });
            }
            return { query: query };
        })();
        var rfid = (function () {
            // comPort:"COM1",comBaud:115200
            // ipAddress:"192.168.1.234",ipPort:100
            // config :{led:true;buzzer:false;power:5}
            function start(str, num, back) {
                // 判断是否是ip
                var data = str.split('.').length === 4 ? { ipAddress: str, ipPort: num } : { comPort: str, comBaud: num };
                return ShellBase.handler('rfidStart', data, back, null, false);
            }
            function reset(str, num, back) {
                var data = str.split('.').length === 4 ? { ipAddress: str, ipPort: num } : { comPort: str, comBaud: num };
                return ShellBase.handler('rfidReset', data, back, null, false);
            }
            function config(str, num, config, back) {
                // 判断是否是ip
                var data = str.split('.').length === 4 ? { ipAddress: str, ipPort: num } : { comPort: str, comBaud: num };
                // document.body.innerHTML = JSON.stringify( Object.assign(data, {config}));
                return ShellBase.handler('rfidConfig', Object.assign(data, { config: config }), back, null, false);
            }
            function stop(back) {
                // ShellBase.eventOff('rfidStart');
                return ShellBase.handler('rfidStop', null, back);
            }
            return { start: start, stop: stop, config: config, reset: reset };
        })();
        var startUp = {
            start: function (autoStart) {
                return ShellBase.handler('setAutoStart', { autoStart: autoStart });
            },
            query: function () {
                return ShellBase.handler('queryAutoStart', {});
            },
            shutDown: function (back) {
                return ShellBase.handler('powerOff', {}, back);
            }
        };
        var printer = {
            get: function () {
                return ShellBase.handler('printersGet', {});
            },
            labelPrint: function (quantity, driveCode, image, back) {
                return ShellBase.handler('labelPrint', { quantity: quantity, driveCode: driveCode, image: image }, back);
            }
        };
        var inventory = {
            getDeviceAddress: function () {
                return ShellBase.handler('getDeviceAddress', function (res) {
                    alert(res);
                });
            },
            defaultRfidDevice: function (type, num) {
                return ShellBase.handler('defaultRfidDevice', { type: type, num: num });
            },
            loadData: function (url, uploadUrl, inventoryKey, back) {
                return ShellBase.handler('loadData', { url: url, uploadUrl: uploadUrl, inventoryKey: inventoryKey }, back);
            },
            uploadData: function (url, inventoryKey, back) {
                return ShellBase.handler('uploadData', { url: url, inventoryKey: inventoryKey }, back);
            },
            insertData: function (data, inventoryKey, back) {
                return ShellBase.handler('insertData', { data: data, inventoryKey: inventoryKey }, back);
            },
            delData: function (data, inventoryKey, back) {
                return ShellBase.handler('delData', { data: data, inventoryKey: inventoryKey }, back);
            },
            clearData: function (dbName, back) {
                return ShellBase.handler('clearData', { dbName: dbName }, back);
            },
            rfidOpen: function (back) {
                return ShellBase.handler('rfid', { type: 'open' }, back, null, false);
            },
            rfidClose: function (back) {
                ShellBase.eventOff('rfid');
                return ShellBase.handler('rfid', { type: 'close' }, back);
            },
            /**
             *
             * @param {obj} value - 获取频段
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            getBand: function (value, back) {
                return ShellBase.handler('rfid', { type: 'getBand', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 获取功率
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            getMinMaxBand: function (value, back) {
                return ShellBase.handler('rfid', { type: 'getMinMaxBand', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 开始盘点
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            startCheck: function (value, back) {
                return ShellBase.handler('rfid', { type: 'startCheck', value: value }, back, null, false);
            },
            stopCheck: function (value, back) {
                ShellBase.eventOff('rfid');
                return ShellBase.handler('rfid', { type: 'endCheck', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 设置参数
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            rfidSetParam: function (value, back) {
                return ShellBase.handler('rfid', { type: 'setParam', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 获取设置参数
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            rfidGetParam: function (value, back) {
                return ShellBase.handler('rfid', { type: 'getParam', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 开始找货
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            findGoods: function (value, back) {
                return ShellBase.handler('rfid', { type: 'findGoods', value: value }, back, null, false);
            },
            /**
             *
             * @param {obj} value - 停止找货
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            stopFind: function (value, back) {
                ShellBase.eventOff('rfid');
                return ShellBase.handler('rfid', { type: 'stopFind', value: value }, back);
            },
            /**
             *
             * @param {obj} value - 开始扫描epc
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            startEpc: function (value, back) {
                return ShellBase.handler('rfid', { type: 'startEpc', value: value }, back, null, false);
            },
            stopEpc: function (value, back) {
                ShellBase.eventOff('rfid');
                return ShellBase.handler('rfid', { type: 'stopEpc', value: value }, back);
            },
            /**
             *
             * @param {obj} value - clearEpc 清除epc
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            clearEpc: function (value, back) {
                return ShellBase.handler('rfid', { type: 'clearEpc', value: value }, back);
            },
            returnEpcbyTime: function (epcs, time, turn, back) {
                return ShellBase.handler('rfid', { type: 'returnEpcbyTime', epcs: epcs, time: time, turn: turn }, back);
            },
            setPwm: function (value, back) {
                return ShellBase.handler('rfid', { type: 'setPwm', value: value }, back);
            },
            getPwn: function (back) {
                return ShellBase.handler('rfid', { type: 'getPwm' }, back);
            },
            /**
             *
             * @param {obj} value - 打开扫码功能
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            openScan: function (back) {
                return ShellBase.handler('supon', { type: 'openScanFunction' }, back, null, false);
            },
            openContinueScan: function (back) {
                return ShellBase.handler('supon', { type: 'openContinueScan' }, back, null, false);
            },
            closeContinueScan: function (back) {
                return ShellBase.handler('supon', { type: 'closeContinueScan' }, back, null, false);
            },
            /**
             *
             * @param {obj} value - 关闭扫码功能
             * * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            closeScan: function (back) {
                ShellBase.eventOff('supon');
                return ShellBase.handler('supon', { type: 'closeScanFunction' }, back, null, false);
            },
            /**
             *
             * @param {obj} value -加载盘点数据（已下载的本地的盘点数据，包括已盘点与未盘点）
             * @param {G.IShellEventHandler} back
             * @returns {boolean}
             */
            getData: function (inventoryKey, field, back) {
                return ShellBase.handler('getData', { inventoryKey: inventoryKey, field: field }, back, null, false);
            },
            getScanCount: function (summary, back) {
                return ShellBase.handler('getScanCount', { summary: summary }, back, null, false);
            },
            columnCountOn: function (when, time, inventoryKey, once, out, back) {
                return ShellBase.handler('getColumnCount', { when: when, time: time, turn: true, inventory: inventoryKey, once: once, out: out }, back, null, false);
            },
            columnCountOff: function (when, time, inventoryKey, back) {
                ShellBase.eventOff('getColumnCount');
                return ShellBase.handler('getColumnCount', { when: when, time: time, turn: false, inventory: inventoryKey, once: true, out: true }, back);
            },
            //条码扫码下载的
            downloadbarcode: function (uniqueFlag, url, back) {
                return ShellBase.handler('downloadbarcode', { uniqueFlag: uniqueFlag, url: url }, back);
            },
            scan2dOn: function (back) {
                return ShellBase.handler('startScan2DResult', '', back, null, false);
            },
            scan2dOff: function () {
                ShellBase.eventOff('startScan2DResult');
                return ShellBase.handler('closeScan2D', '');
            },
            get canRfid() {
                if (!G.tools.os.android) {
                    return false;
                }
                var isSupport = ShellBase.handler('isSupport', 'rfid');
                if (typeof isSupport === 'object') {
                    return isSupport.data;
                }
                else {
                    return isSupport;
                }
            },
            get can2dScan() {
                if (!G.tools.os.android) {
                    return false;
                }
                var isSupport = ShellBase.handler('isSupport', '2dScan');
                if (typeof isSupport === 'object') {
                    return isSupport.data;
                }
                else {
                    return isSupport;
                }
            }
        };
        return {
            base: base, finger: finger, file: file, casio: casio, sqlite: sqlite, printer: printer, rfid: rfid, inventory: inventory, startUp: startUp
        };
    })(window, document);
    var ShellTypes;
    (function (ShellTypes) {
        ShellTypes[ShellTypes["IOS"] = 0] = "IOS";
        ShellTypes[ShellTypes["ANDROID"] = 1] = "ANDROID";
        ShellTypes[ShellTypes["WINDOWS"] = 2] = "WINDOWS";
    })(ShellTypes || (ShellTypes = {}));
    var ShellBase = (function () {
        var userAgent = navigator.userAgent || navigator.vendor, shellType = typeDetect(), shellHandler = windowsHandler, action2eventName = {};
        function eventNameGet() {
            return '__SHELL_EVENT__' + G.tools.getGuid();
        }
        function eventOff(action) {
            var events = action2eventName[action] || [];
            events.forEach(function (event) { return G.d.off(window, event); });
            delete events[action];
        }
        function windowsHandler(action, data, back, infor, isAutoOff) {
            if (isAutoOff === void 0) { isAutoOff = true; }
            if (typeof AppShell === 'object' && G.tools.isFunction(AppShell.asyncFunction) && G.tools.isFunction(AppShell.syncFunction)) {
                var dataStr = typeof data === 'string' ? data : JSON.stringify(data);
                if (G.tools.isEmpty(back) && G.tools.isEmpty(infor)) {
                    return JSON.parse(AppShell.syncFunction(action, dataStr));
                }
                else {
                    // 生成唯一事件名称
                    var eventBack_1 = back ? eventNameGet() : '', eventInfor_1 = infor ? eventNameGet() : '';
                    // 异步调用
                    var flag = AppShell.asyncFunction(action, dataStr, eventBack_1, eventInfor_1);
                    // 过程通知
                    if (flag) {
                        if (!isAutoOff) {
                            action2eventName[action] = action2eventName[action] || [];
                            var events = action2eventName[action];
                            events.push(eventBack_1, eventInfor_1);
                        }
                        if (eventInfor_1) {
                            G.d.on(window, eventInfor_1, function (e) {
                                // alert(typeof e.detail === 'string' ? e.detail : e);
                                var detail = e.detail;
                                try {
                                    infor(typeof detail === 'string' ? JSON.parse(detail) : detail);
                                }
                                catch (e) {
                                    console.log(detail);
                                    console.log(e);
                                    alert('JSON解析错误');
                                }
                            });
                        }
                        // 异步完成通知
                        if (eventBack_1) {
                            G.d.on(window, eventBack_1, function (e) {
                                var detail = e.detail;
                                if (isAutoOff) {
                                    G.d.off(window, eventInfor_1);
                                    G.d.off(window, eventBack_1);
                                }
                                try {
                                    detail = typeof detail === 'string' ? JSON.parse(detail) : detail;
                                }
                                catch (e) {
                                    alert('JSON解析错误');
                                    return;
                                }
                                // alert(JSON.stringify(e.detail));
                                back(detail);
                            });
                        }
                    }
                    return flag;
                }
            }
            else {
                return false;
            }
        }
        // function androidHandler() {
        //
        // }
        // function iosHandler() {
        //
        // }
        function typeDetect() {
            if (/OursAndroid/i.test(userAgent)) {
                return ShellTypes.ANDROID;
            }
            if (/OursIos/i.test(userAgent)) {
                return ShellTypes.IOS;
            }
            if (/OursWindows/.test(userAgent)) {
                return ShellTypes.WINDOWS;
            }
            return -1;
        }
        return {
            eventOff: eventOff,
            get handler() {
                return shellHandler;
            }
        };
    })();
})(G || (G = {}));

/**
 * 规则
 */
var G;
(function (G) {
    var Rule = /** @class */ (function () {
        function Rule() {
        }
        Rule.isNumber = function (dataType) {
            return [Rule.DT_NUMBER, Rule.DT_MONEY, Rule.DT_PERCENT].indexOf(dataType) >= 0;
        };
        Rule.easyLocalString = function (num, minFraction) {
            if (minFraction === void 0) { minFraction = 0; }
            num = num.toString();
            var dotNum = num.split('.'), intNumArr = dotNum[0].split(''), fraction = dotNum[1] === void 0 ? '' : dotNum[1], // 小数部分
            minus = intNumArr[0] === '-';
            // 整数补充逗号
            for (var pos = intNumArr.length - 3; intNumArr[pos]; pos -= 3) {
                // console.log(123);
                if ((minus && pos === 1) || pos === 0) {
                    break;
                }
                intNumArr.splice(pos, 0, ',');
            }
            dotNum[0] = intNumArr.join('');
            // 小数点补全位数
            for (var fraLen = fraction.length; fraLen < minFraction; fraLen++) {
                fraction += '0';
            }
            if (fraction.length) {
                dotNum[1] = fraction;
            }
            return dotNum.join('.');
        };
        Rule.parseNumber = function (number, displayFormat) {
            var formatArr, hasDot;
            if (!G.tools.isEmpty(displayFormat) && typeof number === 'number') {
                formatArr = displayFormat.split('.');
                hasDot = formatArr[1] !== undefined;
            }
            else {
                return number;
            }
            if (hasDot) {
                var afterDot = formatArr[1];
                var beforeDot = formatArr[0];
                //0.00 ...
                number = number.toFixed(afterDot.length);
                //0.## ...
                if (afterDot[0] === '#') {
                    number = number.replace(Rule.parseNumberReg, function (match, p1, p2, p3) {
                        if (p1 === '.' && G.tools.isEmpty(p2)) {
                            //去.
                            return '';
                        }
                        else {
                            //去0
                            return p1 + p2;
                        }
                    });
                }
                if (beforeDot[0] === '#') {
                    var dotNum = number.split('.');
                    var len = !G.tools.isEmpty(dotNum[1]) ? dotNum[1].length : 0;
                    number = Rule.easyLocalString(number, len);
                }
            }
            else {
                // 格式为 "###,###", 因为displayFormat不包含"."符号
                number = Math.round(number);
                if (number >= 1000) {
                    number = Rule.easyLocalString(number);
                }
            }
            return number;
        };
        /**
         *
         * @param {string | number} text
         * @param {object} formats
         * @param {string} formats.dataType
         * @param {string} [formats.displayFormat]
         * @param {string} [formats.trueExpr = 1]
         * @param {int} [formats.displayWidth = 0]
         * @param {boolean} [isWidth = true] - displayWidth参数是否有效
         * @param {boolean} [isNum = false] - 是否传参为字符串型数字
         * @return {string}
         */
        Rule.formatText = function (text, formats, isWidth, isNum) {
            if (isWidth === void 0) { isWidth = true; }
            if (isNum === void 0) { isNum = false; }
            if (formats.atrrs) {
                formats.dataType = formats.dataType || formats.atrrs.dataType;
                formats.displayFormat = formats.displayFormat || formats.atrrs.displayFormat;
                formats.trueExpr = formats.trueExpr || formats.atrrs.trueExpr;
                formats.displayWidth = formats.displayWidth || formats.atrrs.displayWidth;
            }
            var formatStr = '', formatsSetting = {
                trueExpr: '1',
                displayWidth: 0
            }, f = Object.assign(formatsSetting, formats), dataType = f.dataType, displayFormat = f.displayFormat, trueExpr = f.trueExpr ? f.trueExpr : 1;
            if (G.tools.isEmpty(text)) {
                return formatStr;
            }
            // 如果是数字类型，但值却不是数字，则不处理直接显示
            if (Rule.isNumber(dataType) && typeof text !== 'number' && !isNum) {
                formatStr = text;
            }
            else {
                switch (dataType) {
                    case Rule.DT_NUMBER:
                        // 数值
                        formatStr = Rule.parseNumber(text, displayFormat);
                        break;
                    case Rule.DT_MONEY:
                        //￥#,### 货币代码 + 数值格式
                        formatStr = '¥' + Rule.parseNumber(text, displayFormat.slice(1));
                        break;
                    case Rule.DT_DATETIME:
                    case Rule.DT_TIME:
                        //YYYY-MM-DD HH24:MI:SS 日期
                        //HH24:MI:SS 时间
                        formatStr = Rule.strDateFormat(text, displayFormat);
                        break;
                    case Rule.DT_PERCENT:
                        //百分比
                        formatStr = Rule.parseNumber(text * 100, displayFormat.slice(0, -1)) + '%';
                        break;
                    case Rule.DT_BOOL:
                        //布尔
                        // 临时 双等号, 目前不清楚是否可以确定类型
                        formatStr = (text == trueExpr) ? '是' : '否';
                        break;
                    case Rule.DT_MULTI_TEXT:
                        formatStr = "<pre>" + text + "</pre>";
                        break;
                    case Rule.DT_HTML:
                    default:
                        formatStr = text.toString();
                }
            }
            if (isWidth && f.displayWidth > 0) {
                formatStr = G.tools.str.cut(formatStr, f.displayWidth);
            }
            return formatStr;
        };
        ;
        /**
         * 表格数据展示
         * @param {string | number} text
         * @param {object} formats
         * @param {string} formats.dataType
         * @param {string} [formats.displayFormat]
         * @param {string} [formats.trueExpr = 1]
         * @param {int} [formats.displayWidth = 0]
         * @return {string} - 返回处理后的文字，与文字的位置(左右对齐)
         */
        Rule.formatTableText = function (text, formats) {
            var t = Rule.formatText(text, formats, false);
            if (formats.atrrs) {
                formats.dataType = formats.dataType || formats.atrrs.dataType;
            }
            switch (formats.dataType) {
                case Rule.DT_HTML:
                case Rule.DT_MULTI_TEXT:
                    t = G.tools.str.removeEmpty(G.tools.str.removeHtmlTags(text));
                    break;
                case Rule.DT_FILE:
                    if (!G.tools.isEmpty(t)) {
                        t = '<span title="' + t + '" class="ti-clip"></span> ' + t;
                    }
                    break;
            }
            return t;
        };
        ;
        Rule.dateFormat = function (date, fmt) {
            var o = {
                "M+": date.getMonth() + 1,
                "d+": date.getDate(),
                "H+": date.getHours(),
                "m+": date.getMinutes(),
                "s+": date.getSeconds(),
                "S": date.getMilliseconds() //毫秒
            };
            if (/(y+)/.test(fmt))
                fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
            for (var k in o)
                if (new RegExp("(" + k + ")").test(fmt))
                    fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
            return fmt;
        };
        Rule.strDateFormat = function (dateStr, fmt) {
            var date = new Date(dateStr);
            if (!isNaN(date.getTime()) && fmt) {
                return Rule.dateFormat(date, fmt);
            }
            return dateStr;
        };
        Rule.reqAddr = function (reqAddr, dataObj) {
            // console.log(reqAddr, dataObj);
            var _a = this.reqAddrFull(reqAddr, dataObj), addr = _a.addr, data = _a.data;
            // console.log(addr,111111111 ,data);
            return G.tools.url.addObj(addr, data);
        };
        Rule.reqAddrFull = function (reqAddr, data) {
            if (!this.reqAddrCommit[reqAddr.commitType]) {
                reqAddr.commitType = 1;
            }
            return this.reqAddrCommit[reqAddr.commitType](reqAddr, data);
        };
        /**
         * 解析varList数据
         * @param {Array} varList - 服务端的varList
         * @param {String} varList.varName
         * @param {String} varList.varValue
         * @param {Object} data - 需要填充varList的数据, 一般是数据查询的数据
         * @param {boolean} [isLowerKey] 键值是否转为小写
         * @returns {object}
         */
        Rule.varList = function (varList, data, isLowerKey, isLimitField) {
            if (varList === void 0) { varList = []; }
            if (isLowerKey === void 0) { isLowerKey = false; }
            if (isLimitField === void 0) { isLimitField = true; }
            if (typeof data === 'undefined') {
                return {};
            }
            var isMulti = Array.isArray(data);
            isMulti || (data = [data]);
            varList = Array.isArray(varList) ? varList : [];
            var varData = data.map(function (d) {
                var tmpData = {};
                if (isLimitField) {
                    varList.forEach(function (v) {
                        var value = null, varName = v.varName;
                        if (d[varName] !== null && d[varName] !== undefined) {
                            //优先从用户给的data取值
                            value = d[varName];
                        }
                        else if (!G.tools.isEmpty(v.varValue)) {
                            //再从服务器给的value
                            value = v.varValue;
                        }
                        // if (value !== null) {
                        var key = isLowerKey ? varName.toLowerCase() : varName;
                        tmpData[key] = value;
                        // }
                    });
                }
                else {
                    for (var field in d) {
                        tmpData[field] = d[field];
                    }
                }
                return tmpData;
            });
            if (isMulti) {
                varData = varData.filter(function (data) { return !G.tools.isEmpty(data); });
                if (G.tools.isEmpty(varData)) {
                    varData = null;
                }
            }
            return isMulti ? varData : varData[0];
        };
        Rule.DT_NUMBER = '10'; //数值
        Rule.DT_MONEY = '11'; // ￥#,### 货币代码 + 数值格式
        Rule.DT_DATETIME = '12'; // YYYY-MM-DD HH24:MI:SS 日期
        Rule.DT_TIME = '13'; // HH24:MI:SS 时间
        Rule.DT_PERCENT = '14'; // 百分比
        Rule.DT_BOOL = '17'; // 布尔
        Rule.DT_IMAGE = '20'; // 图片
        Rule.DT_MUL_IMAGE = '22'; // 多图
        Rule.DT_HTML = '30'; // 超文本
        Rule.DT_MULTI_TEXT = '31'; // 显示时保留空格与换行的文本
        Rule.DT_FILE = '43'; // 文件
        /**
         * 生成fieldList中的数据显示的格式
         */
        Rule.parseNumberReg = /(\.)(\d*[1-9]+)?(0+)$/;
        Rule.reqAddrCommit = {
            1: function (reqAddr, data) {
                var varData = Rule.varList(reqAddr.varList, data, true), urlPara = {};
                if (reqAddr.varType === 2) {
                    if (!Array.isArray(varData)) {
                        varData = [varData];
                    }
                    varData.forEach(function (d) {
                        for (var key in d) {
                            if (!urlPara[key]) {
                                urlPara[key] = [];
                            }
                            urlPara[key].push(d[key]);
                        }
                    });
                    if (!G.tools.isEmpty(reqAddr.varList) && !reqAddr.varList[1]) {
                        //长度等于1
                        var varName = reqAddr.varList[0].varName.toLowerCase();
                        urlPara['selection'] = urlPara[varName];
                        delete urlPara[varName];
                    }
                    for (var key in urlPara) {
                        var para = urlPara[key];
                        if (Array.isArray(para)) {
                            urlPara[key.toLocaleLowerCase()] = para.join(',');
                        }
                    }
                }
                return {
                    addr: reqAddr.dataAddr,
                    data: reqAddr.varType === 2 ? urlPara : varData
                };
            },
        };
        return Rule;
    }());
    G.Rule = Rule;
})(G || (G = {}));

var G;
(function (G) {
    // export let localUser = (function () {
    //     let u = window.localStorage.getItem('local_uuid_info');
    //     let uu = window.localStorage.getItem('local_user_info');
    //     let autoFillInput = window.localStorage.getItem('local_autoFillInput');
    //     try{
    //         u = u ? JSON.parse(u) : {};
    //         uu = uu ? JSON.parse(uu) : {};
    //     }catch(e){
    //     }
    //     return {
    //         /**
    //          * 获取用户资料
    //          * @param {string }[field]
    //          * @return {*}
    //          */
    //         getUser: function (field) {
    //             return typeof field === 'undefined' ? u : u[field.toUpperCase()];
    //         },
    //         setUser: function (user) {
    //             u = user;
    //             window.localStorage.setItem('local_uuid_info', JSON.stringify(user));
    //         },
    //         getUUser: function (field?) {
    //             return typeof field === 'undefined' ? uu : uu[field.toUpperCase()];
    //         },
    //         setUUser: function (user) {
    //             uu = user;
    //             window.localStorage.setItem('local_user_info', JSON.stringify(user));
    //         },
    //         isSavePassword: autoFillInput,
    //         setSavePassword: function (state) {
    //             if (state) {
    //                 window.localStorage.setItem('local_autoFillInput', '1');
    //             } else {
    //                 window.localStorage.removeItem('local_autoFillInput');
    //             }
    //         },
    //
    //         /**
    //          *
    //          * @param type 1指纹登录 0 密码登录
    //          */
    //         setLoginMethod: function (type) {
    //             window.localStorage.setItem('TouchIdLogin', type);
    //         },
    //         getCurrentUserId: function () {
    //             return this.getUser('userid');
    //         }
    //     }
    // })();
    G.localMsg = (function () {
        var _storage = window.localStorage;
        var _get = function () {
            var s = _storage.getItem('local_msg');
            return s ? JSON.parse(s) : [];
        };
        var _save = function (array) {
            if (!Array.isArray(array)) {
                array = [];
            }
            _storage.setItem('local_msg', JSON.stringify(array));
        };
        var _add = function (arr) {
            //     console.log(_get(), arr);
            //  alert(JSON.stringify(arr) + '11');
            _save(arr.concat(_get()));
        };
        var _read = function (notifyId) {
            var t = _get();
            var l = t.length;
            for (var i = 0; i < l; i++) {
                if (t[i].notifyId === notifyId) {
                    //    console.log(t[i]);
                    t[i].isread = 1;
                    break;
                }
            }
            _save(t);
        };
        var _remove = function (notifyId) {
            var t = _get();
            var l = t.length;
            for (var i = 0; i < l; i++) {
                if (t[i].notifyId === notifyId) {
                    t.splice(i, 1);
                    break;
                }
            }
            _save(t);
        };
        var _getUnreadCount = function () {
            var count = 0;
            _get().forEach(function (m) {
                if (m.isread === 0) {
                    count++;
                }
            });
            return count;
        };
        return {
            remove: _remove,
            get: _get,
            add: _add,
            read: _read,
            getUnreadCount: _getUnreadCount
        };
    }());
    // export class IDB{
    //
    //     private dbName = 'BW';
    //     private request: IDBOpenDBRequest = null;
    //
    //     private static open() {
    //
    //     }
    //
    //
    // }
})(G || (G = {}));

var G;
(function (G) {
    G.requireBaseUrl = '';
    function setRequire(config, urlArg) {
        if (typeof config.bundles === 'object') {
            for (var key in config.bundles) {
                config.bundles[config.baseUrl + key] = config.bundles[key];
                delete config.bundles[key];
            }
        }
        G.requireBaseUrl = config.baseUrl;
        require.config({
            baseUrl: config.baseUrl,
            paths: Object.assign({
                tableExport: ['../plugin/tableExport.min'],
                JsBarcode: ['../plugin/qrcode/JsBarcode.all.min'],
                QRCode: ['../plugin/qrcode/qrcode.min'],
                echarts: ['../plugin/echarts/echarts.min'],
                BMap: ['http://api.map.baidu.com/api?v=3.0&ak=yiZoX1KkdlpwcGmfSt276NN5gkniefGc'],
                async: ['../plugin/requirejs/async'],
                photoSwipe: ['../plugin/photoswipe/photoswipe.min'],
                photoSwipeUi: ['../plugin/photoswipe/photoswipe-ui-default.min'],
                webUpLoader: ['../plugin/webupload/webuploader'],
                md5: ['../plugin/webupload/md5'],
                tagsInput: ['../plugin/bootstrap/bootstrap-tagsinput/bootstrap-tagsinput'],
                froalaEditor: ['../plugin/js/froala_editor.min'],
                summernote: ['../plugin/bootstrap/summernote/summernote'],
                reconnectingWebscoket: ['../plugin/reconnecting-websocket-1.0.1'],
                flatpickr: ['../plugin/flatpickr/flatpickr.min.1'],
                AceEditor: ['../plugin/aceEditor/ace'],
                raphael: ['../plugin/raphael/raphael.min'],
                D3: ['../plugin/d3/d3.v4.min'],
            }, config.paths),
            bundles: Object.assign({
            // 'utils' : ['Validate','Draw','BarCode','QrCode','Statistic','Echart','DrawSvg']
            }, config.bundles),
            shim: {
                BMap: {
                    exports: 'BMap',
                },
                AceEditor: {
                    exports: 'AceEditor'
                },
                JsBarcode: {
                    exports: 'JsBarcode'
                },
                QRCode: {
                    exports: 'QRCode'
                },
                echarts: {
                    exports: 'echarts'
                },
                webUpLoader: {
                    exports: 'webUpLoader'
                },
                tagsInput: {
                    exports: 'tagsInput'
                },
                md5: {
                    exports: 'md5'
                },
            },
            map: {
                '*': {
                    'css': 'require.css'
                }
            }
        });
    }
    G.setRequire = setRequire;
})(G || (G = {}));

/**
 * 本文件用于gulp打包时引用，防止找不到变量G
 */
/// <reference path="polyfill.ts"/>
/// <reference path="rule.ts"/>
/// <reference path="storage.ts"/>
/// <reference path="tools.ts"/>
/// <reference path="dom.ts"/>
/// <reference path="ajax.ts"/>
/// <reference path="components/Component.ts"/>
/// <reference path="requireConfig.ts"/>
/// <reference path="spa.ts"/>
/// <reference path="shell.ts"/>

///<amd-module name="NewIDB"/>
define("NewIDB", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var NewIDB = /** @class */ (function () {
        function NewIDB(para) {
            /*
            * 获取操作objectStore的对象
            * */
            this.collectors = {};
            this.promise = new Promise(function (resolve, reject) {
                var request = indexedDB.open(para.name, para.version || 1);
                request.onsuccess = function (e) {
                    console.log(e);
                    var db = e.target.result;
                    resolve(db);
                };
                request.onerror = function (e) {
                    reject(e); //('打开indexDB失败');
                };
                /*
                * 版本升级调用onupgradeneeded
                */
                request.onupgradeneeded = function (e) {
                    console.log(e);
                    var db = e.target.result;
                    NewIDB.initStore(db, para.tableConf || {});
                };
            });
        }
        NewIDB.prototype.getCollection = function (name) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                _this.promise.then(function (db) {
                    resolve(_this._getCollection(db, name));
                }).catch(function (e) {
                    console.log(e);
                    reject(e);
                });
            });
        };
        NewIDB.prototype._getCollection = function (db, storeName) {
            if (G.tools.isEmpty(this.collectors[storeName])) {
                if (db.objectStoreNames.contains(storeName)) {
                    this.collectors[storeName] = new IDBCollection(db, storeName);
                }
            }
            if (!G.tools.isEmpty(this.collectors[storeName])) {
                return this.collectors[storeName];
            }
            else {
                return null;
            }
        };
        /*
        * 关闭数据库
        * */
        NewIDB.prototype.destroy = function () {
            this.promise.then(function (db) {
                db.close();
            });
        };
        NewIDB.initStore = function (db, tableConf) {
            for (var attr in tableConf) {
                if (!db.objectStoreNames.contains(attr)) {
                    var store = db.createObjectStore(attr, {
                        keyPath: tableConf[attr][0]
                    });
                    for (var i = 1, len = tableConf[attr].length; i < len; i++) {
                        store.createIndex(tableConf[attr][i], tableConf[attr][i], { unique: false });
                    }
                }
            }
        };
        return NewIDB;
    }());
    exports.NewIDB = NewIDB;
    var IDBCollection = /** @class */ (function () {
        function IDBCollection(db, storeName) {
            this.db = db;
            this.storeName = storeName;
        }
        /*
        * 添加数据，主键相同不覆盖
        * data => 插入的数据
        * */
        IDBCollection.prototype.insert = function (data) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var store = _this.db.transaction(_this.storeName, 'readwrite').objectStore(_this.storeName);
                var request = store.add(data);
                request.onsuccess = function (e) {
                    resolve(e);
                };
                request.onerror = function (err) {
                    reject(err);
                };
            });
        };
        /*
        * 删除数据(删除一个)
        * filter => 根据filter规则删除指定数据，filter接收一个参数，即遍历的数据
        * */
        IDBCollection.prototype.delete = function (filter) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var store = _this.db.transaction(_this.storeName, 'readwrite').objectStore(_this.storeName);
                var request = store.getAll();
                request.onsuccess = function () {
                    var data = request.result;
                    var result;
                    for (var i = 0, len = data.length; i < len; i++) {
                        if (filter(data[i])) {
                            result = data[i];
                            break;
                        }
                    }
                    var del = store.delete(result);
                    G.d.on(del, 'success', function () {
                        resolve();
                    });
                };
                request.onerror = function (err) {
                    reject(err);
                };
            });
        };
        /*
        * 更新数据(更新一个)
        * filter => 根据filter规则更新指定数据，filter接收一个参数，即遍历的数据
        * newDataGet => 指定要更新的数据，newDataGet接收一个参数，即遍历的数据
        * */
        IDBCollection.prototype.update = function (filter, newDataGet) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var store = _this.db.transaction(_this.storeName, 'readwrite').objectStore(_this.storeName);
                var request = store.getAll();
                request.onsuccess = function (e) {
                    var data = e.target.result;
                    var result;
                    for (var i = 0, len = data.length; i < len; i++) {
                        if (filter(data[i])) {
                            result = newDataGet(data[i]);
                            break;
                        }
                    }
                    if (typeof result !== 'undefined') {
                        // let update = request.transaction(self.storeName, 'readwrite').objectStore(self.storeName).put(result);
                        var update = store.put(result);
                        G.d.on(update, 'success', function () {
                            resolve(result);
                        });
                    }
                    else {
                        reject(result);
                    }
                };
                request.onerror = function (e) {
                    reject(e);
                };
            });
        };
        /*
        * 查询数据
        * filter => 根据filter规则查询指定数据，filter接收一个参数，即遍历的数据
        * */
        IDBCollection.prototype.find = function (filter) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var store = _this.db.transaction(_this.storeName, 'readwrite').objectStore(_this.storeName);
                var request = store.getAll();
                request.onsuccess = function () {
                    var data = request.result;
                    console.log(data);
                    var result = [];
                    for (var i = 0, len = data.length; i < len; i++) {
                        if (filter(data[i])) {
                            result.push(data[i]);
                        }
                    }
                    resolve(result);
                };
                request.onerror = function (e) {
                    reject(e);
                };
            });
        };
        /*
        * 获取所有数据
        * */
        IDBCollection.prototype.findAll = function () {
            return this.find(function () { return true; });
        };
        return IDBCollection;
    }());
});

///<amd-module name="IDB"/>
define("IDB", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var IDB = /** @class */ (function () {
        function IDB(name, version, tableConf) {
            var _this = this;
            this.tableConf = tableConf;
            this.db = null;
            this.collectors = {};
            /**
             *
             * @param {string} eventName
             * @param {Function} callback
             */
            // on(eventName: string, callback:Function){
            //
            // }
            /*
            * 定义打开indexedDB 成功后的事件
            * */
            this._success = function () {
            };
            /*
            * 打开数据库
            * */
            this.dbName = name;
            var request = indexedDB.open(name, version);
            /*
            * 打开成功调用onupgradeneeded
            * */
            this.promise = new Promise(function (resolve, reject) {
                request.onsuccess = function (e) {
                    _this.db = e.target.result;
                    _this._success(e);
                    resolve(e);
                };
                request.onerror = function (e) {
                    reject(e);
                    return null; //('打开indexDB失败');
                };
            });
            /*
            * 版本升级调用onupgradeneeded
            */
            request.onupgradeneeded = function (e) {
                _this.db = e.target.result;
                _this.constructChange(tableConf);
            };
            /*
            * 上一个数据库未关闭，重新打开新版本数据库
            * */
            request.onblocked = function () {
                return null;
            };
        }
        IDB.prototype.then = function (success) {
            var _this = this;
            this.promise.then(function (e) {
                for (var name_1 in _this.tableConf) {
                    var store = _this.collection(name_1);
                    typeof success === 'function' && success(store);
                }
            });
        };
        IDB.prototype.catch = function (error) {
            this.promise.catch(error);
        };
        /*
         * 数据库结构定义
         *
         * 根据construct配置创建数据仓库ObjectStore
         * construct => {[ 'keyPath', 'index', 'index'...]}
         * */
        IDB.prototype.constructChange = function (tableConf) {
            for (var attr in tableConf) {
                if (!this.db.objectStoreNames.contains(attr)) {
                    var store = this.db.createObjectStore(attr, {
                        keyPath: tableConf[attr][0]
                    });
                    for (var i = 1, len = tableConf[attr].length; i < len; i++) {
                        store.createIndex(tableConf[attr][i], tableConf[attr][i], { unique: false });
                    }
                }
            }
        };
        /*
        * 获取操作objectStore的对象
        * */
        IDB.prototype.collection = function (storeName) {
            if (tools.isEmpty(this.collectors[storeName])) {
                if (this.db.objectStoreNames.contains(storeName)) {
                    this.collectors[storeName] = new IDBCollection(this.db, storeName);
                }
            }
            if (!tools.isEmpty(this.collectors[storeName])) {
                return this.collectors[storeName];
            }
            else {
                return null;
            }
            // if(this.db.objectStoreNames.contains(storeName)) {
            //     this.collectors[storeName] = new IDBCollection(this.db, storeName);
            //     return this.collectors[storeName];
            // }else{
            //    return null;//('没有创建'+ storeName + '数据仓库');
            // }
        };
        Object.defineProperty(IDB.prototype, "success", {
            set: function (cb) {
                this._success = cb;
            },
            enumerable: true,
            configurable: true
        });
        IDB.prototype.deleteDatabase = function () {
            this.db.close();
            window.indexedDB.deleteDatabase(this.dbName);
        };
        /*
        * 关闭数据库
        * */
        IDB.prototype.destroy = function () {
            this.db.close();
        };
        return IDB;
    }());
    exports.IDB = IDB;
    var IDBCollection = /** @class */ (function () {
        function IDBCollection(db, storeName) {
            this.db = db;
            this.storeName = storeName;
            this.store = db.transaction(storeName, 'readwrite').objectStore(storeName);
        }
        /*
        * 添加数据，主键相同不覆盖
        * data => 插入的数据
        * callback => 回调函数
        * */
        IDBCollection.prototype.insert = function (data, callback) {
            var request = this.store.add(data);
            request.onsuccess = function (e) {
                typeof callback === 'function' && callback(e);
            };
            request.onerror = function (ev) {
                console.log(ev);
            };
        };
        /*
        * 删除数据(删除一个)
        * filter => 根据filter规则删除指定数据，filter接收一个参数，即遍历的数据
        * callback => 回调函数
        * */
        IDBCollection.prototype.delete = function (filter, callback) {
            // this.direction = this.toggleDirection();
            // let request: IDBRequest = this.store.openCursor(null, this.direction), self = this;
            // request.onsuccess = (e:Event) => {
            //     let cursor: IDBCursorWithValue = (<IDBRequest>e.target).result;
            //     if( !tools.isEmpty(cursor) ){
            //         let value = cursor.value;
            //         if( filter(value) ){
            //             let updateRequest: IDBRequest = cursor.delete();
            //             updateRequest.onsuccess = () => {
            //                 typeof callback === 'function' && callback();
            //             }
            //         }else{
            //             cursor.continue();
            //         }
            //     }
            // }
            var request = this.store.getAll(), self = this;
            request.onsuccess = function (e) {
                var data = request.result;
                var result;
                for (var i = 0, len = data.length; i < len; i++) {
                    if (filter(data[i])) {
                        result = data[i];
                        break;
                    }
                }
                var update = self.store.delete(result);
                update.onsuccess = function () {
                    typeof callback === 'function' && callback();
                };
            };
        };
        /*
        * 更新数据(更新一个)
        * filter => 根据filter规则更新指定数据，filter接收一个参数，即遍历的数据
        * newDataGet => 指定要更新的数据，newDataGet接收一个参数，即遍历的数据
        * callback => 回调函数
        * */
        IDBCollection.prototype.update = function (filter, newDataGet, success, error) {
            // this.direction = this.toggleDirection();
            // let request: IDBRequest = this.store.openCursor(null, this.direction), self = this;
            // request.onsuccess = (e:Event) => {
            //     let cursor: IDBCursorWithValue = (<IDBRequest>e.target).result;
            //     if( cursor ){
            //         let value = cursor.value;
            //         if( filter(value) ){
            //             let updateRequest: IDBRequest = cursor.update( newDataGet(value) );
            //             updateRequest.onsuccess = (e) => {
            //                 typeof callback === 'function' && callback( newDataGet(value) );
            //             };
            //             updateRequest.onerror = (e) => {
            //                 alert('error')
            //             };
            //             return null;
            //         }else{
            //             cursor.continue();
            //         }
            //     }
            // }
            var request = this.store.getAll(), self = this;
            request.onsuccess = function (e) {
                var data = e.target.result;
                var result;
                for (var i = 0, len = data.length; i < len; i++) {
                    if (filter(data[i])) {
                        result = newDataGet(data[i]);
                        break;
                    }
                }
                if (typeof result !== 'undefined') {
                    // let update = request.transaction(self.storeName, 'readwrite').objectStore(self.storeName).put(result);
                    var update = self.store.put(result);
                    update.onsuccess = function (e) {
                        typeof success === 'function' && success(result);
                    };
                }
                else {
                    typeof error === 'function' && error(result);
                }
            };
            request.onerror = function () {
            };
        };
        /*
        * 查询数据
        * filter => 根据filter规则查询指定数据，filter接收一个参数，即遍历的数据
        * callback => 回调函数，callback接收一个参数data，即获取到的数据，没有为 []
        * */
        IDBCollection.prototype.find = function (filter, callback) {
            var request = this.store.getAll(), self = this;
            request.onsuccess = function (e) {
                var data = request.result;
                var result = [];
                for (var i = 0, len = data.length; i < len; i++) {
                    if (filter(data[i])) {
                        result.push(data[i]);
                    }
                }
                typeof callback === 'function' && callback(result);
            };
        };
        /*
        * 获取所有数据
        * callback => 回调函数，callback接收一个参数data，即获取到的数据，没有为 []
        * */
        IDBCollection.prototype.findAll = function (callback) {
            this.find(function () { return true; }, callback);
        };
        IDBCollection.prototype.on = function (eventName, callback) {
        };
        return IDBCollection;
    }());
});

/// <amd-module name="StorageManager"/>
// import tools = G.tools;
//
// /**
//  * Created by zhengchao on 2017/10/3.
//  * 客户端Storage增删改查管理
//  */
// export class StorageManager{
//
//     /**
//      * 新增一条数据，生成id主键
//      */
//     add(obj:obj):number{
//         if(tools.isEmpty(obj)){
//             return 0;
//         }
//         let list = this.list();
//         list.unshift(obj);
//         sys.storage.set(this.storage,list)
//         return 1;
//     }
//
//     /**
//      * 根据id修改一条数据
//      */
//     update(obj:obj):number{
//         if(tools.isEmpty(obj) || tools.isEmpty(obj.id)){
//             return 0;
//         }
//         let list = this.list();
//         let listObj = list.filter((o)=>{
//             return o.id===obj.id;
//         })
//         let i = list.indexOf(listObj[0]);
//         if(i>-1){
//             list.splice(i,1,obj);
//             sys.storage.set(this.storage,list);
//             return 1;
//         }else
//             return 0;
//     }
//
//     /**
//      * 根据id主键，存在做修改，不存在做新增
//      */
//     save(obj:obj):number{
//         if(tools.isEmpty(obj)){
//             return 0;
//         }
//         let list = this.list();
//         let listObj = list.filter((o)=>{
//             return o.id===obj.id;
//         })
//         let i = list.indexOf(listObj[0]);
//         if(i>-1){
//             list.splice(i,1,obj);
//         }else
//             list.unshift(obj);
//         sys.storage.set(this.storage,list);
//         return 1;
//     }
//
//     /**
//      * 根据id主键删除一条数据
//      */
//     del(id:string):number{
//         let list = this.list();
//         let obj = list.filter((o)=>{
//             return o.id===id;
//         })
//         let i = list.indexOf(obj[0]);
//         if(i>-1){
//             list.splice(i,1);
//             sys.storage.set(this.storage,list);
//             return 1;
//         }else
//             return 0;
//     }
//
//     /**
//      * 删除所有数据
//      */
//     remove(){
//         sys.storage.del(this.storage);
//     }
//
//     /**
//      * 根据id主键获取单条数据
//      */
//     get(id:string){
//         let list = this.list();
//         let obj = list.filter((o)=>{
//             return o.id===id;
//         })
//         return obj[0];
//     }
//
//     /**
//      * 获取所有集合
//      */
//     list():Array<obj>{
//         let list = <string>sys.storage.get(this.storage);
//         if(tools.isEmpty(list))
//             list = '[]';
//         return JSON.parse(list);
//     }
//
//     /**
//      * 获取总记录数
//      */
//     num():number{
//         let list = this.list();
//         return list.length;
//     }
//
//     private storage;
//
//     constructor(storage:string) {
//         this.storage = storage;
//     }
// }

/// <amd-module name="WebsqlManager"/>
// import tools = G.tools;
//
// /**
//  * Created by zhengchao on 2017/11/3.
//  * 客户端Websql增删改查管理
//  */
// export class WebsqlManager{
//
//     /**
//      * 新增一条数据，生成id主键
//      */
//     add(obj:obj):number{
//         if(tools.isEmpty(obj)){
//             return 0;
//         }
//         let list = this.list();
//         list.unshift(obj);
//         sys.storage.set(this.storage,list)
//         return 1;
//     }
//
//     /**
//      * 根据id修改一条数据
//      */
//     update(obj:obj):number{
//         if(tools.isEmpty(obj) || tools.isEmpty(obj.id)){
//             return 0;
//         }
//         let list = this.list();
//         let listObj = list.filter((o)=>{
//             return o.id===obj.id;
//         });
//         let i = list.indexOf(listObj[0]);
//         if(i>-1){
//             list.splice(i,1,obj);
//             sys.storage.set(this.storage,list);
//             return 1;
//         }else
//             return 0;
//     }
//
//     /**
//      * 根据id主键，存在做修改，不存在做新增
//      */
//     save(obj:obj):number{
//         if(tools.isEmpty(obj)){
//             return 0;
//         }
//         let list = this.list();
//         let listObj = list.filter((o)=>{
//             return o.id===obj.id;
//         })
//         let i = list.indexOf(listObj[0]);
//         if(i>-1){
//             list.splice(i,1,obj);
//         }else
//             list.unshift(obj);
//         sys.storage.set(this.storage,list);
//         return 1;
//     }
//
//     /**
//      * 根据id主键删除一条数据
//      */
//     del(id:string):number{
//         let list = this.list();
//         let obj = list.filter((o)=>{
//             return o.id===id;
//         })
//         let i = list.indexOf(obj[0]);
//         if(i>-1){
//             list.splice(i,1);
//             sys.storage.set(this.storage,list);
//             return 1;
//         }else
//             return 0;
//     }
//
//     /**
//      * 删除所有数据
//      */
//     remove(){
//         sys.storage.del(this.storage);
//     }
//
//     /**
//      * 根据id主键获取单条数据
//      */
//     get(id:string){
//         let list = this.list();
//         let obj = list.filter((o)=>{
//             return o.id===id;
//         })
//         return obj[0];
//     }
//
//     /**
//      * 获取所有集合
//      */
//     list():Array<obj>{
//         let list = <string>sys.storage.get(this.storage);
//         if(tools.isEmpty(list))
//             list = '[]';
//         return JSON.parse(list);
//     }
//
//     /**
//      * 获取总记录数
//      */
//     num():number{
//         let list = this.list();
//         return list.length;
//     }
//
//     private storage;
//
//     constructor(storage:string) {
//         this.storage = storage;
//     }
// }

///<amd-module name="FingerPrint"/>
define("FingerPrint", ["require", "exports", "IDB", "Modal", "InputBox", "Button"], function (require, exports, IDB_1, Modal_1, InputBox_1, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Shell = G.Shell;
    var d = G.d;
    var tools = G.tools;
    var FingerPrint = /** @class */ (function () {
        function FingerPrint(para) {
            this.db = null;
            this.promise = null;
            if ('AppShell' in window) {
                this.init(para);
            }
        }
        FingerPrint.prototype.init = function (para) {
            var _this = this;
            var _a;
            var IDBName = 'fingerDB', IDBVersion = tools.isEmpty(para.DBConf.version) ? 1 : para.DBConf.version, IDBConstruct = (_a = {}, _a[para.DBConf.storeName] = ['userid', 'prints'], _a);
            this.db = new IDB_1.IDB(IDBName, IDBVersion, IDBConstruct);
            Shell.finger.get({
                type: 0,
                option: 1
            }, function (ev) {
                var data = ev.data;
                _this.matchedFinger(data);
            }, function (ev) {
                typeof para.callFingerMsg === 'function' && para.callFingerMsg(ev.data.text);
            });
        };
        FingerPrint.prototype.matchedFinger = function (data) {
            var _this = this;
            var type = data.fingerType, print = data.finger;
            this.db && this.db.then(function (store) {
                store.find(function (val) {
                    // Modal.alert(val.prints['type' + type])
                    if (typeof val.prints['type' + type] === "undefined") {
                        return false;
                    }
                    var data = Shell.finger.verify(print, val.prints['type' + type][0], type);
                    return data.data.matched;
                }, function (response) {
                    Modal_1.Modal.alert(response);
                    _this.promise = new Promise(function (resolve, reject) {
                        if (tools.isEmpty(response)) {
                            _this.getUserid(tools.obj.merge(data, { verify: '1' }), resolve, reject);
                        }
                        else {
                            var fingers = {
                                userid: response[0].userid,
                                type: type,
                                print: print,
                                verify: '0',
                            };
                            resolve(fingers);
                        }
                    });
                });
            });
        };
        FingerPrint.prototype.then = function (callback) {
            var _this = this;
            this.promise && this.promise.then(function (e) {
                return new Promise(function (resolve, reject) {
                    typeof callback === 'function' && callback(e).then(function (data) {
                        _this.setFinger(data, resolve);
                    });
                });
            }, function () {
            });
        };
        FingerPrint.prototype.setFinger = function (data, callback) {
            if (data.verify === '1') {
                var type_1 = data.type, userid_1 = data.userid, print_1 = data.print;
                this.db.then(function (store) {
                    /*
                    * 查询数据仓库是否有存在userid,
                    * 有就更新，没有就添加
                    * */
                    store.update(function (result) {
                        return (result.userid === userid_1);
                    }, function (result) {
                        result.userid = userid_1;
                        if (typeof result.prints['type' + type_1] === 'undefined') {
                            result.prints['type' + type_1] = [];
                        }
                        result.prints['type' + type_1].unshift(print_1);
                        if (result.prints['type' + type_1].length > 1) {
                            result.prints['type' + type_1].pop();
                        }
                        return result;
                    }, function () {
                        typeof callback === 'function' && callback();
                    }, function () {
                        var data = {
                            userid: userid_1,
                            prints: {
                                "type0": [],
                                "type1": [],
                                "type2": [],
                            },
                        };
                        data.prints['type' + type_1].push(print_1);
                        store.insert(data, function () {
                            typeof callback === 'function' && callback();
                        });
                    });
                });
            }
        };
        FingerPrint.prototype.getUserid = function (data, callback, error) {
            var type = data.fingerType, print = data.finger, verify = data.verify, inputBox = new InputBox_1.InputBox({}), okBtn = new Button_1.Button({ content: '确定', type: 'primary', key: 'okBtn' });
            inputBox.addItem(okBtn);
            var submitUserId = function (fingerModal) {
                var userid = fingerModal.body.querySelector('input').value.toUpperCase();
                if (!tools.str.toEmpty(userid)) {
                    fingerModal.destroy();
                    Modal_1.Modal.toast('请重新录入指纹');
                    typeof error === 'function' && error();
                }
                else {
                    fingerModal.destroy();
                    var fingers = {
                        userid: userid,
                        type: type,
                        print: print,
                        verify: verify,
                    };
                    typeof callback === 'function' && callback(fingers);
                }
            };
            //创建模态框手动输入userID
            var fingerModal = new Modal_1.Modal({
                header: '登记本地指纹ID',
                isOnceDestroy: true,
                body: d.create("<div data-action=\"fingerModal\">\n                                        <form>\n                                            <label>\u8BF7\u8F93\u5165\u60A8\u7684\u5458\u5DE5\u53F7</label>\n                                            <input type=\"text\" >\n                                        </form>\n                                    </div>"),
                footer: {
                    rightPanel: inputBox
                },
                isBackground: false,
                onOk: function () {
                    submitUserId(fingerModal);
                },
                onClose: function () {
                    Modal_1.Modal.toast('请重新录入指纹');
                }
            });
            //自动获取焦点
            fingerModal.bodyWrapper.querySelector('input').focus();
            //表单提交触发onOK事件
            d.on(fingerModal.bodyWrapper.querySelector('form'), 'submit', function (ev) {
                ev.preventDefault();
                submitUserId(fingerModal);
            });
        };
        return FingerPrint;
    }());
    exports.FingerPrint = FingerPrint;
});

// /// <amd-module name="MessageAction"/>
// import tools = G.tools;
// import sys = G.sys;
// import {Message} from "../entity/Message";
// import {StorageManager} from "../core/StorageManager";
// /**
//  * 接收消息控制器
//  */
// export class MessageAction{
//
//     /**
//      * 保存消息
//      */
//     saveMessage(message:Message):number{
//         return this.storageManager.save(message.toString());
//     }
//
//     /**
//      * 删除消息
//      */
//     deleteMessage(id:string):number{
//         return this.storageManager.del(id);
//     }
//
//     /**
//      * 获取单条消息
//      */
//     getMessageInfo(id:string):Message{
//         let obj = this.storageManager.get(id);
//         let message = new Message(obj);
//         return message;
//     }
//
//     /**
//      * 获取消息列表
//      */
//     messagelist():Array<Message>{
//         return this.storageManager.list();
//     }
//
//     /**
//      * 获取未读消息数
//      */
//     getListNum():number{
//         return this.storageManager.num();
//     }
//
//     private storageManager;
//
//     constructor() {
//         this.storageManager = new StorageManager("messageList")
//     }
// }

define("ShellAction", ["require", "exports", "Device", "AndroidFactory", "PcFactory", "IosFactory", "H5Factory"], function (require, exports, Device_1, AndroidFactory_1, PcFactory_1, IosFactory_1, H5Factory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/5.
     * 硬件接口统一控制器
     */
    var ShellAction = /** @class */ (function () {
        function ShellAction() {
            var os = Device_1.Device.get().getOs();
            switch (os) {
                case 'pc':
                    return new PcFactory_1.PcFactory();
                case 'ad':
                    return new AndroidFactory_1.AndroidFactory();
                case 'ip':
                    return new IosFactory_1.IosFactory();
                default:
                    return new H5Factory_1.H5Factory();
            }
        }
        ShellAction.get = function () {
            if (!ShellAction.shellAction)
                ShellAction.shellAction = new ShellAction();
            return ShellAction.shellAction;
        };
        ShellAction.shellAction = null;
        return ShellAction;
    }());
    exports.ShellAction = ShellAction;
});

var G;
(function (G) {
    var Component = /** @class */ (function () {
        function Component(para) {
            if (para === void 0) { para = {}; }
            // c-var, c-body
            this.innerCom = {};
            this.innerEl = {};
            this._tabIndex = false;
            this.keyHandle = function (e) { };
            this._disabled = false;
            this._eventHandlers = {};
            // this._guid = tools.getGuid();
            this.data = para.data;
            this.custom = para.custom;
            this._wrapper = this.wrapperInit(para);
            this.cmdInit(para['__cmdInit']);
            delete para['__cmdInit'];
            this.container = para.container || document.body;
            this.className = para.className;
            this._tabIndexKey = para.tabIndexKey;
            this.tabIndex = para.tabIndex;
            this.disabled = para.disabled;
            // this.key = component.key;
        }
        // wrapperInit中的自定义指令处理
        Component.prototype.cmdInit = function (handler) {
            var TREE_KEY = G.__EL_DATA_INNER_KEY__.tree;
            G.tools.isFunction(handler) && handler(this);
            var queue = [this.wrapper];
            while (queue[0]) {
                var current = queue.shift();
                var data = G.elemData.get(current)[TREE_KEY] || {}, cmd = data.cmd, childs = data.childs;
                if (cmd) {
                    for (var key in cmd) {
                        var val = cmd[key];
                        switch (key) {
                            case 'var':
                                if (current instanceof Component) {
                                    this.innerCom[val] = current;
                                }
                                else if (current instanceof HTMLElement) {
                                    this.innerEl[val] = current;
                                }
                                break;
                            case 'body':
                                if (val) {
                                    this['_body'] = current;
                                }
                        }
                    }
                }
                if (Array.isArray(childs)) {
                    queue.push.apply(queue, childs);
                }
            }
        };
        Object.defineProperty(Component.prototype, "tabIndexKey", {
            get: function () {
                return this._tabIndexKey;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Object.defineProperty(Component.prototype, "tabIndex", {
            get: function () {
                return this._tabIndex;
            },
            set: function (tabIndex) {
                tabIndex = !!tabIndex;
                if (this._tabIndex === tabIndex) {
                    return;
                }
                this._tabIndex = tabIndex;
                if (tabIndex) {
                    this.wrapper.tabIndex = parseInt(G.tools.getGuid(''));
                    G.d.on(this.wrapper, 'keydown', this.keyHandle);
                }
                else {
                    G.d.off(this.wrapper, 'keydown', this.keyHandle);
                    this.wrapper.removeAttribute('tabIndex');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "isFocused", {
            get: function () {
                return this.wrapper === document.activeElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "wrapper", {
            get: function () {
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "className", {
            get: function () {
                return this._className;
            },
            set: function (str) {
                var old = this._className;
                if (str && this.wrapper && typeof str === 'string' && str !== old) {
                    if (typeof old === 'string') {
                        G.d.classRemove(this.wrapper, old);
                    }
                    G.d.classAdd(this.wrapper, str);
                    this._className = str;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (e) {
                if (this._disabled !== e) {
                    if (G.tools.isNotEmpty(e)) {
                        this._disabled = e;
                        if (this._disabled) {
                            this.wrapper.classList.add('disabled');
                        }
                        else {
                            this.wrapper.classList.remove('disabled');
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "container", {
            get: function () {
                return this._container;
            },
            set: function (container) {
                // 容器发生改变，组件的dom元素也转移到相应容器中
                var wrapper = this.wrapper;
                if (container && this._container !== container) {
                    if (wrapper && container !== wrapper) { // 特殊情况下, wrapper 和 container可以是同一个元素
                        G.d.append(container, wrapper);
                    }
                    this._container = container;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Component.prototype, "parent", {
            get: function () {
                var TREE_KEY = G.__EL_DATA_INNER_KEY__.tree;
                var currentData = G.elemData.get(this)[TREE_KEY] || {};
                return currentData.parent;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 移除组件
         */
        Component.prototype.remove = function () {
            G.d.remove(this._wrapper, false);
            this._container = null;
        };
        Component.prototype.destroy = function () {
            G.d.remove(this._wrapper);
            this._wrapper = null;
            this.data = null;
            this._container = null;
            this._className = null;
        };
        Object.defineProperty(Component.prototype, "eventHandlers", {
            get: function () {
                return this._eventHandlers;
            },
            enumerable: true,
            configurable: true
        });
        Component.prototype.on = function (name, handler) {
            if (!this._eventHandlers[name]) {
                this._eventHandlers[name] = [];
            }
            this._eventHandlers[name].push(handler);
        };
        Component.prototype.off = function (name, handler) {
            var _this = this;
            if (this._eventHandlers[name]) {
                if (typeof handler === 'function') {
                    this._eventHandlers[name].forEach(function (item, index) {
                        if (item === handler) {
                            _this._eventHandlers[name].splice(index, 1);
                        }
                    });
                }
                else {
                    delete this._eventHandlers[name];
                }
            }
        };
        Component.prototype.trigger = function (type) {
            var para = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                para[_i - 1] = arguments[_i];
            }
            var handlers = this._eventHandlers[type];
            handlers && handlers.forEach(function (item) {
                typeof item === 'function' && item(para);
            });
        };
        return Component;
    }());
    G.Component = Component;
})(G || (G = {}));


/// <amd-module name="ContainCom"/>
define("ContainCom", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var ContainCom = /** @class */ (function (_super) {
        __extends(ContainCom, _super);
        function ContainCom() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(ContainCom.prototype, "body", {
            get: function () {
                return this._body;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ContainCom.prototype, "childs", {
            get: function () {
                var TREE_KEY = G.__EL_DATA_INNER_KEY__.tree;
                var currentData = G.elemData.get(this)[TREE_KEY] || {}, childs = currentData.childs || [];
                return childs.slice();
            },
            enumerable: true,
            configurable: true
        });
        return ContainCom;
    }(Component));
    exports.ContainCom = ContainCom;
});

define("Device", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Device"/>
    var tools = G.tools;
    /**
     * Created by zhengchao on 2017/11/13.
     * 当前设备对象唯一实例
     */
    var Device = /** @class */ (function () {
        function Device() {
            this.isMb = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
            var device = JSON.parse(localStorage.getItem("deviceInfo"));
            if (tools.isEmpty(device))
                device = {};
            if (typeof device === 'string')
                device = JSON.parse(device);
            this.userid = device.userid;
            this.password = device.password;
            this.auth_code = device.auth_code;
            this.uuid = device.uuid;
            this.isSavePassword = device.isSavePassword;
        }
        Object.defineProperty(Device.prototype, "userid", {
            get: function () {
                return this._userid;
            },
            set: function (userid) {
                if (tools.isEmpty(userid))
                    this._userid = "";
                else
                    this._userid = userid;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Device.prototype, "password", {
            get: function () {
                return this._password;
            },
            set: function (password) {
                if (tools.isEmpty(password))
                    this._password = "";
                else
                    this._password = password;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Device.prototype, "auth_code", {
            get: function () {
                return this._auth_code;
            },
            set: function (auth_code) {
                if (tools.isEmpty(auth_code))
                    this._auth_code = "";
                else
                    this._auth_code = auth_code;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Device.prototype, "uuid", {
            get: function () {
                return this._uuid;
            },
            set: function (uuid) {
                if (tools.isEmpty(uuid))
                    this._uuid = "";
                else
                    this._uuid = uuid;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Device.prototype, "isSavePassword", {
            get: function () {
                return this._isSavePassword;
            },
            set: function (isSavePassword) {
                if (tools.isEmpty(isSavePassword))
                    this._isSavePassword = false;
                else
                    this._isSavePassword = isSavePassword;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Device.prototype.putStorage = function () {
            localStorage.setItem('deviceInfo', this.toString());
        };
        Device.prototype.getOs = function () {
            var userAgent = navigator.userAgent, os;
            if (!this.isMb)
                os = 'pc';
            else if (/OursAndroid/i.test(userAgent))
                os = 'ad';
            else if (/OursIOS/i.test(userAgent))
                os = 'ip';
            else if (/MicroMessenger/i.test(userAgent))
                os = 'wc';
            else
                os = 'h5';
            return os;
        };
        Device.prototype.toString = function () {
            return JSON.stringify({
                'userid': this.userid,
                'password': this.password,
                'auth_code': this.auth_code,
                'uuid': this.uuid,
                'isSavePassword': this.isSavePassword
            });
        };
        Device.prototype.test = function (i) {
            console.log("test.device." + i);
        };
        Device.get = function () {
            if (!Device.device)
                Device.device = new Device();
            return Device.device;
        };
        Device.device = null;
        return Device;
    }());
    exports.Device = Device;
});

define("Message", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Message"/>
    var tools = G.tools;
    /**
     * 接收到的消息对象
     */
    var Message = /** @class */ (function () {
        function Message(message) {
            if (tools.isEmpty(message)) {
                message = {};
            }
            this.id = message.id;
            this.sender = message.sender;
            this.title = message.title;
            this.content = message.content;
            this.link = message.link;
            this.num = message.num;
            this.time = message.time;
            this.isRead = message.isRead;
        }
        Object.defineProperty(Message.prototype, "id", {
            get: function () {
                return this._id;
            },
            set: function (id) {
                if (tools.isEmpty(id)) {
                    id = this.getGuid();
                }
                this._id = id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "sender", {
            get: function () {
                return this._sender;
            },
            set: function (sender) {
                if (tools.isEmpty(sender))
                    this._sender = "";
                else
                    this._sender = sender;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                if (tools.isEmpty(title))
                    this._title = "";
                else
                    this._title = title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (tools.isEmpty(content))
                    this._content = "";
                else
                    this._content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "link", {
            get: function () {
                return this._link;
            },
            set: function (link) {
                if (tools.isEmpty(link))
                    this._link = "";
                else
                    this._link = link;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "time", {
            get: function () {
                return this._time;
            },
            set: function (time) {
                if (tools.isEmpty(time))
                    this._time = "";
                else
                    this._time = time;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "isRead", {
            get: function () {
                return this._isRead;
            },
            set: function (isRead) {
                if (tools.isEmpty(isRead))
                    this._isRead = false;
                else
                    this._isRead = isRead;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Message.prototype, "num", {
            get: function () {
                return this._num;
            },
            set: function (num) {
                if (tools.isEmpty(num))
                    this._num = 0;
                else
                    this._num = num;
            },
            enumerable: true,
            configurable: true
        });
        Message.prototype.getGuid = function () {
            var guid = "";
            for (var i = 1; i <= 32; i++) {
                var n = Math.floor(Math.random() * 16.0).toString(16);
                guid += n;
                if ((i == 8) || (i == 12) || (i == 16) || (i == 20))
                    guid += "-";
            }
            return guid;
        };
        Message.prototype.toString = function () {
            return {
                'id': this.id,
                'sender': this.sender,
                'title': this.title,
                'content': this.content,
                'link': this.link,
                'num': this.num,
                'time': this.time,
                'isRead': this.isRead
            };
        };
        return Message;
    }());
    exports.Message = Message;
});

define("Param", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Param"/>
    var tools = G.tools;
    /**
     * 统一参数对象
     */
    var Param = /** @class */ (function () {
        function Param(param) {
            if (tools.isEmpty(param))
                param = {};
            if (typeof param === 'string')
                param = JSON.parse(param);
            this.type = param.type;
            this.data = param.data;
            this.msg = param.msg;
            this.callback = param.callback;
            this.is = param.is;
        }
        Object.defineProperty(Param.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                this._type = type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Param.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                if (tools.isEmpty(data))
                    this._data = {};
                else
                    this._data = data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Param.prototype, "contents", {
            get: function () {
                return this._contents;
            },
            set: function (contents) {
                this._contents = contents;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Param.prototype, "msg", {
            get: function () {
                return this._msg;
            },
            set: function (msg) {
                if (tools.isEmpty(msg))
                    this._msg = "";
                else
                    this._msg = msg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Param.prototype, "callback", {
            get: function () {
                return this._callback;
            },
            set: function (callback) {
                this._callback = callback;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Param.prototype, "is", {
            get: function () {
                return this._is;
            },
            set: function (is) {
                this._is = is;
            },
            enumerable: true,
            configurable: true
        });
        Param.prototype.toString = function () {
            return {
                'type': this.type,
                'data': this.data,
                'msg': this.msg,
                'callback': this.callback
            };
        };
        return Param;
    }());
    exports.Param = Param;
});

define("Result", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Result"/>
    var tools = G.tools;
    /**
     * 统一的返回值对象
     */
    var Result = /** @class */ (function () {
        function Result(result) {
            if (tools.isEmpty(result))
                result = {};
            if (typeof result === 'string')
                result = JSON.parse(result);
            this.code = result.code;
            this.data = result.data;
            this.msg = result.msg;
            this.success = result.success;
        }
        Object.defineProperty(Result.prototype, "code", {
            get: function () {
                return this._code;
            },
            set: function (code) {
                if (tools.isEmpty(code))
                    code = 0;
                this._code = code;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Result.prototype, "data", {
            get: function () {
                return this._data;
            },
            set: function (data) {
                if (tools.isEmpty(data))
                    this._data = {};
                else
                    this._data = data;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Result.prototype, "msg", {
            get: function () {
                return this._msg;
            },
            set: function (msg) {
                if (tools.isEmpty(msg))
                    this._msg = "";
                else
                    this._msg = msg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Result.prototype, "success", {
            get: function () {
                return this._success;
            },
            set: function (success) {
                if (tools.isEmpty(success))
                    success = true;
                this._success = success;
            },
            enumerable: true,
            configurable: true
        });
        Result.prototype.toString = function () {
            return {
                'code': this.code,
                'data': this.data,
                'msg': this.msg,
                'success': this.success
            };
        };
        return Result;
    }());
    exports.Result = Result;
});

define("User", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="User"/>
    var tools = G.tools;
    /**
     * Created by zhengchao on 2017/11/13.
     * 当前用户对象唯一实例
     */
    var User = /** @class */ (function () {
        function User() {
            var user = JSON.parse(localStorage.getItem("userInfo"));
            if (tools.isEmpty(user))
                user = {};
            if (typeof user === 'string')
                user = JSON.parse(user);
            this.userid = user.userid;
            this.username = user.username;
            this.department = user.department;
            this.loginType = user.loginType;
            this.are_id = user.are_id;
        }
        Object.defineProperty(User.prototype, "userid", {
            get: function () {
                return tools.str.toEmpty(this._userid);
            },
            set: function (userid) {
                // if(tools.isEmpty(userid))
                //     this._userid = "";
                // else
                this._userid = userid;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(User.prototype, "username", {
            get: function () {
                return tools.str.toEmpty(this._username);
            },
            set: function (username) {
                // if(tools.isEmpty(username))
                //     this._username = "";
                // else
                this._username = username;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(User.prototype, "department", {
            get: function () {
                return tools.str.toEmpty(this._department);
            },
            set: function (department) {
                // if(tools.isEmpty(department))
                //     this._department = "";
                // else
                this._department = department;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(User.prototype, "are_id", {
            get: function () {
                return tools.str.toEmpty(this._are_id);
            },
            set: function (are_id) {
                // if(tools.isEmpty(are_id))
                //     this._are_id = "";
                // else
                this._are_id = are_id;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(User.prototype, "loginType", {
            get: function () {
                return tools.str.toEmpty(this._loginType);
            },
            set: function (loginType) {
                // if(tools.isEmpty(loginType))
                //     this._loginType = 0;
                // else
                this._loginType = loginType;
                this.putStorage();
            },
            enumerable: true,
            configurable: true
        });
        User.prototype.putStorage = function () {
            localStorage.setItem('userInfo', this.toString());
        };
        User.prototype.toString = function () {
            return JSON.stringify({
                'userid': this.userid,
                'username': this.username,
                'department': this.department,
                'are_id': this.are_id,
                'loginType': this.loginType
            });
        };
        User.prototype.clearStorage = function () {
            this._userid = '';
            this._username = '';
            this._department = '';
            this._loginType = undefined;
            this._are_id = '';
            localStorage.setItem('userInfo', null);
        };
        User.get = function () {
            if (!User.user)
                User.user = new User();
            return User.user;
        };
        User.user = null;
        return User;
    }());
    exports.User = User;
});

/// <amd-module name="WebView"/>
// import tools = G.tools;
// interface IWebView {
//     url?:string,
//     event?:string,
//     data?:object,
//     msg?:string,
//     header?:object,
//     side?:number,//移动端使用
//     refer?:string,
//     title?:string,
//     callback?:Function
// }
// /**
//  * 窗口对象
//  */
// export class WebView implements IWebView{
//
//     private _url?:string;
//     set url(url:string){
//         if(tools.isEmpty(url))
//             this._url = "";
//         else
//             this._url = url;
//     }
//     get url(){
//         return this._url;
//     }
//
//     private _event?:string;
//     set event(event:string){
//         if(tools.isEmpty(event))
//             this._event = "";
//         else
//             this._event = event;
//     }
//     get event(){
//         return this._event;
//     }
//
//     private _data?:object;
//     set data(data:object){
//         if(tools.isEmpty(data))
//             this._data = {};
//         else
//             this._data = data;
//     }
//     get data(){
//         return this._data;
//     }
//
//     private _msg?:string;
//     set msg(msg:string){
//         if(tools.isEmpty(msg))
//             this._msg = "";
//         else
//             this._msg = msg;
//     }
//     get msg(){
//         return this._msg;
//     }
//
//     private _header?:object;
//     set header(header:object){
//         if(tools.isEmpty(header))
//             this._header = {};
//         else
//             this._header = header;
//     }
//     get header(){
//         return this._header;
//     }
//
//     private _side?:number;
//     set side(side:number){
//         if(tools.isEmpty(side))
//             this._side = 0;
//         else
//             this._side = side;
//     }
//     get side(){
//         return this._side;
//     }
//
//     private _refer?:string;
//     set refer(refer:string){
//         if(tools.isEmpty(refer))
//             this._refer = "";
//         else
//             this._refer = refer;
//     }
//     get refer(){
//         return this._refer;
//     }
//
//     private _title?:string;
//     set title(title:string){
//         if(tools.isEmpty(title))
//             this._title = "";
//         else
//             this._title = title;
//     }
//     get title(){
//         return this._title;
//     }
//
//     private _callback?:Function;
//     set callback(callback:Function){
//         this._callback = callback;
//     }
//     get callback(){
//         return this._callback;
//     }
//
//     toString(){
//         return {
//             'url':this.url,
//             'event':this.event,
//             'data':this.data,
//             'msg':this.msg,
//             'header':this.header,
//             'side':this.side,
//             'refer':this.refer,
//             'title':this.title,
//             'callback':this.callback
//         }
//     }
//
//     constructor(webView:IWebView) {
//         if(tools.isEmpty(webView))
//             webView = <IWebView>{};
//         if(typeof webView === 'string')
//             webView = JSON.parse(<string>webView);
//         this.url = webView.url;
//         this.event = webView.event;
//         this.data = webView.data;
//         this.msg = webView.msg;
//         this.header = webView.header;
//         this.side = webView.side;
//         this.refer = webView.refer;
//         this.title = webView.title;
//         this.callback = webView.callback;
//     }
// }

define("BaseShellImpl", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="BaseShellImpl"/>
    var tools = G.tools;
    var BaseShellImpl = /** @class */ (function () {
        function BaseShellImpl() {
        }
        BaseShellImpl.prototype.adHandle = function (action, dict) {
            if (typeof window['AppShell'] === 'undefined') {
                return;
            }
            if (tools.isEmpty(dict)) {
                return JSON.parse(AppShell.postMessage(action));
            }
            else {
                return JSON.parse(AppShell.postMessage(action, dict));
            }
        };
        BaseShellImpl.prototype.ipHandle = function (action, dict) {
            if (tools.isEmpty(dict))
                dict = {};
            dict.action = action;
            webkit.messageHandlers.AppShell.postMessage(dict);
        };
        BaseShellImpl.prototype.pcHandle = function (action, dict) {
            if (!('BlueWhaleShell' in window)) {
                return null;
            }
            if (typeof dict === 'undefined') {
                return BlueWhaleShell.postMessage(action);
            }
            else {
                if (typeof dict !== 'string') {
                    dict = JSON.stringify(dict);
                }
                return BlueWhaleShell.postMessage(action, dict);
            }
        };
        return BaseShellImpl;
    }());
    exports.BaseShellImpl = BaseShellImpl;
});

define("BarCode", ["require", "exports", "JsBarcode"], function (require, exports, JsBarcode) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-dependency path="JsBarcode" name="JsBarcode"/>
    var BarCode = /** @class */ (function () {
        function BarCode(svgDom, loc, sty) {
            this.init();
            this.draw(svgDom, loc, sty);
        }
        BarCode.prototype.init = function () {
            this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            this.svg.id = 'tempSvg';
            document.body.appendChild(this.svg);
        };
        BarCode.prototype.draw = function (svgDom, loc, sty) {
            JsBarcode("#tempSvg", sty.codeData, {
                lineColor: "#000000",
                //width: (loc.w-88)/68+1,
                width: sty.codeType === 3 ? 2 : 1,
                height: loc.h,
                margin: 0,
                displayValue: false,
                format: BarCode.CodeType[sty.codeType]
            });
            this.svg.setAttribute('x', "" + loc.x);
            this.svg.setAttribute('y', "" + loc.y);
            document.body.removeChild(this.svg);
            svgDom.appendChild(this.svg);
        };
        BarCode.CodeType = {
            0: 'ITF',
            3: 'CODE39',
            4: 'CODE39',
            5: 'CODE128A',
            6: 'CODE128B',
            7: 'CODE128C',
        };
        return BarCode;
    }());
    exports.BarCode = BarCode;
});

define("Draw", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Draw = /** @class */ (function () {
        function Draw(can) {
            this.shapeKindFun = (function (self) {
                var arr = [];
                arr[Draw.graphKind.rectangle] = function (ctx, loc, sty) {
                    ctx.save();
                    if (sty.angle) {
                        var rectCenterPoint = void 0;
                        loc.h ? rectCenterPoint = { x: loc.x + loc.w / 2, y: loc.y + loc.h / 2 } : rectCenterPoint = { x: loc.x + loc.w / 2, y: loc.y + loc.w / 2 };
                        ctx.translate(rectCenterPoint.x, rectCenterPoint.y);
                        ctx.rotate(sty.angle);
                        ctx.translate(-rectCenterPoint.x, -rectCenterPoint.y);
                    }
                    if (sty.penStyle == 6) {
                        ctx.beginPath();
                        ctx.moveTo(loc.x + sty.penWidth, loc.y + sty.penWidth);
                        ctx.lineTo(loc.x + loc.w - sty.penWidth, loc.y + sty.penWidth);
                        loc.h ? ctx.lineTo(loc.x + loc.w - sty.penWidth, loc.y + loc.h - sty.penWidth) : ctx.lineTo(loc.x + loc.w - sty.penWidth, loc.y + loc.w - sty.penWidth);
                        loc.h ? ctx.lineTo(loc.x + sty.penWidth, loc.y + loc.h - sty.penWidth) : ctx.lineTo(loc.x + sty.penWidth, loc.y + loc.w - sty.penWidth);
                        ctx.lineTo(loc.x + sty.penWidth, loc.y + sty.penWidth);
                        Draw.brushStyleFun.brush(ctx, sty);
                        ctx.lineWidth = 1;
                        ctx.fill();
                        ctx.stroke();
                        ctx.beginPath();
                        ctx.moveTo(loc.x, loc.y);
                        ctx.lineTo(loc.x + loc.w, loc.y);
                        ctx.lineTo(loc.x + loc.w, loc.y + loc.h);
                        ctx.lineTo(loc.x, loc.y + loc.h);
                        ctx.lineTo(loc.x, loc.y);
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                    else {
                        ctx.beginPath();
                        ctx.moveTo(loc.x + sty.penWidth / 2, loc.y + sty.penWidth / 2);
                        ctx.lineTo(loc.x + loc.w - sty.penWidth / 2, loc.y + sty.penWidth / 2);
                        loc.h ? ctx.lineTo(loc.x + loc.w - sty.penWidth / 2, loc.y + loc.h - sty.penWidth / 2) : ctx.lineTo(loc.x + loc.w - sty.penWidth / 2, loc.y + loc.w - sty.penWidth / 2);
                        loc.h ? ctx.lineTo(loc.x + sty.penWidth / 2, loc.y + loc.h - sty.penWidth / 2) : ctx.lineTo(loc.x + sty.penWidth / 2, loc.y + loc.w - sty.penWidth / 2);
                        ctx.lineTo(loc.x + sty.penWidth / 2, loc.y + sty.penWidth / 2);
                        Draw.brushStyleFun.brush(ctx, sty);
                        ctx.fill();
                        ctx.stroke();
                    }
                    ctx.restore();
                };
                arr[Draw.graphKind.circle] = function (ctx, loc, sty) {
                    ctx.save();
                    if (sty.angle) {
                        var rectCenterPoint = void 0;
                        rectCenterPoint = { x: loc.x, y: loc.y };
                        ctx.translate(rectCenterPoint.x, rectCenterPoint.y);
                        ctx.rotate(sty.angle);
                        ctx.translate(-rectCenterPoint.x, -rectCenterPoint.y);
                    }
                    if (loc.h) { //如果有传高度则为椭圆
                        if (sty.penStyle == 6) { //画笔类型为透视效果
                            ctx.save();
                            var r = (loc.w > loc.h) ? loc.w : loc.h;
                            var ratioX = loc.w / r;
                            var ratioY = loc.h / r;
                            ctx.scale(ratioX, ratioY);
                            ctx.beginPath();
                            ctx.arc(loc.x / ratioX, loc.y / ratioY, r - sty.penWidth, 0, 2 * Math.PI, false);
                            Draw.brushStyleFun.brush(ctx, sty);
                            ctx.lineWidth = 1;
                            ctx.fill();
                            ctx.stroke();
                            ctx.beginPath();
                            ctx.arc(loc.x / ratioX, loc.y / ratioY, r, 0, 2 * Math.PI, false);
                            ctx.stroke();
                            ctx.restore();
                        }
                        else { //画笔类型不为透视效果
                            ctx.save();
                            var r = (loc.w > loc.h) ? loc.w : loc.h;
                            var ratioX = loc.w / r;
                            var ratioY = loc.h / r;
                            ctx.scale(ratioX, ratioY);
                            ctx.beginPath();
                            ctx.arc(loc.x / ratioX, loc.y / ratioY, r - sty.penWidth / 2, 0, 2 * Math.PI, false);
                            Draw.brushStyleFun.brush(ctx, sty);
                            ctx.fill();
                            ctx.stroke();
                            ctx.restore();
                        }
                    }
                    else {
                        if (sty.penStyle == 6) { //画笔类型为透视效果
                            ctx.beginPath();
                            ctx.arc(loc.x, loc.y, loc.w - sty.penWidth, 0, 2 * Math.PI);
                            Draw.brushStyleFun.brush(ctx, sty);
                            ctx.lineWidth = 1;
                            ctx.fill();
                            ctx.stroke();
                            ctx.beginPath();
                            ctx.arc(loc.x, loc.y, loc.w, 0, 2 * Math.PI);
                            Draw.brushStyleFun.brush(ctx, sty);
                            ctx.lineWidth = 1;
                            ctx.stroke();
                        }
                        else {
                            ctx.beginPath();
                            ctx.arc(loc.x, loc.y, loc.w - sty.penWidth / 2, 0, 2 * Math.PI);
                            Draw.brushStyleFun.brush(ctx, sty);
                            ctx.fill();
                            ctx.stroke();
                        }
                    }
                    ctx.restore();
                };
                arr[Draw.graphKind.verticalLine] = function (ctx, loc, sty) {
                    ctx.save();
                    if (sty.penStyle == 6) {
                        ctx.beginPath();
                        ctx.moveTo(loc.x + 0.5, loc.y + 0.5);
                        ctx.lineTo(loc.x + sty.penWidth - 0.5, loc.y + 0.5);
                        ctx.lineTo(loc.x + sty.penWidth - 0.5, loc.y + loc.h - 0.5);
                        ctx.lineTo(loc.x + 0.5, loc.y + loc.h - 0.5);
                        ctx.lineTo(loc.x + 0.5, loc.y + 0.5);
                        Draw.brushStyleFun.brushLine(ctx, sty);
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                    else {
                        ctx.beginPath();
                        ctx.moveTo(loc.x + sty.penWidth / 2, loc.y);
                        ctx.lineTo(loc.x + sty.penWidth / 2, loc.y + loc.h);
                        Draw.brushStyleFun.brushLine(ctx, sty);
                        ctx.stroke();
                    }
                    ctx.restore();
                };
                arr[Draw.graphKind.line] = function (ctx, loc, sty) {
                    ctx.save();
                    if (sty.penStyle == 6) {
                        ctx.beginPath();
                        ctx.moveTo(loc.x + 0.5, loc.y + 0.5);
                        ctx.lineTo(loc.x + loc.w - 0.5, loc.y + 0.5);
                        ctx.lineTo(loc.x + loc.w - 0.5, loc.y + sty.penWidth - 0.5);
                        ctx.lineTo(loc.x + 0.5, loc.y + sty.penWidth - 0.5);
                        ctx.lineTo(loc.x + 0.5, loc.y + 0.5);
                        Draw.brushStyleFun.brushLine(ctx, sty);
                        ctx.lineWidth = 1;
                        ctx.stroke();
                    }
                    else {
                        ctx.beginPath();
                        ctx.moveTo(loc.x, loc.y + sty.penWidth / 2);
                        ctx.lineTo(loc.x + loc.w, loc.y + sty.penWidth / 2);
                        Draw.brushStyleFun.brushLine(ctx, sty);
                        ctx.stroke();
                    }
                    ctx.restore();
                };
                arr[Draw.graphKind.upAndDownParallelLine] = function (ctx, loc, sty) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(loc.x, loc.y + sty.penWidth / 2);
                    ctx.lineTo(loc.x + loc.w, loc.y + sty.penWidth / 2);
                    ctx.moveTo(loc.x, loc.y + sty.penWidth / 2 + loc.h);
                    ctx.lineTo(loc.x + loc.w, loc.y + sty.penWidth / 2 + loc.h);
                    Draw.brushStyleFun.brushLine(ctx, sty);
                    ctx.stroke();
                    ctx.restore();
                };
                arr[Draw.graphKind.leftAndRightParallelLine] = function (ctx, loc, sty) {
                    ctx.save();
                    ctx.beginPath();
                    ctx.moveTo(loc.x + sty.penWidth / 2, loc.y);
                    ctx.lineTo(loc.x + sty.penWidth / 2, loc.y + loc.h);
                    ctx.moveTo(loc.x + sty.penWidth / 2 + loc.w, loc.y);
                    ctx.lineTo(loc.x + sty.penWidth / 2 + loc.w, loc.y + loc.h);
                    Draw.brushStyleFun.brushLine(ctx, sty);
                    ctx.stroke();
                    ctx.restore();
                };
                return arr;
            }(this));
            this.textStyleFun = (function (self) {
                var arr = [];
                arr['backColor'] = function (tempCtx, loc, sty) {
                    // debugger;
                    tempCtx.save();
                    // sty.transparent === true ? tempCtx.globalAlpha = 0 : '';
                    // sty.transparent === false ? tempCtx.globalAlpha = 1 : '';
                    // typeof sty.transparent == 'number' ? tempCtx.globalAlpha = Number(sty.transparent) : '';
                    // tempCtx.fillStyle = '#' + sty['backColor'].toString(16);
                    // let {r, g, b} = G.tools.val2RGB(sty['backColor']);
                    // tempCtx.fillStyle = `rgb(${r},${g},${b})`;
                    tempCtx.fillStyle = sty.backColor;
                    tempCtx.fillRect(0, 0, loc.w, loc.h);
                    // tempCtx.restore();
                };
                arr['font'] = function (tempCtx, loc, sty) {
                    tempCtx.fillStyle = sty.font.fontColor;
                    if (sty['font']['IFontStyle'] === 1) {
                        tempCtx.font = "bolder " + sty['font']['fontSize'] + "px" + " " + 'Source Han Sans CN';
                    }
                    else {
                        tempCtx.font = sty['font']['fontSize'] + "px" + " " + 'Source Han Sans CN';
                    }
                };
                arr['forFill'] = function () {
                };
                arr['stretch'] = function (tempCtx, loc, sty) {
                    if (!sty['autoSize'] && sty['stretch']) {
                        tempCtx.font = loc.h + "px" + " " + sty['font']['fontName'];
                    }
                };
                return arr;
            }(this));
            this.contains = function (key) {
                var tempArr = ['dataName', 'alignment', 'autoSize', 'transparent', 'wrapping'];
                var index = tempArr.length;
                while (index--) {
                    if (tempArr[index] === key) {
                        return true;
                    }
                }
                return false;
            };
            this.init(can);
        }
        Draw.prototype.init = function (can) {
            this.canvas = document.createElement('canvas');
            this.canvas.width = can.width * window.devicePixelRatio;
            this.canvas.height = can.height * window.devicePixelRatio;
            this.canvas.style.width = can.width + "px";
            this.canvas.style.height = can.height + "px";
            this.ctx = this.canvas.getContext('2d');
            this.ctx.fillStyle = '#fff';
            this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
        };
        Draw.prototype.graph = function (shapeKind, loc, sty) {
            sty = Object.assign(Draw.defaultPara.shapeDefaultPara, sty);
            this.shapeKindFun[shapeKind].call(this, this.ctx, loc, sty); //根据图形字段调用相应图形函数
        };
        Draw.prototype.text = function (data, loc, sty) {
            if (data) { //当文字内容为null时候不绘制该文字
                data = data.replace(/null/g, "");
                sty = G.tools.obj.merge(true, Draw.defaultPara.textDefaultPara, sty);
                if (loc.w && loc.h) {
                    var tempCanvas = document.createElement("canvas"); //创建一个临时canvas保存字体的背景以及字体的内容
                    var tempCtx = tempCanvas.getContext('2d');
                    tempCanvas.width = loc.w;
                    tempCanvas.height = loc.h;
                    for (var key in sty) { //循环设置字体的所有样式
                        if (!this.contains(key)) //过滤掉某些不需要执行的样式
                            this.textStyleFun[key].call(this, tempCtx, loc, sty);
                    }
                    // debugger;
                    tempCtx.textBaseline = "top"; //设置文字的基线为top
                    this.drawText(data, tempCtx, loc, sty); //绘制文字
                    var imgData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
                    this.ctx.putImageData(imgData, loc.x, loc.y);
                }
                else {
                    this.ctx.save();
                    for (var key in sty) { //循环设置字体的所有样式
                        if (!this.contains(key)) //过滤掉某些不需要执行的样式
                            this.textStyleFun[key].call(this, this.ctx, loc, sty);
                    }
                    this.ctx.textBaseline = "top"; //设置文字的基线为top
                    this.ctx.fillText(data, loc.x, loc.y);
                    this.ctx.restore();
                }
            }
        };
        Draw.prototype.insertImg = function (loc, url, callback) {
            var _this = this;
            var _ctx = this.ctx, imgObj = new Image();
            if (typeof url === 'string') {
                imgObj.src = url;
                imgObj.onload = function () {
                    _ctx.drawImage(imgObj, loc.x, loc.y, loc.w, loc.h);
                    var base = _this.canvas.toDataURL("image/png", 1.0);
                    typeof callback === 'function' && callback(base);
                };
            }
            else {
                _ctx.drawImage(url, loc.x, loc.y, loc.w, loc.h);
                var base = this.canvas.toDataURL("image/jpeg", 1.0);
                typeof callback === 'function' && callback(base);
            }
        };
        //插入 二维码canvas
        /*
        * ewmW:二维码生成的宽
        * ewmH:二维码生成的高
        * ewmContent:二维码内容
        * 显示部分
        * posionX:显示在canvas的X位置坐标
        * posionY:显示在canvas的Y位置坐标
        *
        * */
        Draw.prototype.insertCanvas = function (canvas, posionX, posionY) {
            var ewmPen = canvas.getContext('2d');
            //获取到二维码的像素点
            var imgDataA = ewmPen.getImageData(0, 0, canvas.width, canvas.height);
            this.ctx.putImageData(imgDataA, posionX, posionY);
        };
        Draw.prototype.getPng = function () {
            return this.canvas.toDataURL("image/png");
        };
        Draw.prototype.getCanvasCt = function () {
            return this.ctx;
        };
        Draw.prototype.getCanvas = function () {
            return this.canvas;
        };
        Draw.prototype.drawText = function (data, tempCtx, loc, sty) {
            /*传进alignment需要根据居中，左对齐，右对齐来相应的调整文字显示的位置
             *如果autoSize为false 且 stretch为true则自动将文字填充为width和height的大小，
             *此时需要调整文字显示位置不为居中而是从0,0开始显示
            * */
            //debugger
            if (sty['wrapping'] && (tempCtx.measureText(data).width) > loc.w) {
                var tempTextArr = data.split("\r\n");
                if (tempTextArr.length > 1) {
                    for (var j = 0; j < tempTextArr.length; j++) {
                        tempCtx.fillText(tempTextArr[j], 0, (j * sty.font.fontSize) + 5 * j);
                    }
                }
                else {
                    var wrapText = tempCtx.measureText(data).width, tempText = [], len = Math.floor((loc.w / wrapText) * data.length) - 1, // 换行时有时最后一个字体会被遮挡故减1
                    tempLen = len, i = 0;
                    while (tempLen == len) {
                        var tempWrapText = data.substring(i * len, (i + 1) * len);
                        tempText.push(tempWrapText);
                        i++;
                        tempLen = tempWrapText.length;
                    }
                    tempCtx.textAlign = Draw.alignMent[0];
                    for (var j = 0; j < tempText.length; j++) {
                        tempCtx.fillText(tempText[j], 0, (j * sty.font.fontSize) + 3 * j);
                    }
                }
            }
            else {
                var tempTextArr = data.split("\r\n");
                if (tempTextArr.length >= 1) {
                    for (var j = 0; j < tempTextArr.length; j++) {
                        tempCtx.fillText(tempTextArr[j], 0, (j * sty.font.fontSize) + 5 * j);
                    }
                }
                else {
                    tempCtx.textAlign = Draw.alignMent[sty["alignment"]];
                    sty['alignment'] == 0 ?
                        loc.w && loc.h ? tempCtx.fillText(data, 0, (!sty['autoSize'] && sty['stretch']) ? 0 : (loc.h - sty.font.fontSize) / 2) : tempCtx.fillText(data, 0, 0) : "";
                    sty['alignment'] == 1 ?
                        loc.w && loc.h ? tempCtx.fillText(data, 0 + loc.w, (!sty['autoSize'] && sty['stretch']) ? 0 : (loc.h - sty.font.fontSize) / 2) : tempCtx.fillText(data, 0, 0) : "";
                    sty['alignment'] == 2 ?
                        loc.w && loc.h ? tempCtx.fillText(data, 0 + loc.w / 2, (!sty['autoSize'] && sty['stretch']) ? 0 : (loc.h - sty.font.fontSize) / 2) : tempCtx.fillText(data, 0, 0) : "";
                }
            }
        };
        Draw.defaultPara = {
            textDefaultPara: {
                alignment: 0,
                backColor: '#fff',
                font: { fontName: '黑体', fontSize: 7, fontColor: '#000', fontStyle: 0 },
                forFill: false,
                autoSize: true,
                stretch: true,
                transparent: false,
                wrapping: false
            },
            shapeDefaultPara: {
                brushColor: '#000',
                brushStyle: 0,
                penColor: '#000',
                penStyle: 0,
                penWidth: 1 //默认画笔宽度 1
            }
        };
        Draw.brushStyleFun = {
            brush: function (ctx, sty) {
                var p = document.createElement("canvas");
                p.width = 16;
                p.height = 8;
                var pctx = p.getContext('2d');
                sty.penStyle == 6 ? '' : ctx.setLineDash(Draw.lineStyle[sty.penStyle]);
                pctx.strokeStyle = sty.brushColor;
                ctx.strokeStyle = sty.penColor;
                pctx.lineWidth = sty['fillPenWidth'] ? sty['fillPenWidth'] : 1;
                ctx.lineWidth = sty['borderPenWidth'] ? sty['borderPenWidth'] : sty['penWidth'];
                var offset = 16;
                var x0 = 0, y0 = 0, x1 = 0, y1 = 0;
                if (sty.brushStyle == 1) {
                    ctx.fillStyle = "white";
                }
                else if (sty.brushStyle == 2) {
                    p.width = 16;
                    p.height = 6;
                    pctx.strokeStyle = sty.brushColor;
                    pctx.beginPath();
                    pctx.moveTo(0, 3);
                    pctx.lineTo(16, 3);
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else if (sty.brushStyle == 3) {
                    p.width = 6;
                    p.height = 16;
                    pctx.strokeStyle = sty.brushColor;
                    pctx.beginPath();
                    pctx.moveTo(3, 0);
                    pctx.lineTo(3, 16);
                    pctx.closePath();
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else if (sty.brushStyle == 4) {
                    x0 = -2;
                    x1 = 18;
                    y0 = -1;
                    y1 = 9;
                    pctx.beginPath();
                    pctx.moveTo(x0, y0);
                    pctx.lineTo(x1, y1);
                    pctx.moveTo(x0 - offset, y0);
                    pctx.lineTo(x1 - offset, y1);
                    pctx.moveTo(x0 + offset, y0);
                    pctx.lineTo(x1 + offset, y1);
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else if (sty.brushStyle == 5) {
                    x0 = 18;
                    x1 = -2;
                    y0 = -1;
                    y1 = 9;
                    pctx.beginPath();
                    pctx.moveTo(x0, y0);
                    pctx.lineTo(x1, y1);
                    pctx.moveTo(x0 - offset, y0);
                    pctx.lineTo(x1 - offset, y1);
                    pctx.moveTo(x0 + offset, y0);
                    pctx.lineTo(x1 + offset, y1);
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else if (sty.brushStyle == 6) {
                    p.width = 10;
                    p.height = 10;
                    pctx.strokeStyle = sty.brushColor;
                    pctx.beginPath();
                    pctx.moveTo(0, 5);
                    pctx.lineTo(10, 5);
                    pctx.moveTo(5, 0);
                    pctx.lineTo(5, 10);
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else if (sty.brushStyle == 7) {
                    x0 = -2;
                    x1 = 18;
                    y0 = -1;
                    y1 = 9;
                    pctx.strokeStyle = sty.brushColor;
                    pctx.lineWidth = sty.penWidth;
                    pctx.beginPath();
                    pctx.moveTo(x0, y0);
                    pctx.lineTo(x1, y1);
                    pctx.moveTo(x0 - offset, y0);
                    pctx.lineTo(x1 - offset, y1);
                    pctx.moveTo(x0 + offset, y0);
                    pctx.lineTo(x1 + offset, y1);
                    pctx.stroke();
                    x0 = 18;
                    x1 = -2;
                    y0 = -1;
                    y1 = 9;
                    pctx.beginPath();
                    pctx.moveTo(x0, y0);
                    pctx.lineTo(x1, y1);
                    pctx.moveTo(x0 - offset, y0);
                    pctx.lineTo(x1 - offset, y1);
                    pctx.moveTo(x0 + offset, y0);
                    pctx.lineTo(x1 + offset, y1);
                    pctx.stroke();
                    ctx.fillStyle = ctx.createPattern(p, 'repeat');
                }
                else {
                    ctx.fillStyle = sty.penColor;
                }
            },
            brushLine: function (ctx, sty) {
                sty.penStyle == 6 ? '' : ctx.setLineDash(Draw.lineStyle[sty.penStyle]);
                ctx.lineWidth = sty.penWidth;
                ctx.strokeStyle = sty.penColor;
            }
        };
        Draw.lineStyle = {
            0: [],
            1: [5, 5],
            2: [2, 2],
            3: [10, 10, 4, 10],
            4: [30, 10, 4, 10, 4, 10],
            5: [0, 1000] //无
            // 6:透视效果在程序中判断
        };
        Draw.graphKind = {
            rectangle: 0,
            circle: 1,
            verticalLine: 2,
            line: 3,
            upAndDownParallelLine: 4,
            leftAndRightParallelLine: 5 //左右平行线
        };
        Draw.alignMent = {
            0: 'left',
            1: 'right',
            2: 'center' //居中
        };
        return Draw;
    }());
    exports.Draw = Draw;
});

/// <amd-module name="DrawSvg"/>
define("DrawSvg", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var DrawSvg = /** @class */ (function () {
        function DrawSvg(para) {
            this.defsColor = []; //填充类型颜色缓存
            this.drawText = (function (self) {
                var wrapBreak = function (text, allWidth, font) {
                    var maxCount = Math.floor(allWidth / font), index = 0, result = [];
                    while (index * maxCount < text.length) {
                        result.push(text.slice(index * maxCount, (index + 1) * maxCount));
                        index++;
                    }
                    return result;
                };
                var drawWHText = function (textDom, data, sty, loc) {
                    textDom.setAttribute('x', "" + loc.x);
                    textDom.setAttribute('y', "" + loc.y);
                    textDom.setAttribute('width', "" + loc.w);
                    textDom.setAttribute('height', "" + loc.h);
                    textDom.setAttribute('dominant-baseline', 'text-before-edge');
                    var tempTextArr = data.split("\r\n"), innerText = '';
                    if (tempTextArr.length > 1) {
                        for (var j = 0; j < tempTextArr.length; j++) {
                            innerText += "<tspan xml:space='preserve' x=\"" + loc.x + "\" dy=\"" + (j * sty.font.fontSize + 3) + "\">" + tempTextArr[j] + "</tspan>";
                        }
                        if (sty.wrapping) {
                            var fontSize_1 = sty.font.fontSize;
                            wrapBreak(innerText, loc.w, fontSize_1).forEach(function (txt, index) {
                                var tspan = document.createElementNS(DrawSvg.svgUrl, 'tspan');
                                tspan.setAttribute('x', loc.x + '');
                                tspan.setAttribute('y', fontSize_1 * 1.2 * index + loc.y + '');
                                tspan.innerHTML = txt;
                                textDom.appendChild(tspan);
                            });
                        }
                        else {
                            textDom.innerHTML = innerText;
                        }
                    }
                    else {
                        if (data.indexOf(" ") > -1 && data.indexOf("<") !== 0) {
                            data = data.replace(/\s/g, "&ensp;");
                        }
                        if (sty.wrapping) {
                            var fontSize_2 = sty.font.fontSize;
                            wrapBreak(data, loc.w, fontSize_2).forEach(function (txt, index) {
                                var tspan = document.createElementNS(DrawSvg.svgUrl, 'tspan');
                                tspan.setAttribute('x', loc.x + '');
                                tspan.setAttribute('y', fontSize_2 * 1.2 * index + loc.y + '');
                                tspan.innerHTML = txt;
                                textDom.appendChild(tspan);
                            });
                        }
                        else {
                            textDom.innerHTML = data;
                        }
                    }
                };
                var drawNotWHText = function (textDom, data, sty, loc) {
                    textDom.setAttribute('x', "" + loc.x);
                    textDom.setAttribute('y', "" + loc.y);
                    textDom.setAttribute('dominant-baseline', 'text-before-edge');
                    if (data.indexOf(" ") > -1) {
                        data = data.replace(/\s/g, "&ensp;");
                    }
                    textDom.innerHTML = data;
                };
                return { drawWHText: drawWHText, drawNotWHText: drawNotWHText };
            })(this);
            this.textStyleFun = (function (self) {
                var arr = [];
                arr['font'] = function (textDom, sty) {
                    if (sty['font']['fontStyle'] === 1) {
                        textDom.setAttribute('font-weight', "bold");
                    }
                    textDom.setAttribute('font-size', sty.font.fontSize + "px");
                    textDom.setAttribute('font-family', "" + sty.font.fontName);
                    textDom.setAttribute('fill', '#' + sty['font']['fontColor'].toString(16));
                };
                arr['hasWHSty'] = function (textDom, sty, loc) {
                    sty.transparent && textDom.setAttribute('opacity', '0');
                    typeof sty.transparent == 'number' && textDom.setAttribute('opacity', "" + Number(sty.transparent));
                    textDom.setAttribute('style', "text-align:" + DrawSvg.alignMent[sty.alignment] + ";");
                    switch (sty.alignment) {
                        case 0:
                            textDom.setAttribute('style', "text-anchor: start;");
                            textDom.setAttribute('x', "" + loc.x);
                            break;
                        case 1:
                            textDom.setAttribute('style', "text-anchor: end;");
                            textDom.setAttribute('x', "" + (loc.x + loc.w));
                            break;
                        case 2:
                            textDom.setAttribute('style', "text-anchor: middle;");
                            textDom.setAttribute('x', "" + (loc.x + loc.w / 2));
                            break;
                    }
                    if (!sty['autoSize'] && sty['stretch']) {
                        textDom.setAttribute('font-size', loc.h + "px");
                    }
                    if (sty['autoSize']) {
                        textDom.setAttribute('width', textDom.innerHTML.length * sty.font.fontSize + "px");
                        textDom.setAttribute('height', sty.font.fontSize + "px");
                    }
                };
                return arr;
            }(this));
            this.shapeKindFun = (function (self) {
                var arr = [];
                arr[DrawSvg.graphKind.rectangle] = function (loc, sty) {
                    var rect = document.createElementNS(DrawSvg.svgUrl, 'rect'), rectStyle, borderDom = null;
                    var fillColor = sty.brushColor ? '#' + sty['brushColor'].toString(16) : 'black';
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    if (!(sty.brushStyle === 0 || sty.brushStyle === 1)) {
                        rectStyle = "fill:url(#" + DrawSvg.fillKindNumber[sty.brushStyle] + fillColor + ");stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，填充颜色，边框线条宽度
                    }
                    else {
                        rectStyle = "fill:" + (sty.brushStyle ? 'white' : fillColor) + ";stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，填充颜色，边框线条宽度
                    }
                    if (sty.penStyle !== 6) { //判断是否是透视效果
                        rect.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                        rect.setAttribute('width', "" + (loc.w - sty.penWidth));
                        rect.setAttribute('height', "" + (loc.h - sty.penWidth));
                        rect.setAttribute('x', "" + loc.x);
                        rect.setAttribute('y', "" + loc.y);
                    }
                    else {
                        borderDom = document.createElementNS(DrawSvg.svgUrl, 'rect'); //透视边框节点
                        borderDom.setAttribute('width', "" + loc.w);
                        borderDom.setAttribute('height', "" + loc.h);
                        borderDom.setAttribute('x', "" + loc.x);
                        borderDom.setAttribute('y', "" + loc.y);
                        borderDom.setAttribute('style', "fill:white;stroke:" + borderColor + ";stroke-width:1;");
                        rect.setAttribute('width', "" + (loc.w - 2 * sty.penWidth));
                        rect.setAttribute('height', "" + (loc.h - 2 * sty.penWidth));
                        rect.setAttribute('x', "" + (loc.x + sty.penWidth));
                        rect.setAttribute('y', "" + (loc.y + sty.penWidth));
                    }
                    rect.setAttribute('style', rectStyle);
                    borderDom && self.svg.appendChild(borderDom);
                    self.svg.appendChild(rect);
                };
                arr[DrawSvg.graphKind.circle] = function (loc, sty) {
                    var fillColor = sty.brushColor ? '#' + sty['brushColor'].toString(16) : 'black';
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    var circle, circleStyle, borderDom = null;
                    if (!(sty.brushStyle === 0 || sty.brushStyle === 1)) {
                        circleStyle = "fill:url(#" + DrawSvg.fillKindNumber[sty.brushStyle] + fillColor + ");stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，填充颜色，边框线条宽度
                    }
                    else {
                        circleStyle = "fill:" + (sty.brushStyle ? 'white' : fillColor) + ";stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，填充颜色，边框线条宽度
                    }
                    if (loc.w && loc.h && (loc.w !== loc.h)) { //椭圆
                        circle = document.createElementNS(DrawSvg.svgUrl, 'ellipse');
                        if (sty.penStyle !== 6) { //判断是否是透视效果
                            circle.setAttribute('rx', "" + (loc.w / 2 - sty.penWidth / 2));
                            circle.setAttribute('ry', "" + (loc.h / 2 - sty.penWidth / 2));
                            circle.setAttribute('cx', "" + (loc.x + loc.w / 2));
                            circle.setAttribute('cy', "" + (loc.y + loc.h / 2));
                            circle.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                        }
                        else {
                            borderDom = document.createElementNS(DrawSvg.svgUrl, 'circle'); //透视边框节点
                            borderDom.setAttribute('rx', "" + loc.w / 2);
                            borderDom.setAttribute('ry', "" + loc.h / 2);
                            borderDom.setAttribute('cx', "" + (loc.x + loc.w / 2));
                            borderDom.setAttribute('cy', "" + (loc.y + loc.h / 2));
                            borderDom.setAttribute('style', "fill:white;stroke:" + borderColor + ";stroke-width:1;");
                            circle.setAttribute('rx', "" + (loc.w / 2 - sty.penWidth));
                            circle.setAttribute('ry', "" + (loc.h / 2 - sty.penWidth));
                            circle.setAttribute('cx', "" + (loc.x + loc.w / 2));
                            circle.setAttribute('cy', "" + (loc.y + loc.h / 2));
                        }
                        circle.setAttribute('style', circleStyle);
                        borderDom && self.svg.appendChild(borderDom);
                        self.svg.appendChild(circle);
                    }
                    else { //圆
                        circle = document.createElementNS(DrawSvg.svgUrl, 'circle');
                        var r = loc.w ? loc.w / 2 : loc.h / 2;
                        if (sty.penStyle !== 6) { //判断是否是透视效果
                            circle.setAttribute('r', "" + (r - sty.penWidth / 2));
                            circle.setAttribute('cx', "" + (loc.x + r));
                            circle.setAttribute('cy', "" + (loc.y + r));
                            circle.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                        }
                        else {
                            borderDom = document.createElementNS(DrawSvg.svgUrl, 'circle'); //透视边框节点
                            borderDom.setAttribute('r', "" + r);
                            borderDom.setAttribute('cx', "" + (loc.x + r));
                            borderDom.setAttribute('cy', "" + (loc.y + r));
                            borderDom.setAttribute('style', "fill:white;stroke:" + borderColor + ";stroke-width:1;");
                            circle.setAttribute('r', "" + (r - sty.penWidth));
                            circle.setAttribute('cx', "" + (loc.x + r));
                            circle.setAttribute('cy', "" + (loc.y + r));
                        }
                    }
                    circle.setAttribute('style', circleStyle);
                    borderDom && self.svg.appendChild(borderDom);
                    self.svg.appendChild(circle);
                };
                arr[DrawSvg.graphKind.verticalLine] = function (loc, sty) {
                    var line = document.createElementNS(DrawSvg.svgUrl, 'line'), lineStyle, borderDom = null;
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    lineStyle = "stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，边框线条宽度
                    if (sty.penStyle !== 6) {
                        line.setAttribute('x1', "" + loc.x);
                        line.setAttribute('y1', "" + loc.y);
                        line.setAttribute('x2', "" + loc.x);
                        line.setAttribute('y2', "" + (loc.y + loc.h));
                        line.setAttribute('style', lineStyle);
                        line.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                    }
                    else {
                        borderDom = document.createElementNS(DrawSvg.svgUrl, 'rect');
                        borderDom.setAttribute('style', "stroke:" + borderColor + ";stroke-width:1;");
                        borderDom.setAttribute('x', "" + loc.x);
                        borderDom.setAttribute('y', "" + loc.y);
                        borderDom.setAttribute('width', "" + sty.penWidth);
                        borderDom.setAttribute('height', "" + loc.h);
                        borderDom.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                    }
                    self.svg.appendChild(borderDom ? borderDom : line);
                };
                arr[DrawSvg.graphKind.line] = function (loc, sty) {
                    var line = document.createElementNS(DrawSvg.svgUrl, 'line'), lineStyle, borderDom = null;
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    lineStyle = "stroke:" + borderColor + ";stroke-width:" + (sty.penStyle === 6 ? 1 : sty.penWidth); //设置边框颜色，边框线条宽度
                    if (sty.penStyle !== 6) {
                        line.setAttribute('x1', "" + loc.x);
                        line.setAttribute('y1', "" + loc.y);
                        line.setAttribute('x2', "" + (loc.x + loc.w));
                        line.setAttribute('y2', "" + loc.y);
                        line.setAttribute('style', lineStyle);
                        line.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                    }
                    else {
                        borderDom = document.createElementNS(DrawSvg.svgUrl, 'rect');
                        borderDom.setAttribute('style', "stroke:" + borderColor + ";stroke-width:1;");
                        borderDom.setAttribute('x', "" + loc.x);
                        borderDom.setAttribute('y', "" + loc.y);
                        borderDom.setAttribute('width', "" + loc.w);
                        borderDom.setAttribute('height', "" + sty.penWidth);
                        borderDom.setAttribute('stroke-dasharray', DrawSvg.lineStyle[sty.penStyle]);
                    }
                    self.svg.appendChild(borderDom ? borderDom : line);
                };
                arr[DrawSvg.graphKind.upAndDownParallelLine] = function (loc, sty) {
                    var upLine = document.createElementNS(DrawSvg.svgUrl, 'line'), downLine = document.createElementNS(DrawSvg.svgUrl, 'line'), lineStyle;
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    lineStyle = "stroke:" + borderColor + ";stroke-width:" + sty.penWidth; //设置边框颜色，边框线条宽度
                    upLine.setAttribute('x1', "" + loc.x);
                    upLine.setAttribute('y1', "" + loc.y);
                    upLine.setAttribute('x2', "" + (loc.x + loc.w));
                    upLine.setAttribute('y2', "" + loc.y);
                    upLine.setAttribute('style', "" + lineStyle);
                    downLine.setAttribute('x1', "" + loc.x);
                    downLine.setAttribute('y1', "" + (loc.y + loc.h));
                    downLine.setAttribute('x2', "" + (loc.x + loc.w));
                    downLine.setAttribute('y2', "" + (loc.y + loc.h));
                    downLine.setAttribute('style', "" + lineStyle);
                    self.svg.appendChild(upLine);
                    self.svg.appendChild(downLine);
                };
                arr[DrawSvg.graphKind.leftAndRightParallelLine] = function (loc, sty) {
                    var leftLine = document.createElementNS(DrawSvg.svgUrl, 'line'), rightLine = document.createElementNS(DrawSvg.svgUrl, 'line'), lineStyle;
                    var borderColor = sty.penColor ? '#' + sty['penColor'].toString(16) : 'black';
                    lineStyle = "stroke:" + borderColor + ";stroke-width:" + sty.penWidth; //设置边框颜色，边框线条宽度
                    leftLine.setAttribute('x1', "" + loc.x);
                    leftLine.setAttribute('y1', "" + loc.y);
                    leftLine.setAttribute('x2', "" + loc.x);
                    leftLine.setAttribute('y2', "" + (loc.y + loc.h));
                    leftLine.setAttribute('style', "" + lineStyle);
                    rightLine.setAttribute('x1', "" + (loc.x + loc.w));
                    rightLine.setAttribute('y1', "" + loc.y);
                    rightLine.setAttribute('x2', "" + (loc.x + loc.w));
                    rightLine.setAttribute('y2', "" + (loc.y + loc.h));
                    rightLine.setAttribute('style', "" + lineStyle);
                    self.svg.appendChild(leftLine);
                    self.svg.appendChild(rightLine);
                };
                return arr;
            }(this));
            this.shapeFillStyle = (function () {
                var arr = [];
                arr[DrawSvg.fillKind.shuiping] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = " <pattern id=\"shuiping" + color + "\" width=\"5\" height=\"5\" patternUnits=\"userSpaceOnUse\">\n                                        <line x1=\"0\" y1=\"2.5\" x2=\"5\" y2=\"2.5\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                </pattern>";
                    svgDom.appendChild(defs);
                };
                arr[DrawSvg.fillKind.chuizhi] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = " <pattern id=\"chuizhi" + color + "\" width=\"5\" height=\"5\" patternUnits=\"userSpaceOnUse\">\n                                    <line x1=\"2.5\" y1=\"0\" x2=\"2.5\" y2=\"5\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                </pattern>";
                    svgDom.appendChild(defs);
                };
                arr[DrawSvg.fillKind.youxie] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = " <pattern id=\"youxie" + color + "\" width=\"7\" height=\"7\" patternUnits=\"userSpaceOnUse\">\n                                    <line x1=\"0\" y1=\"0\" x2=\"7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"-7\" y1=\"0\" x2=\"0\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"7\" y1=\"0\" x2=\"14\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                </pattern>";
                    svgDom.appendChild(defs);
                };
                arr[DrawSvg.fillKind.zuoxie] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = "  <pattern id=\"zuoxie" + color + "\" width=\"7\" height=\"7\" patternUnits=\"userSpaceOnUse\">\n                                    <line x1=\"7\" y1=\"0\" x2=\"0\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"0\" y1=\"0\" x2=\"-7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"14\" y1=\"0\" x2=\"7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                </pattern>";
                    svgDom.appendChild(defs);
                };
                arr[DrawSvg.fillKind.fangge] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = "<pattern id=\"fangge" + color + "\" width=\"5\" height=\"5\" patternUnits=\"userSpaceOnUse\">\n                                <line x1=\"0\" y1=\"2.5\" x2=\"5\" y2=\"2.5\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                <line x1=\"2.5\" y1=\"0\" x2=\"2.5\" y2=\"5\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                            </pattern>";
                    svgDom.appendChild(defs);
                };
                arr[DrawSvg.fillKind.xiefangge] = function (color, svgDom) {
                    (color === '#0') && (color = 'black');
                    var defs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
                    defs.innerHTML = " <pattern id=\"xiefangge" + color + "\" width=\"7\" height=\"7\" patternUnits=\"userSpaceOnUse\">\n                                    <line x1=\"0\" y1=\"0\" x2=\"7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"-7\" y1=\"0\" x2=\"0\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"7\" y1=\"0\" x2=\"14\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"7\" y1=\"0\" x2=\"0\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"0\" y1=\"0\" x2=\"-7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                    <line x1=\"14\" y1=\"0\" x2=\"7\" y2=\"7\"  style=\"stroke:" + color + ";stroke-width:1\" />\n                                </pattern>";
                    svgDom.appendChild(defs);
                };
                return arr;
            })();
            this.init(para);
        }
        DrawSvg.prototype.graph = function (shapeKind, loc, sty) {
            //如果为非实心填充或者空心填充添加图形填充类型
            if (!(sty.brushStyle === 0 || sty.brushStyle === 1)) {
                this.appendDefs(sty);
            }
            this.shapeKindFun[shapeKind].call(this, loc, sty); //根据图形字段调用相应图形函数
        };
        DrawSvg.prototype.text = function (data, loc, sty) {
            data = data + "";
            if (loc.w || loc.h) {
                loc.h === 0 && (loc.h = sty.font.fontSize);
                //如果需要换行则创建换行的标签foreignObject；否则为不自动换行标签text
                var textDom = (document.createElementNS(DrawSvg.svgUrl, 'text'));
                this.drawText.drawWHText(textDom, data, sty, loc);
                this.textStyleFun['font'].call(this, textDom, sty);
                this.textStyleFun['hasWHSty'].call(this, textDom, sty, loc);
                //为有宽高的字设置背景颜色，需要新创建一个矩形作为背景
                /* let fillColor = '#' + sty['backColor'].toString(16);
                 let back = document.createElementNS(DrawSvg.svgUrl,'rect');
                 back.setAttribute('x',`${loc.x}`);
                 back.setAttribute('y',`${loc.y}`);
                 back.setAttribute('width',`${loc.w}`);
                 back.setAttribute('height',`${loc.h}`);
                 back.setAttribute('fill',fillColor);
                 this.svg.appendChild(back);*/
                this.svg.appendChild(textDom);
            }
            else {
                var textDom = document.createElementNS(DrawSvg.svgUrl, 'text');
                this.drawText.drawNotWHText(textDom, data, sty, loc);
                this.textStyleFun['font'].call(this, textDom, sty);
                this.svg.appendChild(textDom);
            }
        };
        DrawSvg.prototype.icon = function (iconKind, loc) {
            this.drawIcon(iconKind, loc);
        };
        DrawSvg.prototype.getSvg = function () {
            return this.svg;
        };
        DrawSvg.prototype.init = function (can) {
            this.svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
            this.svg.setAttribute('width', "" + can.width);
            this.svg.setAttribute('height', "" + can.height);
            /*document.body.innerHTML = '';
            document.body.appendChild(this.svg);*/
        };
        DrawSvg.prototype.drawIcon = function (iconKind, loc) {
            var svgimg = document.createElementNS('http://www.w3.org/2000/svg', 'image');
            svgimg.setAttributeNS(null, 'height', "" + loc.h);
            svgimg.setAttributeNS(null, 'width', "" + loc.w);
            svgimg.setAttributeNS('http://www.w3.org/1999/xlink', 'href', "http://" + location.host + "/img/img/label/" + iconKind + DrawSvg.iconSuffix[iconKind]);
            svgimg.setAttributeNS(null, 'x', "" + loc.x);
            svgimg.setAttributeNS(null, 'y', "" + loc.y);
            svgimg.setAttributeNS(null, 'visibility', 'visible');
            this.svg.appendChild(svgimg);
        };
        ;
        /**
         * 根据图形的brushColor来生成svg的不同defs，用作填充类型的使用
         * @param {shapeCss} sty
         */
        DrawSvg.prototype.appendDefs = function (sty) {
            var fillColor = '#' + sty['brushColor'].toString(16);
            if (this.defsColor.indexOf(fillColor) === -1) {
                this.defsColor.push(fillColor);
                this.shapeFillStyle[sty.brushStyle].call(this, fillColor, this.svg);
            }
        };
        DrawSvg.svgUrl = 'http://www.w3.org/2000/svg';
        DrawSvg.lineStyle = {
            0: "",
            1: "5,5",
            2: "2, 2",
            3: "10,10,4,10",
            4: "30,10,4,10,4,10",
            5: "0,1000" //无
            // 6:透视效果在程序中判断
        };
        DrawSvg.graphKind = {
            rectangle: 0,
            circle: 1,
            verticalLine: 2,
            line: 3,
            upAndDownParallelLine: 4,
            leftAndRightParallelLine: 5 //左右平行线
        };
        DrawSvg.fillKind = {
            shixing: 0,
            kongxin: 1,
            shuiping: 2,
            chuizhi: 3,
            youxie: 4,
            zuoxie: 5,
            fangge: 6,
            xiefangge: 7 //斜方格填充
        };
        DrawSvg.fillKindNumber = ['shixing', 'kongxin', 'shuiping', 'chuizhi', 'youxie', 'zuoxie', 'fangge', 'xiefangge'];
        DrawSvg.alignMent = {
            0: 'left',
            1: 'right',
            2: 'center' //居中
        };
        DrawSvg.iconSuffix = {
            1: '.bmp',
            2: '.bpm',
            3: '.gif',
            50000: '.bmp',
            50001: '.bmp',
            90000: '.jpeg',
            90001: '.jpeg'
        }; //图表对应的图片后缀
        return DrawSvg;
    }());
    exports.DrawSvg = DrawSvg;
});

define("Echart", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Echart" />
    var tools = G.tools;
    var Echart = /** @class */ (function () {
        function Echart() {
            this.setDefault();
        }
        Echart.prototype.setDefault = function () {
            this._title = {
                text: '订单明细图',
                x: 'center'
            };
            this._grid = tools.isMb ? {
                left: '1%',
                right: '6%',
                bottom: '30px',
                containLabel: true
            } : {
                left: '1%',
                right: '15%',
                bottom: '3%',
                containLabel: true
            };
            this.option = {
                title: this._title,
                grid: this._grid
            };
        };
        Object.defineProperty(Echart.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                this._title = title;
                this.option['title'] = title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "legend", {
            get: function () {
                return this._legend;
            },
            set: function (legend) {
                this._legend = legend;
                this.option['legend'] = legend;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "grid", {
            get: function () {
                return this._grid;
            },
            set: function (grid) {
                this._grid = grid;
                this.option['grid'] = grid;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "xAxis", {
            get: function () {
                return this._xAxis;
            },
            set: function (xAxis) {
                this._xAxis = xAxis;
                this.option['xAxis'] = xAxis;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "yAxis", {
            get: function () {
                return this._yAxis;
            },
            set: function (yAxis) {
                this._yAxis = yAxis;
                this.option['yAxis'] = yAxis;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "series", {
            get: function () {
                return this._series;
            },
            set: function (series) {
                this._series = series;
                this.option['series'] = series;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "tooltip", {
            get: function () {
                return this._tooltip;
            },
            set: function (tooltip) {
                this._tooltip = tooltip;
                this.option['tooltip'] = tooltip;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "dataZoom", {
            get: function () {
                return this._dataZoom;
            },
            set: function (dataZoom) {
                this._dataZoom = dataZoom;
                this.option['dataZoom'] = dataZoom;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Echart.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (color) {
                this._color = color;
                this.option['color'] = color;
            },
            enumerable: true,
            configurable: true
        });
        Echart.prototype.getOption = function () {
            return this.option;
        };
        return Echart;
    }());
    exports.Echart = Echart;
});


define("QrCode", ["require", "exports", "QRCode"], function (require, exports, QRCode) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="QrCode" />
    /// <amd-dependency path="QRCode" name="QRCode"/>
    var tools = G.tools;
    var QrCode = /** @class */ (function () {
        function QrCode(svgDom, loc, sty) {
            this.init(svgDom, loc, sty);
        }
        QrCode.prototype.init = function (svgDom, loc, sty) {
            this.g = document.createElementNS('http://www.w3.org/2000/svg', 'g');
            var qrcode = new QRCode(this.g, {
                width: loc.w,
                height: loc.h,
                useSVG: true
            });
            qrcode.makeCode(sty.codeData);
            var gSvg = this.g.firstChild;
            gSvg.setAttribute('width', "" + loc.w);
            gSvg.setAttribute('height', "" + loc.h);
            gSvg.setAttribute('x', "" + loc.x);
            gSvg.setAttribute('y', "" + loc.y);
            svgDom.appendChild(this.g);
        };
        QrCode.toCanvas = function (text, x, y, container) {
            var div = tools.isEmpty(container) ? document.createElement('div') : container;
            new QRCode(div, {
                text: text,
                width: x,
                height: y,
                colorDark: "#000000",
                colorLight: "#ffffff",
                correctLevel: QRCode.CorrectLevel.H
            });
            var canvas = div.getElementsByTagName("canvas")[0];
            return canvas;
        };
        return QrCode;
    }());
    exports.QrCode = QrCode;
});

/// <amd-module name="statistic"/>
define("statistic", ["require", "exports", "TableBase", "Loading"], function (require, exports, TableBase_1, loading_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var Statistic = /** @class */ (function () {
        /**
         * 构造函数
         * @param paraConf
         */
        function Statistic() {
            // 交叉制表
            this.colFormula = [];
            this.colIndexTemp = 0;
            this.cols = []; // 存储表头顺序，用于渲染表格主体数据
            this.dataTemp = {}; // 用于临时存储聚合数据
            this.crossFunc = (function (self) {
                var childIndex = 0;
                // 构建取值列-交叉表
                function cols_getVal(vals, cols, opts) {
                    if (opts === void 0) { opts = {}; }
                    var result = [];
                    for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
                        var item = cols_1[_i];
                        if (vals.includes(item.name)) {
                            result.push(tools.obj.merge({
                                title: item.title,
                                name: item.name
                            }, opts));
                        }
                    }
                    return result;
                }
                // 构建交叉表头 [数组结构]-交叉表
                function buildCols(col, val, data) {
                    if (col.length > 0) {
                        var child_1 = col.shift(), colTree_1 = {}, result = [];
                        data.forEach(function (item, i) {
                            colTree_1[item[child_1]] = colTree_1[item[child_1]] || { title: item[child_1], data: [] };
                            colTree_1[item[child_1]].data.push(item);
                        });
                        for (var i in colTree_1) {
                            if (colTree_1.hasOwnProperty(i)) {
                                var childs = buildCols(col.concat(), val, colTree_1[i].data);
                                if (childs && (childs.length > 1 || childs[0].children)) {
                                    result.push({
                                        title: colTree_1[i].title,
                                        name: child_1,
                                        children: childs
                                    });
                                }
                                else {
                                    var name_1 = child_1;
                                    if (childs && childs.length === 1) {
                                        var childName = childs[0].name;
                                        childName = childName.replace(/^.*?=/, '');
                                        name_1 = child_1 + "=" + childName;
                                    }
                                    result.push({
                                        title: colTree_1[i].title,
                                        name: name_1
                                    });
                                }
                            }
                        }
                        //childIndex = 0;
                        return result;
                    }
                    else if (val) {
                        var childVal_1 = [];
                        val.forEach(function (item) {
                            childVal_1.push(G.tools.obj.merge(item, { name: item.name + "-" + childIndex++ }));
                        });
                        return childVal_1;
                    }
                }
                // 获取每列的运算条件-交叉表
                function getFormula(cols, val, parent) {
                    if (parent === void 0) { parent = []; }
                    if (cols) {
                        cols.forEach(function (item, i) {
                            var path = parent.concat();
                            if (item.type != 'val') {
                                path.push({ name: item.name, title: item.title });
                            }
                            getFormula(item.children, val, path);
                        });
                    }
                    else {
                        if (!val || val.length === 0) {
                            parent.push(null);
                        }
                        else {
                            var valItem = void 0;
                            self.colIndexTemp = self.colIndexTemp < val.length ? self.colIndexTemp : 0;
                            valItem = val[self.colIndexTemp];
                            valItem.group = self.colIndexTemp; // 用于计算汇总数据
                            parent.push(valItem);
                            self.colIndexTemp++;
                        }
                        //console.log('getFormula', cols, val, parent);
                        self.colFormula.push(parent);
                    }
                }
                // 构建交叉表格主体 [数组结构]-交叉表
                function buildRows(row, val, data, colFormula, cols, parent) {
                    if (cols === void 0) { cols = []; }
                    if (parent === void 0) { parent = {}; }
                    if (row.length > 0) {
                        var child_2 = row.shift(), colTree_2 = {}, result = [];
                        data.forEach(function (item, i) {
                            colTree_2[item[child_2]] = colTree_2[item[child_2]] || [];
                            colTree_2[item[child_2]].push(item);
                        });
                        for (var i in colTree_2) {
                            if (colTree_2.hasOwnProperty(i)) {
                                var col = cols.concat();
                                col.push({ name: child_2, title: i });
                                parent[child_2] = i;
                                result = result.concat(buildRows(row.concat(), val, colTree_2[i], colFormula, col, parent));
                            }
                        }
                        return result;
                    }
                    else {
                        var childTemp = {};
                        data.forEach(function (item, i) {
                            var rowData = {}, sumGroup = [], keys = [], key = '';
                            self.cols = [];
                            colFormula.forEach(function (colItem, j) {
                                var check = true, currentCol = colItem[colItem.length - 1], group = currentCol.group, currentName = currentCol.name, colName = currentName + "-" + childIndex, sumName = currentName + "_SUM", colLength;
                                sumGroup[group] = sumGroup[group] || { name: "" + sumName, title: 0 };
                                // 判断是否有数据
                                // 单值
                                /*if(val.length===1) {
                                    colLength = colItem.length-2;
                                }
                                // 多值
                                else {
                                    colLength = colItem.length-1;
                                }*/
                                colLength = colItem.length - 1;
                                for (var k = 0, l = colLength; k < l; k++) {
                                    var name_2 = colItem[k].name;
                                    // 单值
                                    if (val.length === 1 && !!~name_2.indexOf('=')) {
                                        name_2 = name_2.replace(/=.*?$/, '');
                                        //console.log(name);
                                    }
                                    /*if(item['GOO_NAME'] === 'SANFU(SH)' && item['GOO_ID'] === '348577') {
                                        console.log('----->', name, colItem, item[name], colItem[k].title, typeof item[name] === 'undefined' || item[name] !== colItem[k].title);
                                    }*/
                                    if (typeof item[name_2] === 'undefined' || item[name_2] !== colItem[k].title) {
                                        check = false;
                                        break;
                                    }
                                }
                                /*if(item['GOO_NAME'] === 'SANFU(SH)' && item['GOO_ID'] === '348577') {
                                    console.log('>>>>', check, item);
                                }*/
                                // 单值
                                if (val.length === 1) {
                                    colName = colItem[colItem.length - 2].name;
                                }
                                if (check) {
                                    sumGroup[group].title += item[currentName];
                                    /*rowData.push({
                                        name: colName,
                                        title: item[currentName]
                                    });*/
                                    rowData[colName] = item[currentName];
                                    self.cols.push({
                                        name: colName,
                                        title: item[currentName]
                                    });
                                }
                                else {
                                    self.cols.push({ name: colName, title: '--' }); //单元格无数据
                                    rowData[colName] = '--';
                                }
                                childIndex++;
                            });
                            // 求总计
                            /*if(sumGroup.length>1) {
                                let val = sumGroup.reduce((sum, item)=>{return sum.title+item.title;});
                                sumGroup.unshift({
                                    name: 'STAT_SUM',
                                    title: val
                                });
                            }*/
                            sumGroup.forEach(function (item, i) {
                                rowData[item.name] = item.title;
                            });
                            //rowData = [...parent, ...rowData];
                            rowData = G.tools.obj.merge(rowData, parent);
                            self.cols = cols.concat(self.cols, sumGroup);
                            cols.forEach(function (colItem, j) {
                                keys.push(colItem.title);
                            });
                            key = keys.join('-');
                            // 聚合数据
                            if (self.dataTemp[key]) {
                                for (var rowItem in rowData) {
                                    if (typeof rowData[rowItem] === 'number') {
                                        if (typeof self.dataTemp[key][rowItem] === 'number') {
                                            self.dataTemp[key][rowItem] += rowData[rowItem];
                                        }
                                        else {
                                            self.dataTemp[key][rowItem] = rowData[rowItem];
                                        }
                                    }
                                }
                            }
                            else {
                                self.dataTemp[key] = rowData;
                            }
                            //children.push(rowData);
                            childIndex = 0;
                        });
                        //return children;
                    }
                }
                function createData(conf) {
                    var row = conf.row, col = conf.col, val = conf.val, rowCol, sum, result = {
                        cols: [],
                        data: []
                    };
                    val = cols_getVal(val, conf.cols, { type: 'val' });
                    rowCol = cols_getVal(row, conf.cols);
                    // 构建表头
                    childIndex = 0;
                    result.cols = buildCols(col, val, conf.data);
                    // 获取每列的筛选条件
                    self.colFormula = [];
                    getFormula(result.cols, val);
                    // 获取行数据
                    childIndex = 0;
                    self.dataTemp = {};
                    buildRows(row, val, conf.data, self.colFormula);
                    result.cols = rowCol.concat(result.cols);
                    result.data = [];
                    for (var dataItem in self.dataTemp) {
                        result.data.push(self.dataTemp[dataItem]);
                    }
                    // 添加汇总列
                    if (val.length > 1) {
                        sum = { title: '汇总', name: 'stat_SUM', children: [] };
                        val.forEach(function (item, i) {
                            sum.children.push({ title: item.title + '汇总', name: item.name + '_SUM' });
                        });
                    }
                    else {
                        var name_3 = 'stat_SUM';
                        if (val.length === 1) {
                            name_3 = val[0].name + '_SUM';
                        }
                        sum = { title: '汇总', name: name_3 };
                        /*val.forEach((item, i)=> {
                            sum.push({title: item.title + '汇总', name: item.name+'_SUM'});
                        });*/
                    }
                    result.cols.push(sum);
                    //for(let item)
                    return result;
                }
                // 转换为表格数据格式
                function tableFormat(data) {
                    data.cols = self.multiTable.createThead(data.cols);
                    data.colsIndex = self.cols;
                    data.data = data.data;
                    //data.data = self.multiTable.createTbody(self.cols, data.data);
                    return data;
                }
                function create(conf) {
                    var result = createData(conf);
                    result = tableFormat(result);
                    return result;
                }
                return {
                    create: create
                };
            })(this);
            // 多行表头数据格式化
            this.multiTable = (function (self) {
                var multiRow = [];
                // 计算每列的colspan
                function getColspan(item) {
                    if (item.children) {
                        var children = item.children, childCount = 0;
                        for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                            var child = children_1[_i];
                            childCount += getColspan(child);
                        }
                        return childCount;
                    }
                    else {
                        return 1;
                    }
                }
                // 更新colspan=1的列，计算rowspan
                function updateRowspan(data) {
                    var len = data.length;
                    data.forEach(function (item, row) {
                        item.forEach(function (col, i) {
                            if (col.colspan === 1) {
                                var rowspan = len - row;
                                delete col.colspan;
                                if (rowspan !== 1) {
                                    col.rowspan = rowspan;
                                }
                            }
                        });
                    });
                    return data;
                }
                function initThead(data, result) {
                    if (result === void 0) { result = []; }
                    var rows = [], children = [];
                    //console.log('initThead', data);
                    data.forEach(function (item, i) {
                        var cell = {
                            colspan: getColspan(item)
                        };
                        for (var s in item) {
                            if (item.hasOwnProperty(s)) {
                                if (s === 'children' && item[s]) {
                                    children = children.concat(item[s]);
                                }
                                else {
                                    cell[s] = item[s];
                                }
                            }
                        }
                        rows.push(cell);
                    });
                    result.push(rows);
                    if (children.length === 0) {
                        return result;
                    }
                    else {
                        return initThead(children, result);
                    }
                }
                function createThead(data) {
                    var result = initThead(data);
                    result = updateRowspan(result);
                    return result;
                }
                // 计算每行的rowspan
                function getRowspan(item) {
                    if (item.children) {
                        var children = item.children, childCount = 0;
                        for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {
                            var child = children_2[_i];
                            childCount += getRowspan(child);
                        }
                        return childCount;
                    }
                    else {
                        return 1;
                    }
                }
                function getCell(item) {
                    var cell = {}, rowspan = getRowspan(item);
                    if (rowspan > 1) {
                        cell['rowspan'] = rowspan;
                    }
                    for (var s in item) {
                        if (item.hasOwnProperty(s)) {
                            if (s !== 'children' && item[s]) {
                                cell[s] = item[s];
                            }
                        }
                    }
                    return cell;
                }
                function initTbody(cols, data, parentRow) {
                    if (parentRow === void 0) { parentRow = []; }
                    console.log('initTbody', cols, data);
                    /*if(data[0].children[0].children) {
                        data.forEach((item, i)=> {
                            if(item.children) {
                                let cell = getCell(item);
                                if(i===0) {
                                    let parent = [];
                                    parentRow.forEach((parentItem, i)=>{
                                        parent.push(G.tools.obj.merge({}, parentItem));
                                    });
                                    parent.push(cell);
                                    initTbody(cols, item.children, parent);
                                }
                                else {
                                    initTbody(cols, item.children, [cell]);
                                }
                            }
                        });
                    }
                    else {
                        let parent = [];
                        parentRow.forEach((parentItem)=>{
                            parent.push(G.tools.obj.merge({}, parentItem));
                        });
        
        
                        data.forEach((row, i)=>{
                            let cell = getCell(row),
                                childHead = [...parent, cell];
        
                            /!*console.log('============');
                            console.log('data', data);
                            console.log('row', row);
                            console.log('cell', cell);
                            console.log('parent', parent);
                            console.log('childHead', childHead);*!/
        
                            row.children.forEach((item, j)=>{
                                if(i===0) {
                                    multiRow.push([...childHead, ...item]);
                                }
                                else {
                                    multiRow.push([cell, ...item]);
                                }
                            });
                            parent = [];
                        });
                    }*/
                }
                /*function tbodyFormat(data) {
                    let result = [];
                    data.forEach((item)=>{
                        let colItem = {};
                        item.forEach((cell)=>{
                            colItem[cell.name] = cell.title;
                        });
                        result.push(colItem);
                    });
                    return result;
                }*/
                function createTbody(cols, data) {
                    multiRow = [];
                    initTbody(cols, data);
                    //multiRow = tbodyFormat(multiRow);
                    return multiRow;
                }
                return {
                    createThead: createThead,
                    createTbody: createTbody
                };
            })(this);
            this.abcFunc = (function (self) {
                // 构造field
                function createField(val, cols, classify) {
                    var result = [];
                    function doFor(name, cb) {
                        for (var _i = 0, cols_2 = cols; _i < cols_2.length; _i++) {
                            var item = cols_2[_i];
                            if (name === item.name) {
                                var title = item.title;
                                cb.call(this, title);
                            }
                        }
                    }
                    doFor(classify, function (title) {
                        result.push({ title: title + "\u7C7B", name: 'classify' });
                        result.push({ title: title + "\u9879\u6570", name: 'group' });
                        result.push({ title: title + "\u5360\u6BD4", name: 'ratio' });
                    });
                    doFor(val, function (title) {
                        result.push({ title: title + "\u603B\u4EF7\u5360\u6BD4", name: 'total_ratio' });
                        result.push({ title: title + "\u603B\u4EF7\u5747\u503C", name: 'total_avg' });
                    });
                    return result;
                }
                // 构造data
                function createData(conf) {
                    var classify = conf.classify, val = conf.val, a = conf.a, b = conf.b, cols = conf.cols, data = conf.data, total = 0, // 总价
                    count = 0, // 总项数
                    rowIndex = 0, valIndex = 0, currentRatio = 0, // 当前占比指针
                    arr = [], result = [
                        { classify: 'A类', group: 0, ratio: 0, total_ratio: 0, total_avg: 0 },
                        { classify: 'B类', group: 0, ratio: 0, total_ratio: 0, total_avg: 0 },
                        { classify: 'C类', group: 0, ratio: 0, total_ratio: 0, total_avg: 0 }
                    ];
                    // 提取目标列数据
                    data.forEach(function (item, i) {
                        arr.push([item[classify], item[val]]);
                        total += item[val];
                        count++;
                    });
                    // 降序排序
                    arr.sort(function (a, b) {
                        return b[1] - a[1];
                    });
                    // 计算[累计占比]
                    arr.forEach(function (item, i) {
                        var index = 2; //C类索引
                        currentRatio += (item[1] / total) * 100;
                        currentRatio < a && (index = 0); // A类索引
                        currentRatio >= a && currentRatio < b && (index = 1); // B类索引
                        result[index].group = result[index].group + 1; // 项数
                        result[index].total_ratio = currentRatio; // 总价占比
                        result[index].total_avg = result[index].total_avg + item[1]; // 累计总价
                    });
                    // 由[累计占比]计算[总价占比]
                    result[2].total_ratio = (result[2].total_ratio - parseFloat(result[1].total_ratio)).toFixed(2) + '%';
                    result[1].total_ratio = (result[1].total_ratio - parseFloat(result[0].total_ratio)).toFixed(2) + '%';
                    result[0].total_ratio = result[0].total_ratio.toFixed(1) + '%';
                    result.forEach(function (item, i) {
                        // 由[累计总价]计算[总价均值]
                        result[i].total_avg = (result[i].total_avg / result[i].group).toFixed(2);
                        result[i].total_avg === 'NaN' && (result[i].total_avg = 0);
                        // 计算[项数占比]
                        result[i].ratio = ((result[i].group / count) * 100).toFixed(2) + '%';
                    });
                    return result;
                }
                function create(conf) {
                    var result = {
                        cols: createField(conf.val, conf.cols, conf.classify),
                        data: createData(conf)
                    };
                    return result;
                }
                return {
                    create: create
                };
            })(this);
        }
        // 交叉表
        Statistic.prototype.crossTab = function (args) {
            var self = this, conf, defaultConf = {
                colsSum: false,
                col: [],
                row: [],
                val: [],
                cols: [],
                data: [] // 表格数据
            };
            conf = Object.assign({}, defaultConf, args);
            return self.crossFunc.create(conf);
        };
        // abc制表
        Statistic.prototype.abc = function (args) {
            var self = this, conf, defaultConf = {
                row: [],
                val: [],
                a: 65,
                b: 85,
                cols: [],
                data: []
            };
            conf = G.tools.obj.merge(defaultConf, args);
            return self.abcFunc.create(conf);
        };
        Statistic.crossTable = (function () {
            /*let getData = (col: ITableCol[], conf: BT_cross) => {
                let result = [];
                for(let item of col){
    
                }
                return [];
            };*/
            return {
                init: function (para) {
                    var result = {
                        cols: null,
                        data: null
                    }, defaultConf = {
                        colsSum: false,
                        col: [],
                        row: [],
                        val: [],
                        cols: [],
                        data: [],
                        isFixed: false,
                    };
                    var config = Object.assign({}, defaultConf, para);
                    // result.data = getData(TableBase.getDataCol(result.cols), conf);
                    return new Promise(function (resolve, reject) {
                        if ('Worker' in window) {
                            var worker_1 = new Worker(G.requireBaseUrl + 'statisticWorker.js');
                            var loading_2 = new loading_1.Loading({});
                            loading_2.show();
                            worker_1.postMessage({
                                type: "cols",
                                data: {
                                    config: config,
                                }
                            });
                            worker_1.onmessage = function (ev) {
                                if (ev.data.type === 'cols') {
                                    result.cols = ev.data.result;
                                    worker_1.postMessage({
                                        type: "data",
                                        data: {
                                            cols: TableBase_1.TableBase.getDataCol(result.cols),
                                            config: config,
                                        }
                                    });
                                }
                                else if (ev.data.type === 'data') {
                                    result.data = ev.data.result;
                                    resolve(result);
                                    worker_1.terminate();
                                    worker_1 = null;
                                    loading_2.hide();
                                }
                            };
                        }
                        else {
                            reject('您的设备暂时不支持交叉制表');
                        }
                    });
                }
            };
        })();
        /**
         *_dataFilter 数据过滤-数据类型只能是数组，内容只能是数字
         * sum: 合计值
         * avg: 平均值
         * max: 最大值
         * min: 最小值
         * stDev: 标准差
         * null: 空值数
         * percent:百分比
         * groupPercent:组内百分比
         */
        Statistic.math = {
            _dataFilter: function (data) {
                if (!Array.isArray(data)) {
                    return false;
                }
                var length = data.length;
                for (var i = 0; i < length; i++) {
                    if (data[i] === "" || isNaN(data[i]) || data[i] === null) {
                        data.splice(i, 1);
                        i = i - 1;
                        length = length - 1;
                    }
                    else {
                        data[i] = Number(data[i]);
                    }
                }
                if (data.length === 0) {
                    data[0] = 0;
                }
                return data;
            },
            sum: function (data) {
                data = Statistic.math._dataFilter(data);
                if (data === false) {
                    return false;
                }
                var result = 0;
                var length = data.length;
                for (var i = 0; i < length; i++) {
                    result += data[i];
                }
                return result;
            },
            avg: function (data) {
                data = Statistic.math._dataFilter(data);
                if (data === false) {
                    return false;
                }
                var length = data.length;
                return Statistic.math.sum(data) / length;
            },
            max: function (data) {
                data = Statistic.math._dataFilter(data);
                if (!data) {
                    return false;
                }
                return Math.max.apply(Math, data);
            },
            min: function (data) {
                data = Statistic.math._dataFilter(data);
                if (!data) {
                    return false;
                }
                return Math.min.apply(Math, data);
            },
            stDev: function (data) {
                data = Statistic.math._dataFilter(data);
                if (data === false) {
                    return false;
                }
                var length = data.length;
                var temp = new Array(length);
                for (var i = 0; i < length; i++) {
                    var dev = data[i] - Statistic.math.avg(data);
                    temp[i] = Math.pow(dev, 2);
                }
                var powSum = Statistic.math.sum(temp);
                return Math.sqrt(powSum / length);
            },
            nullCount: function (data) {
                if (!Array.isArray(data)) {
                    return false;
                }
                var count = 0;
                for (var i = 0; i < data.length; i++) {
                    if (data[i] === "" || isNaN(data[i]) || data[i] === null) {
                        count++;
                    }
                }
                return count;
            },
            percent: function (data, sum) {
                data = Statistic.math._dataFilter(data);
                if (data === false) {
                    return false;
                }
                var total = Statistic.math.sum(data);
                return total / sum;
            },
            groupPercent: function (data) {
                data = Statistic.math._dataFilter(data);
                if (!data) {
                    return false;
                }
            }
        };
        return Statistic;
    }());
    exports.Statistic = Statistic;
});

define("Validate", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var errMsgs = {
        number: '{{title}}必须是数字',
        maxLength: '{{title}}的最大长度不超过{{value}}',
        maxValue: '{{title}}超过最大值{{value}}或者为非数字',
        minLength: '{{title}}小于最小长度{{value}}或者为非字符串',
        minValue: '{{title}}小于最小值{{value}}或者为非数字',
        requieredFlag: '{{title}}为空',
        regExp: '{{title}}匹配正则规则{{value}}'
    };
    var strategies = {
        maxLength: function (data, value) {
            if (value === 0) {
                return true;
            }
            return typeof data == "string" ? !(data.length > value) : true;
        },
        maxValue: function (data, value) {
            return typeof data == "number" ? data < value : true;
        },
        minLength: function (data, value) {
            if (value === 0) {
                return true;
            }
            return typeof data == "string" ? !(data.length < value) : true;
        },
        minValue: function (data, value) {
            return typeof data == "number" ? !(data < value) : true;
        },
        requieredFlag: function (data, value) {
            return value ? (data !== null && data !== undefined && data !== "") : true;
        },
        regExp: function (data, value) {
            return data.match(new RegExp(value)) != null;
        },
        number: function (data, value) {
            if (data === "") {
                return false;
            }
            else {
                return !isNaN(data);
            }
        }
    };
    var Validate = /** @class */ (function () {
        function Validate() {
            this.name2Rules = {};
        }
        Validate.prototype.add = function (dataName, rules) {
            this.name2Rules[dataName] = rules;
        };
        Validate.prototype.get = function (dataName) {
            return this.name2Rules[dataName];
        };
        Validate.prototype.start = function (data) {
            var result = null;
            for (var name_1 in this.name2Rules) {
                var rules = this.name2Rules[name_1];
                for (var _i = 0, rules_1 = rules; _i < rules_1.length; _i++) {
                    var r = rules_1[_i];
                    if (data[name_1] !== undefined || r.rule === 'requieredFlag') {
                        if (!strategies[r.rule](data[name_1], r.value)) {
                            var err = r.errMsg ? r.errMsg : errMsgs[r.rule];
                            err = G.tools.str.parseTpl(err, {
                                title: r.title,
                                value: r.value
                            });
                            if (result === null) {
                                result = {};
                            }
                            result[name_1] = {
                                errMsg: err,
                                rule: r.rule
                            };
                            break;
                        }
                    }
                }
            }
            return result;
        };
        return Validate;
    }());
    exports.Validate = Validate;
});

define("BwWebsocket", ["require", "exports", "Modal"], function (require, exports, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BwWebsocket = /** @class */ (function () {
        function BwWebsocket(para) {
            var _this = this;
            if ('WebSocket' in window) {
                this.ws = new WebSocket(para.url);
            }
            else {
                Modal_1.Modal.toast('您的浏览器不支持websocket.');
                return;
            }
            this.ws.onopen = function () {
                para.onOpen;
                _this.ws.send(para.sendData);
            };
            this.ws.onmessage = para.onMessage;
            this.ws.onclose = para.onClose;
            this.ws.onerror = para.onError;
        }
        return BwWebsocket;
    }());
    exports.BwWebsocket = BwWebsocket;
});

define("BDMap", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var BDMap = /** @class */ (function () {
        function BDMap(para) {
            var _this = this;
            this.requireBMap().then(function (map) {
                _this.map = new map.Map(para.container);
                if (!para.position) {
                    para.position = [119.173392, 26.071787];
                }
                _this.init(para);
                _this.addOverlay({
                    lng: para.position[0],
                    lat: para.position[1],
                });
            });
        }
        BDMap.prototype.requireBMap = function () {
            return new Promise((function (resolve) {
                return require(['async!BMap'], function () {
                    resolve(BMap);
                });
            }));
        };
        BDMap.prototype.init = function (para) {
            var map = this.map, point = new BMap.Point(para.position[0], para.position[1]); // 中心点
            map.centerAndZoom(point, 15); // 设初始化地图
            this.scroll = para.scroll; // 开启滚轮放大缩小
            this.mapClick = para.mapClick; // 点击事件
        };
        BDMap.prototype.search = function (value) {
            var localSearch = new BMap.LocalSearch(this.map, {
                renderOptions: {
                    map: this.map
                }
            });
            localSearch.search(value);
        };
        BDMap.prototype.panTo = function (point) {
            point = new BMap.Point(point.lng, point.lat); // 中心点
            this.map.panTo(point);
        };
        // 生成新标注
        BDMap.prototype.addOverlay = function (point) {
            point = new BMap.Point(point.lng, point.lat); // 中心点
            this.marker = new BMap.Marker(point);
            this.map.addOverlay(this.marker);
            this.map.panTo(point);
        };
        BDMap.prototype.surroundingPois = function (point) {
            point = point || this.getPosition() || this.map.getCenter();
            return BDMap.getSurroundingPois(point);
        };
        BDMap.prototype.getPosition = function () {
            return this.marker && this.marker.getPosition();
        };
        // 清空标注
        BDMap.prototype.clearOverlays = function () {
            this.map.clearOverlays();
        };
        Object.defineProperty(BDMap.prototype, "mapClick", {
            set: function (click) {
                this._click = click;
                if (this._click) {
                    this.map.removeEventListener('click', this._click);
                }
                if (!click || typeof click !== 'function') {
                    return;
                }
                this.map.addEventListener('click', this._click);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BDMap.prototype, "scroll", {
            get: function () {
                return this._scroll;
            },
            set: function (scroll) {
                scroll = !!scroll;
                this._scroll = scroll;
                if (scroll) {
                    this.map.enableScrollWheelZoom();
                }
                else {
                    this.map.disableScrollWheelZoom();
                }
            },
            enumerable: true,
            configurable: true
        });
        BDMap.getSurroundingPois = function (point) {
            return new Promise(function (resolve, reject) {
                require(['async!BMap'], function () {
                    var myGeo = new BMap.Geocoder();
                    var p = new BMap.Point(point.lng, point.lat);
                    myGeo.getLocation(p, function (address) {
                        resolve(address);
                    });
                });
            });
        };
        return BDMap;
    }());
    exports.BDMap = BDMap;
});

define("Affix", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Affix"/>
    var tools = G.tools;
    var d = G.d;
    var Affix = /** @class */ (function () {
        function Affix(para) {
            this.initPos = (function (self) {
                var conf, marTop = 0;
                var init = function () {
                    var relativePar = self.getRelativeParent(self.conf.el);
                    marTop === 0 && (marTop = relativePar.getBoundingClientRect().top - self.conf.target.getBoundingClientRect().top);
                    conf = self.conf;
                };
                var setNewPos = function () {
                    var elTop;
                    if (conf.offsetTop >= 0) {
                        elTop = conf.target.scrollTop + conf.offsetTop;
                    }
                    else {
                        elTop = conf.target.scrollTop + conf.target.offsetHeight - marTop - conf.el.offsetHeight - conf.offsetBottom;
                    }
                    conf.el.style.top = elTop + 'px';
                };
                return { init: init, setNewPos: setNewPos };
            })(this);
            var defaultConf = {
                el: document.body,
                target: document.body,
                offsetBottom: 0,
                onChange: function () {
                }
            };
            this.conf = tools.obj.merge(defaultConf, para); //如果offsetBottom和offsetTop都没传 默认固定在最底部
            this.initStyle();
            this.initEvent();
        }
        Affix.prototype.initStyle = function () {
            var elStyle = this.conf.el.style;
            elStyle.position = 'absolute';
            elStyle.zIndex = '999';
            this.initPos.init();
            this.initPos.setNewPos();
        };
        Affix.prototype.initEvent = function () {
            var _this = this;
            //target大小变化调整事件
            var resizeEvent = function () {
                var element = _this.conf.target;
                var lastWidth = element.offsetWidth;
                var lastHeight = element.offsetHeight;
                var lastInner = element.innerHTML;
                setInterval(function () {
                    if (lastInner !== element.innerHTML) {
                        _this.initPos.setNewPos();
                        lastInner = element.innerHTML;
                    }
                    if (lastWidth === element.offsetWidth && lastHeight === element.offsetHeight) {
                        return;
                    }
                    _this.initPos.setNewPos();
                    lastWidth = element.offsetWidth;
                    lastHeight = element.offsetHeight;
                }, 100);
            };
            //滚动事件
            d.on(this.conf.target, 'scroll', function () {
                _this.initPos.setNewPos();
            });
            d.on(window, 'resize', function () {
                _this.initPos.init();
            });
            resizeEvent();
        };
        Affix.prototype.getRelativeParent = function (el) {
            var elPar = el.parentNode;
            if (window.getComputedStyle(elPar, null).position !== 'static') {
                return elPar;
            }
            else {
                return this.getRelativeParent(elPar);
            }
        };
        return Affix;
    }());
    exports.Affix = Affix;
});

define("DataManager", ["require", "exports", "Pagination", "Loading"], function (require, exports, pagination_1, loading_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var DataManager = /** @class */ (function () {
        function DataManager(para) {
            var _this = this;
            this.sortState = null;
            this._loading = null;
            this._pagination = null;
            this._ajaxData = {};
            this._data = [];
            // debugger;
            this.init(para);
            this.ajax = para.ajax;
            this._ajaxData = para.ajax ? para.ajax.ajaxData : null;
            // this.ftable = para.ftable;
            this.loadingConf = para.loading;
            this.pageConf = para.page;
            this.render = function (start, length, isRefresh) {
                tools.isFunction(para.render) && para.render(start, length, isRefresh);
            };
            this._serverMode = para.ajax && !para.ajax.once;
            if (Array.isArray(para.data)) {
                this.data = para.data;
            }
            // 没有ajax 或者 有ajax并且自动加载时
            if (!this.ajax || this.ajax.auto) {
                this.pageConf ?
                    this.pagination.next() :
                    this.dataFetch(true).then(function () {
                        _this.render(0, _this.data.length);
                    });
            }
        }
        Object.defineProperty(DataManager.prototype, "serverMode", {
            get: function () {
                return this._serverMode;
            },
            enumerable: true,
            configurable: true
        });
        DataManager.prototype.init = function (para) {
        };
        // 数据获取方法
        DataManager.prototype.dataFetch = function (isRefresh) {
            var _this = this;
            if (isRefresh === void 0) { isRefresh = false; }
            var current = this.current, ajax = this.ajax, once = ajax && ajax.once, fun = ajax && ajax.fun, pageSize = once ? -1 : this.pageSize, isSetData = isRefresh || this._serverMode && !tools.isMb; // 是否重新设置本地数据
            var promise;
            if (tools.isNotEmpty(ajax) && (isRefresh || (!once || tools.isEmpty(this.data)))) {
                // pc端和刷新时, 开启加载框, 或者没有分页时
                // let hasLoading = tools.isNotEmpty(this.loadingConf) && (!tools.isMb || isRefresh || !this.pagination);
                // let loading = hasLoading ? new Loading(this.loadingConf) : null;
                this.loadingShow(isRefresh);
                var sort_1 = this._serverMode ? this.sortState : null, custom_1 = this.ajaxData;
                promise = new Promise(function (resolve, reject) {
                    fun({ current: current, pageSize: pageSize, isRefresh: isRefresh, sort: sort_1, custom: custom_1 })
                        .then(function (_a) {
                        var data = _a.data, total = _a.total;
                        if (isSetData) {
                            _this.data = data;
                        }
                        else {
                            _this.dataAdd(data);
                        }
                        resolve(total);
                    })
                        .catch(function () {
                        reject();
                    })
                        .finally(function () {
                        _this.loadingHide();
                        // loading && loading.destroy();
                        // loading = null;
                    });
                });
            }
            else {
                promise = Promise.resolve(this.data.length);
            }
            return promise;
        };
        DataManager.prototype.loadingShow = function (isRefresh) {
            if (tools.isNotEmpty(this.loadingConf) && (!tools.isMb || isRefresh || !this.pagination)) {
                if (this._loading === null) {
                    this._loading = new loading_1.Loading(this.loadingConf);
                }
                this._loading.show();
            }
        };
        DataManager.prototype.loadingHide = function () {
            this._loading && this._loading.destroy();
            this._loading = null;
        };
        Object.defineProperty(DataManager.prototype, "pagination", {
            get: function () {
                var _this = this;
                if (this.pageConf && !this._pagination) {
                    var mainWrapper = this.pageConf.container, isPulldownRefresh = this.pageConf.isPulldownRefresh || false;
                    mainWrapper.classList.add('paging-content');
                    this._pagination = new pagination_1.Pagination({
                        container: mainWrapper,
                        pageSize: this.pageSize,
                        pageOptions: this.pageConf.options,
                        scroll: tools.isMb ? {
                            scrollEl: mainWrapper,
                            isPulldownRefresh: isPulldownRefresh,
                            auto: true,
                            // loadingText?: string,
                            nomoreText: '没有更多数据了',
                        } : null,
                        onChange: function (_a) {
                            var current = _a.current, pageSize = _a.pageSize, isRefresh = _a.isRefresh;
                            return _this.dataFetch(isRefresh)
                                .then(function (total) {
                                // console.log({current, pageSize, isRefresh, total});
                                var dataArr = _this.data;
                                // 是否创建分页
                                if (tools.isMb || _this._serverMode) { // 移动端或者服务端模式, 都是全部渲染
                                    _this.pagination.total = total;
                                    _this.render(0, (current + 1) * pageSize, isRefresh);
                                }
                                else {
                                    isRefresh && (_this.pagination.total = total);
                                    _this.render(current * pageSize, pageSize, isRefresh);
                                }
                                // console.log(this.data);
                            }).catch(function (e) {
                                console.log(e);
                                typeof _this.onError === 'function' && _this.onError();
                            });
                        }
                    });
                }
                return this._pagination;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataManager.prototype, "disabled", {
            get: function () {
                return this.pagination && this.pagination.disabled;
            },
            set: function (frag) {
                this.pagination && (this.pagination.disabled = frag);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataManager.prototype, "total", {
            set: function (num) {
                this.pagination && (this.pagination.total = num);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataManager.prototype, "ajaxData", {
            get: function () {
                return this._ajaxData || {};
            },
            enumerable: true,
            configurable: true
        });
        DataManager.prototype.refresh = function (ajaxData) {
            var _this = this;
            this._ajaxData = ajaxData || this._ajaxData;
            return this.pagination ?
                this.pagination.refresh() :
                this.dataFetch(true).then(function () {
                    _this.render(0, _this.pageSize === -1 ? _this.data.length : _this.pageSize);
                }).catch(function () {
                    typeof _this.onError === 'function' && _this.onError();
                });
        };
        Object.defineProperty(DataManager.prototype, "current", {
            get: function () {
                return this._pagination ? this.pagination.current : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(DataManager.prototype, "pageSize", {
            get: function () {
                return this._pagination ? this.pagination.pageSize : this.pageConf && this.pageConf.size || -1;
            },
            enumerable: true,
            configurable: true
        });
        DataManager.prototype.dataAdd = function (dataArr) {
            if (!Array.isArray(dataArr)) {
                return;
            }
            this._data = this._data || [];
            this._data = this._data.concat(dataArr);
        };
        Object.defineProperty(DataManager.prototype, "data", {
            get: function () {
                return this._data.slice();
            },
            set: function (dataArr) {
                if (!Array.isArray(dataArr)) {
                    return;
                }
                this._data = dataArr;
            },
            enumerable: true,
            configurable: true
        });
        DataManager.prototype.destroy = function () {
            this._data = [];
            this.render = null;
            this.loadingConf = null;
            this._pagination.destroy();
            this._ajaxData = null;
            this._pagination = null;
        };
        return DataManager;
    }());
    exports.DataManager = DataManager;
});

define("FastBtnTable", ["require", "exports", "FastTable", "Button", "InputBox", "Popover", "Modal", "TextInput", "DropDown", "SelectBox", "Spinner"], function (require, exports, FastTable_1, Button_1, InputBox_1, popover_1, Modal_1, text_1, dropdown_1, selectBox_1, spinner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var FastBtnTable = /** @class */ (function (_super) {
        __extends(FastBtnTable, _super);
        function FastBtnTable(para) {
            var _this = _super.call(this, para) || this;
            _this.exportTitle = '';
            _this.modals = [];
            // 创建本地查找模态框
            _this.search = (function () {
                var self = _this, prevKey = '', index = 0, input = null, prevCell = null, cells = null;
                // 初始化本地查找框中body内容
                function initBody() {
                    var container = h("div", { className: "search-group" }), inputGroup = h("div", { className: "modal-input-group" }), btnGroup = h("div", { className: "modal-btn-group" }), inputBox = new InputBox_1.InputBox({
                        container: btnGroup
                    });
                    d.append(container, inputGroup);
                    d.append(container, btnGroup);
                    input = new text_1.TextInput({
                        container: inputGroup,
                        placeholder: '请输入要查找的内容...',
                    });
                    var prev = new Button_1.Button({
                        content: '查找上一个',
                        isDisabled: false,
                        onClick: function () {
                            var key = input.get();
                            if (tools.isNotEmpty(key)) {
                                if (key !== prevKey) {
                                    prevKey = key;
                                    index = 0;
                                    findCellByKey(key);
                                }
                                else {
                                    index--;
                                    if (index === -1) {
                                        index = cells.length - 1;
                                    }
                                }
                                cellScrollIntoView();
                            }
                        }
                    });
                    var next = new Button_1.Button({
                        content: '查找下一个',
                        onClick: function () {
                            var key = input.get();
                            if (tools.isNotEmpty(key)) {
                                if (key !== prevKey) {
                                    prevKey = key;
                                    index = 0;
                                    removeHighLightTag();
                                    findCellByKey(key);
                                }
                                else {
                                    index++;
                                    if (index === cells.length) {
                                        index = 0;
                                    }
                                }
                                cellScrollIntoView();
                            }
                        }
                    });
                    inputBox.addItem(prev);
                    inputBox.addItem(next);
                    /*if(self.editing){
                        let reInputWrapper = <div className="modal-input-group"/>,
                            reInput = new TextInput({
                                container: reInputWrapper,
                                placeholder: '请输入替换的内容',
                            });
                        let replace = new Button({
                            content: '替换',
                            onClick: () => {
                                let search = input.get(),
                                    replace = reInput.get();
                                if(tools.isNotEmpty(search)) {
                                    replaceContent(search, replace);
                                }
                            }
                        });
                        let replaceAll = new Button({
                            content: '全部替换',
                            onClick: () => {
                                let search = input.get(),
                                    replace = reInput.get();
                                if(tools.isNotEmpty(search)) {
                                    replaceContent(search, replace, true);
                                }
                            }
                        });
                        inputBox.addItem(replace);
                        inputBox.addItem(replaceAll);
                        d.after(inputGroup, reInputWrapper);
                    }*/
                    return container;
                }
                /*function replaceContent(search: string, replace: string, isAll = false){
                    if(self.editing){
                        findCellByKey(search);
                        cellScrollIntoView();
                        let replaceCells = [cells[0]];
                        if(isAll){
                            replaceCells = cells;
                        }
                        removeHighLightTag();
                    }else{
                        Modal.toast('请点击编辑再进行替换');
                    }
                }*/
                // 按下按钮，跳转至对应可视区中
                function cellScrollIntoView() {
                    prevCell && prevCell.wrapper.classList.remove('searched');
                    var cell = cells[index];
                    prevCell = cell;
                    if (cell) {
                        var td = cell.wrapper;
                        td.classList.add('searched');
                        d.queryAll(".main-table table", self.wrapper).forEach(function (el) {
                            el.style.transform = "translateX(" + 0 + "px) translateZ(0)";
                        });
                        d.query(".scroll-container", self.wrapper).scrollLeft = 0;
                        if ('scrollIntoViewIfNeeded' in td) {
                            td.scrollIntoViewIfNeeded(false);
                        }
                        else {
                            td.scrollIntoView(false);
                        }
                    }
                }
                // 删除高亮显示
                function removeHighLightTag() {
                    cells && cells.forEach(function (cell) {
                        cell.highLight = null;
                    });
                }
                // 查找对应内容，给予高亮显示
                function findCellByKey(str) {
                    removeHighLightTag();
                    cells = [];
                    self.rows.forEach(function (row) {
                        row.cells.forEach(function (cell) {
                            if (cell.text.toUpperCase().indexOf(str.toUpperCase()) > -1) {
                                cell.highLight = str;
                                cells.push(cell);
                            }
                        });
                    });
                }
                return {
                    findCellByKey: findCellByKey,
                    removeHighLightTag: removeHighLightTag,
                    init: function () {
                        var modal = new Modal_1.Modal({
                            className: 'search-replace',
                            isBackground: false,
                            header: self.editing ? '查找/替换' : '查找',
                            body: initBody(),
                            isShow: true,
                            isOnceDestroy: true,
                            onClose: function () {
                                input.set('');
                                prevKey = '';
                                prevCell && prevCell.wrapper.classList.remove('searched');
                                prevCell = null;
                                removeHighLightTag();
                                var index = _this.modals.indexOf(modal);
                                if (index > -1) {
                                    _this.modals.splice(index, 1);
                                }
                            }
                        });
                        _this.modals.push(modal);
                    }
                };
            })();
            _this.dataTools = (function () {
                return {
                    getColCounts: function () {
                        return Object.assign({}, _this.mainTable.tableData.getColCounts(), tools.isEmpty(_this.leftTable) ? {} : _this.leftTable.tableData.getColCounts());
                    },
                    getCols: function () {
                        var cols = [];
                        _this.columns.forEach(function (col) {
                            if (col.show && !col.isVirtual) {
                                cols.push({
                                    name: col.name,
                                    title: col.title,
                                    isNumber: col.isNumber,
                                    content: col.content,
                                });
                            }
                        });
                        return cols;
                    }
                };
            })();
            /**
             * 添加一个新的按钮
             * @param {string} name - 按钮名
             * @param {IButton} btn - 外部按钮
             * @param {number} index - 插入位置
             */
            _this.btnNameGroup = [];
            _this.exportTitle = para.exportTitle || '';
            if (tools.isNotEmpty(para.btn)) {
                _this.isReplaceTable = tools.isEmpty(para.btn.isReplaceTable) ? false : para.btn.isReplaceTable;
                _this.isButton = (tools.isEmpty(para.btn.type) ? 'button' : para.btn.type) === 'button';
                if (_this.isButton) {
                    _this.inputBox = new InputBox_1.InputBox({
                        container: _this.btnWrapper,
                        className: 'fast-table-statistic-btns'
                    });
                    // d.classAdd(this.wrapper, 'has-top-btn');
                }
                else {
                    _this.popover = new popover_1.Popover({
                        items: [],
                        target: para.btn.target,
                        position: "down",
                        isWatch: true
                    });
                }
                if (_this.isReplaceTable && !tools.isMb) {
                    var parent_1 = d.closest(_this.wrapper, '.panel.panel-white');
                    var isFirst_1 = true;
                    d.on(parent_1, 'click', 'a.statistics-chart', function (ev) {
                        ev.preventDefault();
                        ev.stopPropagation();
                        if (isFirst_1) {
                            _this.spinner = new spinner_1.Spinner({
                                el: d.query('a.statistics-chart', parent_1),
                                type: 1,
                            });
                            _this.spinner.show();
                            isFirst_1 = false;
                        }
                        _this.statistic('chart');
                    });
                }
                tools.toArray(para.btn.name).forEach(function (name) {
                    name && _this.btnAdd(name);
                });
            }
            window['f'] = _this;
            return _this;
        }
        FastBtnTable.prototype.wrapperInit = function () {
            var wrapper = _super.prototype.wrapperInit.call(this);
            this.btnWrapper = h("div", { className: 'fast-table-btns' });
            d.prepend(wrapper, this.btnWrapper);
            return wrapper;
        };
        FastBtnTable.prototype.initSearch = function () {
            var _this = this;
            if (this.isButton) {
                return new Button_1.Button({
                    type: 'default',
                    icon: 'wangyuanjing',
                    content: '本地查找',
                    onClick: function () {
                        _this.search.init();
                    },
                });
            }
            else {
                var prevValue_1 = '';
                var input_1 = h("input", { type: "text", placeholder: "\u8BF7\u8F93\u5165...", className: "mui-input-clear mui-input", autocapitalize: "off", autocorrect: "off" });
                var searchEl = h("div", { className: "search-input mui-input-row" },
                    h("label", null,
                        h("span", { className: "mui-icon mui-icon-search grey" })));
                d.append(searchEl, input_1);
                d.append(this.btnWrapper, searchEl);
                d.classAdd(this.wrapper, 'has-top-search');
                d.on(input_1, 'blur', function () {
                    var val = input_1.value;
                    if (val !== prevValue_1) {
                        prevValue_1 = val;
                        if (tools.isEmpty(val)) {
                            _this.search.removeHighLightTag();
                            _this.filter.clear();
                        }
                        else {
                            var params = {
                                op: 9,
                                field: 0,
                                not: false,
                                values: [val],
                            };
                            _this.filter.set([params]);
                            _this.search.findCellByKey(val);
                        }
                    }
                });
                d.on(input_1, 'keyup', function (ev) {
                    if (ev.keyCode === 13) {
                        input_1.blur();
                    }
                });
            }
        };
        /* private initFilter(){
             return new Button({
                 type: 'default',
                 icon: 'sousuo',
                 content: '本地过滤',
                 onClick: () => {
                 },
             });
         }
     
         protected filter(){
     
             let show = (() => {
     
                 let modal:Modal = null,
                     builder = null;
     
                 let searchHandler = () => {
                     // search();
                     modal.isShow = false;
                 };
     
                 let showOriginTable = () => {
     
                 };
     
                 let init = () => {
                     if(builder === null) {
                         let body = tools.isMb ?
                             <div className="mui-content">
                                 <ul className="mui-table-view" data-query-name="local"></ul>
                                 <div data-action="add" data-name="local" className="mui-btn mui-btn-block mui-btn-primary">
                                     <span className="mui-icon mui-icon-plusempty"></span> 添加条件
                                 </div>
                             </div>
                             :
                             <form className="filter-form" data-query-name="local">
                                 <span data-action="add" className="iconfont blue icon-jiahao"></span>
                             </form>;
     
                         modal = new Modal({
                             container: d.closest(this.wrapper, '.page-container'),
                             header: '本地过滤',
                             body: body,
                             position: tools.isMb ? 'full' : '',
                             width: '730px',
                             isShow: true,
                         });
                         modal.className = 'local';
                         modal.className = 'queryBuilder';
     
                         if(tools.isMb){
                             modal.className = 'modal-mobile';
     
                             modal.modalHeader.rightPanel = (()=>{
                                 let rightInputBox = new InputBox(),
                                     clearBtn = new Button({
                                         content: '清除',
                                         onClick: () => {
                                             showOriginTable();
                                             modal.isShow = false;
                                         }
                                     }),
                                     saveBtn = new Button({
                                         icon: 'sousuo',
                                         onClick:searchHandler
                                     });
                                 rightInputBox.addItem(clearBtn);
                                 rightInputBox.addItem(saveBtn);
                                 return rightInputBox;
                             })();
     
                             mui(body).on('tap', '[data-action="add"]', function () {
                                 builder.rowAdd();
     
                                 let ul = (this as HTMLElement).previousElementSibling;
                                 ul.scrollTop = ul.scrollHeight;
     
                             });
                         } else {
     
                             modal.footer = {
                                 rightPanel: (() => {
                                     let rightBox = new InputBox();
                                     rightBox.addItem(new Button({
                                         content: '取消',
                                         type: 'default',
                                         key: 'cancelBtn'
                                     }));
                                     rightBox.addItem(new Button({
                                         content: '清除',
                                         type: 'default',
                                         key: 'clearBtn',
                                         onClick: () => {
                                             showOriginTable();
                                             modal.isShow = false;
                                         }
                                     }));
                                     rightBox.addItem(new Button({
                                         content: '查询',
                                         type: 'primary',
                                         onClick: searchHandler,
                                         key: 'queryBtn'
                                     }));
     
                                     return rightBox;
                                 })()
                             }
                         }
     
                         builder = new QueryBuilder({
                             queryConfigs: initQueryConfigs(this.dataTools.getCols()), // 查询字段名、值等一些配置，后台数据直接传入
                             resultDom: tools.isMb ? d.query('ul.mui-table-view', body) : body, // 查询条件容器
                             setting: null  // 默认值
                         });
     
                     }
     
                     function initQueryConfigs(cols: R_Field[]): QueryConf[] {
                         return cols.map(col => {
                             return {
                                 caption: col.title,
                                 field_name: col.name,
                                 dynamic: 0,
                                 link: '',
                                 type: '',
                                 atrrs: col.atrrs
                             }
                         });
                     }
                 };
     
                 return () => {
                     init();
                 }
             })();
         }*/
        FastBtnTable.prototype.initStatistic = function () {
            var _this = this;
            if (this.isButton) {
                var btn = new Button_1.Button({
                    type: 'default',
                    icon: 'tongji',
                    content: '统计',
                });
                var exportStaBut = [
                    {
                        content: '列统计',
                        icon: 'pinlei',
                        type: 'default',
                        onClick: function () { return _this.statistic('count'); },
                    },
                    {
                        content: '数据统计',
                        icon: 'statistic',
                        type: 'default',
                        onClick: function () { return _this.statistic('statistic'); },
                    },
                    {
                        content: '图形报表',
                        icon: 'bingzhuangtu',
                        type: 'default',
                        onClick: function () { return _this.statistic('chart'); },
                    },
                    {
                        content: '交叉制表',
                        icon: 'shejiqijiaohuanxinglie',
                        type: 'default',
                        onClick: function () { return _this.statistic('crosstab'); },
                    },
                    {
                        content: 'abc分析',
                        icon: 'tongji',
                        type: 'default',
                        onClick: function () { return _this.statistic('analysis'); },
                    }
                ];
                btn.dropDown = new dropdown_1.DropDown({
                    el: btn.wrapper,
                    inline: false,
                    data: [],
                    multi: null,
                    className: "input-box-morebtn"
                });
                for (var i = 0, l = exportStaBut.length; i < l; i++) {
                    btn.dropDown.getUlDom().appendChild(new Button_1.Button(exportStaBut[i]).wrapper);
                }
                return btn;
            }
            else {
                var data_1 = [{ value: 'count', text: '列统计' },
                    { value: 'statistic', text: '数据统计' },
                    { value: 'chart', text: '图形报表' },
                    { value: 'crosstab', text: '交叉制表' },
                    { value: 'analysis', text: 'abc分析' }];
                return {
                    title: '统计字段',
                    onClick: function () {
                        _this.initModal('统计字段', data_1, function (ev) {
                            _this.statistic(ev);
                        });
                    }
                };
            }
        };
        FastBtnTable.prototype.statistic = function (type) {
            var _this = this;
            return new Promise(function (resolve, reject) {
                var initCount = function () {
                    require(['NewCount'], function (Count) {
                        new Count({
                            container: tools.isMb ? document.body : d.closest(_this.wrapper, '.table-module-wrapper'),
                            cols: _this.dataTools.getCols(),
                            isShow: true,
                            colDataGet: function (colName) {
                                var colCounts = _this.dataTools.getColCounts()[colName];
                                var obj = {};
                                for (var _i = 0, _a = Object.values(colCounts); _i < _a.length; _i++) {
                                    var value = _a[_i];
                                    obj[value[0]] = value[1];
                                }
                                return obj;
                            },
                            getVisibleCol: function () { return _this.visibleCol; }
                        });
                    });
                };
                var hasStatistic = function () {
                    for (var _i = 0, _a = _this.columns; _i < _a.length; _i++) {
                        var col = _a[_i];
                        if (col.isNumber) {
                            return true;
                        }
                    }
                    return false;
                };
                var initStatistic = function (type) {
                    if (hasStatistic()) {
                        switch (type) {
                            case 'statistic':
                                require(['NewStatisticBasic'], function (Statistic) {
                                    new Statistic({
                                        container: tools.isMb ? document.body : d.closest(_this.wrapper, '.table-module-wrapper'),
                                        cols: _this.dataTools.getCols(),
                                        colDataGet: function (index) { return _this.columnGet(index).data; },
                                        isShow: true,
                                        getVisibleCol: function () { return _this.visibleCol; }
                                    });
                                });
                                break;
                            case 'chart':
                                require(['NewChartBasic'], function (ChartBasic) {
                                    if (!tools.isMb) {
                                        _this.spinner && _this.spinner.hide();
                                    }
                                    resolve();
                                    new ChartBasic({
                                        container: tools.isMb ? document.body : d.closest(_this.wrapper, '.table-module-wrapper'),
                                        cols: _this.dataTools.getCols(),
                                        allData: function () { return _this.tableData.data; },
                                        selectedData: function () { return _this.selectedRowsData; },
                                        colDataGet: function (index) { return _this.columnGet(index).data; },
                                        getTablePara: function () {
                                            var name = '';
                                            _this.columns.forEach(function (col) {
                                                for (var _i = 0, _a = ['drillAddr', 'webDrillAddr', 'webDrillAddrWithNull']; _i < _a.length; _i++) {
                                                    var attr = _a[_i];
                                                    if (attr in col.content) {
                                                        name = col.name;
                                                    }
                                                }
                                            });
                                            return {
                                                keyField: name,
                                                isReplaceTable: _this.isReplaceTable,
                                            };
                                        },
                                        getWrapper: function () {
                                            return _this.wrapper;
                                        },
                                        getVisibleCol: function () { return _this.visibleCol; },
                                        isShow: true,
                                        callBack: resolve,
                                    });
                                });
                                break;
                            case 'crosstab':
                                require(['NewCrossTabBasic'], function (CrossTabBasic) {
                                    new CrossTabBasic({
                                        container: tools.isMb ? document.body : d.closest(_this.wrapper, '.table-module-wrapper'),
                                        cols: _this.dataTools.getCols(),
                                        allData: function () { return _this.tableData.data; },
                                        selectedData: function () { return _this.selectedRowsData; },
                                        getVisibleCol: function () { return _this.visibleCol; }
                                    });
                                });
                                break;
                            case 'analysis':
                                require(['NewAnalysisBasic'], function (AnalysisBasic) {
                                    new AnalysisBasic({
                                        container: tools.isMb ? document.body : d.closest(_this.wrapper, '.table-module-wrapper'),
                                        cols: _this.dataTools.getCols(),
                                        allData: function () { return _this.tableData.data; },
                                        selectedData: function () { return _this.selectedRowsData; },
                                        getVisibleCol: function () { return _this.visibleCol; }
                                    });
                                });
                                break;
                        }
                    }
                    else {
                        Modal_1.Modal.alert('无可统计字段');
                    }
                };
                switch (type) {
                    case 'count':
                        initCount();
                        break;
                    default:
                        initStatistic(type);
                        break;
                }
            });
        };
        FastBtnTable.prototype.initExport = function () {
            var _this = this;
            if (this.isButton) {
                var btn = new Button_1.Button({
                    type: 'default',
                    icon: 'daochu2',
                    content: '导出'
                });
                var exportBut = [
                    { content: 'csv', icon: 'csv1', type: 'default', onClick: function () { return _this.export('csv'); } },
                    { content: 'excel', icon: 'excel', type: 'default', onClick: function () { return _this.export('xls'); } },
                    { content: 'word', icon: 'word', type: 'default', onClick: function () { return _this.export('doc'); } },
                    { content: 'pdf', icon: 'pdf', type: 'default', onClick: function () { return _this.export('pdf'); } },
                    { content: 'png', icon: 'png', type: 'default', onClick: function () { return _this.export('image'); } }
                ];
                btn.dropDown = new dropdown_1.DropDown({
                    el: btn.wrapper,
                    inline: false,
                    data: [],
                    multi: null,
                    className: "input-box-morebtn"
                });
                for (var i = 0, l = exportBut.length; i < l; i++) {
                    btn.dropDown.getUlDom().appendChild(new Button_1.Button(exportBut[i]).wrapper);
                }
                return btn;
            }
            else {
                var data_2 = [{ value: 'csv', text: '导出csv' },
                    { value: 'xls', text: '导出excel' },
                    { value: 'doc', text: '导出word' },
                    { value: 'pdf', text: '导出pdf' },
                    { value: 'image', text: '导出png' }];
                return {
                    title: '导出报表',
                    onClick: function () {
                        _this.initModal('导出报表', data_2, function (ev) {
                            _this.export(ev);
                        });
                    }
                };
            }
        };
        /**
         * 导出报表
         */
        FastBtnTable.prototype.export = function (action) {
            var _this = this;
            require(['tableExport'], function (tableExport) {
                var names = [];
                _this.columns.forEach(function (col) {
                    if (col.isFixed) {
                        col.isFixed = false;
                        names.push(col.name);
                    }
                });
                var table = _this.mainTable.body.tableEl.cloneNode(true), thead = d.query('thead', _this.mainTable.head.tableEl).cloneNode(true);
                table.appendChild(thead);
                var div = h("div", { style: "overflow: auto; height: auto; width: 100%" });
                d.append(document.body, div);
                d.append(div, table);
                tableExport(table, _this.exportTitle, action);
                d.remove(div, true);
                _this.columns.forEach(function (col) {
                    if (names.indexOf(col.name) > -1) {
                        col.isFixed = true;
                    }
                });
            });
        };
        FastBtnTable.prototype.btnAdd = function (name, btn, index) {
            var btnGroup = this.isButton ? this.inputBox : this.popover;
            if (FastBtnTable.names.indexOf(name) > -1) {
                switch (name) {
                    case 'search':
                        this.isButton ? btnGroup.addItem(this.initSearch()) : this.initSearch();
                        break;
                    // case 'filter':
                    //     this.inputBox.addItem(this.initFilter());
                    //     break;
                    case 'statistic':
                        btnGroup.addItem(this.initStatistic());
                        break;
                    case 'export':
                        btnGroup.addItem(this.initExport());
                        break;
                }
                typeof index === 'number' ? this.btnNameGroup.splice(index, 0, name) : this.btnNameGroup.push(name);
            }
            else {
                if (!this.isButton) {
                    var obj = {
                        title: btn.content,
                        onClick: btn.onClick
                    };
                    this.popover.addItem(obj);
                    this.btnNameGroup.push(name);
                }
                else {
                    this.inputBox.addItem(new Button_1.Button(btn), index);
                    typeof index === 'number' ? this.btnNameGroup.splice(index, 0, name) : this.btnNameGroup.push(name);
                }
            }
        };
        FastBtnTable.prototype.btnRemove = function (name) {
            var index = this.btnNameGroup.indexOf(name);
            if (index > -1) {
                this.inputBox.delItem(index);
                this.btnNameGroup.splice(index, 1);
            }
        };
        FastBtnTable.prototype.btnGet = function (name) {
            var index = this.btnNameGroup.indexOf(name);
            return index > -1 ? this.inputBox.getItem(index) : null;
        };
        FastBtnTable.prototype.removeAllModal = function () {
            this.modals.forEach(function (modal) {
                modal.destroy();
            });
            this.modals = [];
        };
        FastBtnTable.prototype.initModal = function (header, data, callback) {
            var _this = this;
            var body = h("div", { className: "fast-btn-modal-body", "data-name": "export" });
            var sel = new selectBox_1.SelectBox({
                container: body,
                select: {
                    multi: false,
                    isRadioNotchecked: false
                },
                data: data
            });
            var previewRB = new InputBox_1.InputBox();
            var okBtn = new Button_1.Button({
                key: 'okBtn',
                content: '确定',
                type: 'primary',
                onClick: function () {
                    typeof callback === 'function' && callback(data[sel.get()[0]].value);
                    modal.isShow = false;
                }
            });
            previewRB.addItem(okBtn);
            var modal = new Modal_1.Modal({
                header: header,
                body: body,
                position: tools.isMb ? 'center' : 'top',
                container: document.body,
                isOnceDestroy: true,
                footer: {
                    rightPanel: previewRB
                },
                isMb: false,
                onClose: function () {
                    var index = _this.modals.indexOf(modal);
                    if (index > -1) {
                        _this.modals.splice(index, 1);
                    }
                }
            });
            this.modals.push(modal);
            return modal;
        };
        FastBtnTable.names = ['search', 'statistic', 'export'];
        return FastBtnTable;
    }(FastTable_1.FastTable));
    exports.FastBtnTable = FastBtnTable;
});

define("FormCom", ["require", "exports", "Tooltip"], function (require, exports, tooltip_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var FormCom = /** @class */ (function (_super) {
        __extends(FormCom, _super);
        function FormCom(para) {
            if (para === void 0) { para = {}; }
            var _this = _super.call(this, para) || this;
            _this.onSet = para && para.onSet;
            return _this;
        }
        FormCom.prototype.error = function (isError, errorMsg, parentEle) {
            if (errorMsg === void 0) { errorMsg = ""; }
            if (parentEle === void 0) { parentEle = this.wrapper; }
            if (!parentEle) {
                return;
            }
            if (isError) {
                parentEle.classList.add("error");
                this.toolTips = new tooltip_1.Tooltip({
                    pos: "up",
                    length: "medium",
                    visible: true,
                    errorMsg: "\ue633 " + errorMsg,
                    el: parentEle
                });
            }
            else {
                parentEle.classList.remove("error");
                this.toolTips ? this.toolTips.hide() : '';
            }
        };
        return FormCom;
    }(Component));
    exports.FormCom = FormCom;
});
// export abstract class FormCom{
//     abstract get():any;
//     abstract set(...any):void;
//     abstract onSet: (val)=>void;
//
//     protected _wrapper : HTMLElement;
//     get wrapper(){
//         return this._wrapper
//     }
//
//     protected _value:any;
//     private toolTips;
//     error(isError : boolean, errorMsg: string = "", parentEle : HTMLElement = this._wrapper){
//         if(!parentEle) {
//             return ;
//         }
//         if(isError) {
//             parentEle.classList.add("error");
//              this.toolTips =  new Tooltip({
//                 pos: "up",
//                 length: "medium",
//                 visible: true,
//                 errorMsg: "\ue633 "+errorMsg,
//                 el: parentEle
//             });
//         } else {
//             parentEle.classList.remove("error");
//             this.toolTips ? this.toolTips.hide() : '';
//         }
//     }
//
//
//
//     destroy(){
//         if(this._wrapper){
//             d.remove(this._wrapper);
//         }
//     }
//
//     tabIndexElGet() : HTMLElement{
//         return this.wrapper
//     }
//     private _tabIndex : boolean = false;
//     get tabIndex(){
//         return this._tabIndex;
//     }
//     set tabIndex(tabIndex : boolean){
//         tabIndex = !!tabIndex;
//         if(this._tabIndex === tabIndex){
//             return;
//         }
//         this._tabIndex = tabIndex;
//         let wrapper = this.tabIndexElGet();
//         if(tabIndex){
//             wrapper.tabIndex = parseInt(tools.getGuid(''));
//             d.on(wrapper, 'keydown', this.keyHandle);
//         }else {
//             d.off(wrapper, 'keydown', this.keyHandle);
//             wrapper.removeAttribute('tabIndex');
//         }
//     }
//
//     protected keyHandle = (e : KeyboardEvent) => {};
// }

define("Virtual", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Virtual = /** @class */ (function (_super) {
        __extends(Virtual, _super);
        function Virtual() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Virtual.prototype.wrapperInit = function () {
            return undefined;
        };
        Virtual.prototype.get = function () {
            return this.data;
        };
        Virtual.prototype.set = function (data) {
            this.data = data;
        };
        Object.defineProperty(Virtual.prototype, "value", {
            get: function () {
                return this.data;
            },
            set: function (data) {
                this.data = data;
            },
            enumerable: true,
            configurable: true
        });
        return Virtual;
    }(basic_1.FormCom));
    exports.Virtual = Virtual;
});

/// <amd-module name="MbList"/>
define("MbList", ["require", "exports", "MbListItem"], function (require, exports, MbListItem_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var MbList = /** @class */ (function (_super) {
        __extends(MbList, _super);
        function MbList(para) {
            var _this = _super.call(this, para) || this;
            _this._listItems = [];
            // 设置是否多选
            _this._multiple = false;
            _this._isImg = tools.isEmpty(para.isImg) ? true : para.isImg;
            _this._multiple = para.isMulti || false;
            _this.render(para.data || []);
            window['l'] = _this;
            return _this;
        }
        MbList.prototype.wrapperInit = function () {
            return h("div", { className: "mb-list-wrapper" });
        };
        Object.defineProperty(MbList.prototype, "isImg", {
            get: function () {
                return this._isImg;
            },
            enumerable: true,
            configurable: true
        });
        MbList.prototype.render = function (data) {
            var _this = this;
            d.diff(data, this.listItems, {
                create: function (n) {
                    _this._listItems.push(_this.createListItem({ data: n }));
                },
                replace: function (n, o) {
                    o.data = n || {};
                },
                destroy: function (o) {
                    o.destroy();
                    var index = _this._listItems.indexOf(o);
                    if (index > -1)
                        delete _this._listItems[index];
                }
            });
            this._listItems = this._listItems.filter(function (item) { return item; });
            this.refreshIndex();
        };
        MbList.prototype.delItem = function (index) {
            var item = this._listItems[index];
            if (item) {
                item.destroy();
                this._listItems.splice(index, 1);
            }
        };
        MbList.prototype.refreshIndex = function () {
            this._listItems.forEach(function (item, index) {
                item.index = index;
            });
        };
        Object.defineProperty(MbList.prototype, "listItems", {
            get: function () {
                return this._listItems.slice();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbList.prototype, "multiple", {
            get: function () {
                return this._multiple;
            },
            set: function (flag) {
                if (this._multiple !== flag) {
                    this._multiple = flag;
                    this._listItems.forEach(function (item, index) {
                        item.isShowCheckBox = flag;
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        // 实例化MvListItem
        MbList.prototype.createListItem = function (para) {
            para = Object.assign({}, para, {
                container: this.wrapper,
                isImg: this.isImg,
                isCheckBox: this.multiple
            });
            return new MbListItem_1.MbListItem(para);
        };
        return MbList;
    }(Component));
    exports.MbList = MbList;
});

/// <amd-module name="MbListItem"/>
define("MbListItem", ["require", "exports", "CheckBox", "InputBox"], function (require, exports, checkBox_1, InputBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    var MbListItem = /** @class */ (function (_super) {
        __extends(MbListItem, _super);
        function MbListItem(para) {
            var _this = _super.call(this, para) || this;
            //是否显示按钮
            _this._isShowBtns = false;
            _this.list = para.list;
            _this._index = para.index;
            _this.isShowCheckBox = para.isCheckBox || false;
            _this.render(para.data || {});
            return _this;
        }
        MbListItem.prototype.wrapperInit = function (para) {
            var isImg = tools.isEmpty(para.isImg) ? true : para.isImg;
            this._isImg = isImg;
            this.details = {};
            return h("div", { className: "list-item-wrapper", "data-index": para.index },
                this.checkBox = h(checkBox_1.CheckBox, { className: "hide" }),
                h("div", { className: "list-item-content" },
                    this.imgWrapper = isImg ? h("div", { className: "list-item-img" }) : null,
                    h("div", { className: "list-item-details" },
                        this.details['title'] = h("div", { className: "list-item-title" }),
                        this.details['body'] = h("div", { className: "list-item-body" }),
                        this.details['label'] = h("div", { className: "list-item-labels" }),
                        this.details['countDown'] = h("div", { className: "list-item-count-down" }),
                        this.details['status'] = h("div", { className: "list-item-status" }))));
        };
        Object.defineProperty(MbListItem.prototype, "isImg", {
            get: function () {
                return this._isImg;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbListItem.prototype, "index", {
            get: function () {
                return this._index;
            },
            set: function (index) {
                this._index = index;
                this.wrapper && (this.wrapper.dataset['index'] = index + '');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbListItem.prototype, "selected", {
            // 获取、设置当前行是否是选中
            get: function () {
                return this.checkBox.checked;
            },
            set: function (selected) {
                this.checkBox && (this.checkBox.checked = selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbListItem.prototype, "isShowCheckBox", {
            get: function () {
                return this.checkBox ? this.checkBox.wrapper.classList.contains('hide') : false;
            },
            // 获取、设置是否显示checkBox
            set: function (flag) {
                if (!flag) {
                    this.selected = false;
                }
                this.checkBox && this.checkBox.wrapper.classList.toggle('hide', !flag);
            },
            enumerable: true,
            configurable: true
        });
        // 渲染数据
        MbListItem.prototype.render = function (data) {
            // 渲染图片
            if (this.isImg && this.imgWrapper) {
                this.imgWrapper.innerHTML = '';
                var img = data.img || G.requireBaseUrl + '../img/fastlion_logo.png';
                d.append(this.imgWrapper, h("img", { src: img, alt: "" }));
                if (tools.isNotEmpty(data.imgLabel)) {
                    d.append(this.imgWrapper, h("div", { className: 'img-label' },
                        h("span", null, data.imgLabel)));
                }
            }
            var _loop_1 = function (name_1) {
                var el = this_1.details[name_1], content = data[name_1];
                el.classList.toggle('hide', tools.isEmpty(content));
                switch (name_1) {
                    case 'body':
                        el.innerHTML = '';
                        content && content.forEach(function (arr) {
                            d.append(el, h("p", null,
                                h("span", { className: "body-title" }, arr[0] + '：'),
                                h("span", { className: "body-value" }, arr[1])));
                        });
                        break;
                    case 'label':
                        el.innerHTML = '';
                        content && content.forEach(function (label) {
                            d.append(el, h("span", { className: "label" }, label));
                        });
                        break;
                    case 'status':
                        el.style.color = data.statusColor;
                        el.innerHTML = content || '';
                        break;
                    case 'countDown':
                        this_1.initCountDown(el, content);
                        break;
                    case 'title':
                    default:
                        el.innerHTML = content || '';
                        break;
                }
            };
            var this_1 = this;
            // 渲染内容
            for (var name_1 in this.details) {
                _loop_1(name_1);
            }
        };
        MbListItem.prototype.initCountDown = function (el, countDown) {
            var _this = this;
            var toTwo = function (num) {
                return num < 10 ? '0' + num : num + '';
            };
            clearInterval(this.timer);
            typeof countDown === 'number' && (this.timer = setInterval(function () {
                var date = new Date(), html = '', targetTime = new Date(countDown), total = (targetTime.getTime() - date.getTime()) / 1000;
                if (targetTime.getTime() < date.getTime()) {
                    html = '活动已开始';
                    clearInterval(_this.timer);
                    _this.timer = null;
                    return;
                }
                var day = Math.floor(total / (24 * 60 * 60)), afterDay = total - day * 24 * 60 * 60, hour = Math.floor(afterDay / (60 * 60)), afterHour = total - day * 24 * 60 * 60 - hour * 60 * 60, min = Math.floor(afterHour / 60), sec = Math.floor(total - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);
                el.innerText = '倒计时：' +
                    (day > 0 ? day + '天' : '') + ' ' +
                    toTwo(hour) + ':' + toTwo(min) + ':' + toTwo(sec);
            }, 1000));
        };
        Object.defineProperty(MbListItem.prototype, "isShowBtns", {
            get: function () {
                return this.btnWrapper ? this._isShowBtns : false;
            },
            set: function (flag) {
                this._isShowBtns = flag;
                this.btnWrapper && this.btnWrapper.classList.toggle('hide', !flag);
            },
            enumerable: true,
            configurable: true
        });
        // 初始化按钮配置
        MbListItem.prototype.initBtn = function (btns) {
            this.btnWrapper = h("div", { className: "btn-group" });
            InputBox_1.InputBox;
        };
        // 添加按钮，index插入位置
        MbListItem.prototype.addBtn = function (btn, index) {
        };
        // 删除按钮
        MbListItem.prototype.delBtn = function (index) {
        };
        MbListItem.prototype.destroy = function () {
            clearInterval(this.timer);
            this.checkBox && this.checkBox.destroy();
            this.checkBox = null;
            this.details = null;
            this.list = null;
            this.imgWrapper = null;
            _super.prototype.destroy.call(this);
        };
        return MbListItem;
    }(Component));
    exports.MbListItem = MbListItem;
});

define("FastPseudoTable", ["require", "exports", "TableBase", "CheckBox", "FastTable"], function (require, exports, TableBase_1, checkBox_1, FastTable_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var FastPseudoTable = /** @class */ (function (_super) {
        __extends(FastPseudoTable, _super);
        function FastPseudoTable(para, _wrappers) {
            var _this = _super.call(this, {
                container: para.container,
                cols: (function () {
                    var result = [];
                    result.push([{
                            name: 'selectCol',
                            title: '',
                        }]);
                    // for(let i = 1; i < multiHead; i ++){
                    //     result.push([])
                    // }
                    return result;
                })(),
                className: para.className,
                _wrapper: para._wrapper,
                colCount: para.colCount,
            }, _wrappers) || this;
            _this.preSelCell = null;
            _this.preSelIndex = -1;
            _this.fastTable = para.fastTable;
            _this.init(para);
            _this.isShow = tools.isEmpty(para.isShow) ? true : para.isShow;
            var multiHead = tools.isEmpty(para.multiHeadRow) ? 1 : para.multiHeadRow;
            _this.head.rows[0].cells[0].wrapper.style.height = multiHead * 40 + 1 + 'px';
            _this.checkAllBox = new checkBox_1.CheckBox({
                container: d.query('div.cell-content', _this.head.rows[0].cells[0].wrapper),
                onClick: function (isChecked) {
                    if (_this._type === 'number') {
                        _this.body.rows && _this.body.rows.forEach(function (row) {
                            if (row) {
                                var index = row.index;
                                typeof index === 'number' && _this._setCellsSelected(index, isChecked ? 1 : 0);
                            }
                        });
                        isChecked ? _this.fastTable.rows.forEach(function (row) {
                            row && row._selectedInnerRowSet(isChecked);
                        }) : _this.fastTable._clearAllSelectedCells();
                        _this.fastTable._drawSelectedCells();
                    }
                    else {
                        _this.allCheckBox && _this.allCheckBox.forEach(function (btn) {
                            btn.checked = isChecked;
                        });
                    }
                    _this.fastTable.trigger(FastTable_1.FastTable.EVT_SELECTED);
                }
            });
            return _this;
        }
        FastPseudoTable.prototype.setPresentSelected = function (index) {
            var rows = this.body.rows || [];
            if (rows.length === 0) {
                return;
            }
            if (index >= rows.length) {
                index = 0;
            }
            this.preSelIndex = index;
            this.preSelCell && (this.preSelCell.presentSelected = false);
            this.preSelCell = rows[this.preSelIndex].cells[0];
            this.preSelCell && (this.preSelCell.presentSelected = true);
        };
        FastPseudoTable.prototype.clearPresentSelected = function () {
            this.preSelCell && (this.preSelCell.presentSelected = false);
            this.preSelCell = null;
            this.preSelIndex = null;
        };
        FastPseudoTable.prototype.offsetPresentSelected = function (offset) {
            this.preSelIndex !== null && this.setPresentSelected(this.preSelIndex + offset);
        };
        Object.defineProperty(FastPseudoTable.prototype, "presentOffset", {
            get: function () {
                return this.preSelIndex;
            },
            enumerable: true,
            configurable: true
        });
        FastPseudoTable.prototype.setCheckBoxStatus = function () {
            var flag = this.fastTable.rows.length > 0;
            var flagCount = 0;
            if (flag) {
                if (this._type === 'number') {
                    this.fastTable.rows && this.fastTable.rows.forEach(function (row) {
                        if (row) {
                            for (var _i = 0, _a = row.cells; _i < _a.length; _i++) {
                                var cell = _a[_i];
                                flag = flag && cell.selected;
                            }
                            row.selected && flagCount++;
                        }
                    });
                }
                else {
                    this.allCheckBox && this.allCheckBox.forEach(function (checkBox) {
                        flag = flag && checkBox.status === 1;
                        (checkBox.status === 2 || checkBox.status === 1) && flagCount++;
                    });
                }
                if (flag) {
                    this.checkAllBox.status = 1;
                }
                else if (!flag && flagCount > 0) {
                    this.checkAllBox.status = 2;
                }
                else {
                    this.checkAllBox.status = 0;
                }
            }
            else {
                this.checkAllBox.status = 0;
            }
        };
        // 初始化
        FastPseudoTable.prototype.init = function (para) {
            this._type = para.type || 'number';
            this.allCheckBox = [];
            this.head.innerWrapper.classList.add('pseudo-table');
            this.body.innerWrapper.classList.add('pseudo-table');
            if (this.fastTable.colCount) {
                this.foot.innerWrapper.classList.add('pseudo-table');
            }
        };
        FastPseudoTable.prototype.render = function () {
            var _this = this;
            var indexes = [];
            for (var _i = 0, _a = this.fastTable.rows; _i < _a.length; _i++) {
                var row = _a[_i];
                if (row) {
                    indexes.push(row.index);
                }
            }
            var delIndexes = [];
            d.diff(indexes, this.body.rows, {
                create: function (index) {
                    if (_this._type === 'number') {
                        var dataObj = { selectCol: index + 1 };
                        _this.dataAdd(dataObj);
                    }
                    else {
                        var timer_1 = null;
                        _this.body.rowAdd({});
                        var box = new checkBox_1.CheckBox({
                            container: _this.body.rowGet(index).cells[0].wrapper,
                            clickArea: 'all',
                            onSet: function (isChecked) {
                                if (_this.fastTable.rowGet(index)) {
                                    _this.fastTable.rowGet(index)._selectedInnerRowSet(isChecked);
                                    _this.setCheckBoxStatus();
                                    clearTimeout(timer_1);
                                    timer_1 = setTimeout(function () {
                                        _this.fastTable._drawSelectedCells();
                                    }, 20);
                                }
                            }
                        });
                        _this.allCheckBox[index] = box;
                        var dataObj = {
                            selectCol: box.wrapper
                        };
                        _this.body.rowGet(index).data = dataObj;
                        _this.body.rowGet(index).index = index;
                    }
                },
                replace: function (index, row) {
                    row.index = index;
                    row.cells[0].selected = _this.fastTable.rows[index].selected;
                    // row.selected = this.fastTable.rows[index].selected;
                },
                destroy: function (row) {
                    var index = _this.body.rows.indexOf(row);
                    delIndexes.push(row);
                    if (_this._type === 'checkbox') {
                        delete _this.allCheckBox[index];
                    }
                }
            });
            for (var _b = 0, _c = delIndexes.sort().reverse(); _b < _c.length; _b++) {
                var row = _c[_b];
                d.remove(row.wrapper);
                this.body.rows.splice(this.body.rows.indexOf(row), 1);
            }
            this.preSelCell && (this.preSelCell.presentSelected = false);
            this.setCheckBoxStatus();
            this.tableData.set(this.tableData.get().filter(function (item) {
                return typeof item !== 'undefined';
            }));
        };
        Object.defineProperty(FastPseudoTable.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                var _this = this;
                this._isShow = isShow;
                d.queryAll('.pseudo-table', this.fastTable.wrapper).forEach(function (el) {
                    el.classList.toggle('hide', !_this._isShow);
                });
                this.fastTable.setTableStyle();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastPseudoTable.prototype, "width", {
            //获取wrapper宽度
            get: function () {
                return 40;
            },
            enumerable: true,
            configurable: true
        });
        FastPseudoTable.prototype._setCellsSelected = function (index, status) {
            if (this._type === 'checkbox') {
                if (this.allCheckBox[index].status !== status) {
                    this.allCheckBox[index].status = status;
                }
            }
            else {
                var row = this.body.rowGet(index);
                row && (row.cells[0].selected = status > 0);
            }
        };
        FastPseudoTable.prototype._clearCellSelected = function () {
            if (tools.isNotEmpty(this.allCheckBox)) {
                this.allCheckBox.forEach(function (checkbox) {
                    checkbox.get() && checkbox.set(false);
                });
            }
        };
        return FastPseudoTable;
    }(TableBase_1.TableBase));
    exports.FastPseudoTable = FastPseudoTable;
});

/// <amd-module name="FastTableColumn"/>
define("FastTableColumn", ["require", "exports", "TableColumn", "Modal"], function (require, exports, TableColumn_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var FastTableColumn = /** @class */ (function (_super) {
        __extends(FastTableColumn, _super);
        function FastTableColumn(para) {
            var _this = _super.call(this, para) || this;
            // 锁列
            _this._isFixed = false;
            // get maxWidth(){
            //     let num = this._maxWidth;
            //     if(this.ftable.isFullWidth && this.ftable.width < this.ftable.container.offsetWidth){
            //         num = Infinity
            //     }
            //     return num;
            // }
            // 设置获取是否选中
            _this._selected = false;
            _this._isFixed = tools.isEmpty(para.isFixed) ? false : para.isFixed;
            _this._sortState = tools.isEmpty(para.sortState) ? 'NO' : para.sortState;
            return _this;
        }
        Object.defineProperty(FastTableColumn.prototype, "ftable", {
            get: function () {
                return this.table.content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableColumn.prototype, "isFixed", {
            get: function () {
                return this._isFixed;
            },
            set: function (isFixed) {
                this._isFixed = isFixed;
                if (!this.isVirtual) {
                    this._setColumnFixed(isFixed);
                }
            },
            enumerable: true,
            configurable: true
        });
        FastTableColumn.prototype._setColumnFixedNotRender = function (isFixed) {
            this._isFixed = isFixed;
        };
        // 设置锁列
        FastTableColumn.prototype._setColumnFixed = function (isFixed) {
            var fTable = this.ftable, leftTable = fTable.leftTable, mainTable = fTable.mainTable, leftLen = leftTable ? leftTable.columns.length : 0;
            if (isFixed) {
                // 设置锁列
                if (leftLen === 0) {
                    fTable.createLeftTable([]);
                    leftTable = fTable.leftTable;
                    leftTable.head.innerWrapper.classList.add("left-table");
                    leftTable.body.innerWrapper.classList.add("left-table");
                }
                // console.log(fTable.columns.indexOf(this) - leftLen);
                // console.log(fTable.mainTable.body.rows);
                var delCol = fTable.mainTable.columnsDel(fTable.columns.indexOf(this) - leftLen, false);
                leftTable.columnInsertBefore(delCol, leftLen);
                // 表格可以换行时，重新创建锁列时，给锁列的高度赋值。
                if (this.ftable.isWrapLine && leftLen === 0) {
                    this.ftable.rows.forEach(function (row) {
                        row._setHeight();
                    });
                }
            }
            else {
                // 取消锁列
                // debugger;
                var delCol = fTable.leftTable.columnsDel(fTable.columns.indexOf(this), false);
                mainTable.columnInsertBefore(delCol, leftLen - 1);
                if (leftTable.columns.length <= 0) {
                    d.remove(fTable.leftTable.body.tableEl, true);
                    d.remove(fTable.leftTable.body.innerWrapper, true);
                    d.remove(fTable.leftTable.head.tableEl, true);
                    d.remove(fTable.leftTable.head.innerWrapper, true);
                    if (fTable.leftTable.foot) {
                        d.remove(fTable.leftTable.foot.tableEl, true);
                        d.remove(fTable.leftTable.foot.innerWrapper, true);
                    }
                    fTable.leftTable.destroy();
                    fTable.tableBases.pop();
                    fTable.setTableStyle();
                }
            }
            this.ftable.setMainTableWidth();
        };
        Object.defineProperty(FastTableColumn.prototype, "sortState", {
            get: function () {
                return this._sortState;
            },
            set: function (sortState) {
                this.sort(sortState);
            },
            enumerable: true,
            configurable: true
        });
        FastTableColumn.prototype.sort = function (order) {
            var _this = this;
            // 清除其他列的状态 并设置本列状态
            if (!this.isCanSort) {
                Modal_1.Modal.toast('该列无排序功能');
                return null;
            }
            this.ftable.columns.forEach(function (col) {
                col._sortState = col === _this ? order : 'NO';
                var sortCol = col.cells[0][0], wrapper = sortCol && sortCol.wrapper;
                if (wrapper) {
                    if (col._sortState === 'NO') {
                        d.classRemove(wrapper, 'sort-desc sort-asc');
                    }
                    else {
                        var isDesc = col._sortState === 'DESC';
                        d.classToggle(wrapper, 'sort-desc', isDesc);
                        d.classToggle(wrapper, 'sort-asc', !isDesc);
                    }
                }
            });
            var indexes = null, ftableData = this.ftable.tableData;
            // debugger;
            // console.log(this.ftable.tableData.getServerMode())
            if (ftableData.serverMode) {
                ftableData.sortState = [[this.name, this.sortState]];
                ftableData.refresh();
            }
            else {
                var leftTable = this.ftable.leftTable, mainTable = this.ftable.mainTable, table = leftTable ? ((leftTable.columns.length - 1 >= this.ftable.columns.indexOf(this)) ? leftTable : mainTable) : mainTable, otherTable = leftTable ? (table === leftTable ? mainTable : leftTable) : mainTable;
                indexes = table.tableData.sort(this.name, order);
                table !== otherTable && otherTable.sortByIndex(indexes);
                // table.render(0, table.tableData.get().length);
                this.ftable.render(0, this.ftable.data.length);
            }
            return indexes;
        };
        Object.defineProperty(FastTableColumn.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                this._selectedInnerColSet(selected, true);
            },
            enumerable: true,
            configurable: true
        });
        // 内部使用
        FastTableColumn.prototype._selectedInnerColSet = function (selected, isDraw) {
            this._selected = selected;
            var cell = this.headCells[0];
            !this.isVirtual && cell && (cell.selected = selected);
            isDraw && !this.isVirtual && this.bodyWrapper.classList.toggle('selected', selected);
        };
        return FastTableColumn;
    }(TableColumn_1.TableColumn));
    exports.FastTableColumn = FastTableColumn;
});

/// <amd-module name="FastTableRow"/>
define("FastTableRow", ["require", "exports", "FastTable"], function (require, exports, FastTable_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var FastTableRow = /** @class */ (function () {
        function FastTableRow(para) {
            //
            // private _index: number;
            // get index() {
            //     return this._index;
            // }
            // set index(index: number) {
            //     this._index = index;
            //
            // }
            this._disabled = false;
            this._selected = false;
            this.fastTable = para.fastTable;
            this.index = para.index;
            this.isShow = para.isShow;
            this.disabled = para.disabled;
            this.selected = para.selected;
            //
            // this.fastTable.tableBases.forEach(table => {
            //     // table.dataAdd([]);
            //     table.body.rowAdd({
            //         content: para.fastTable
            //     })
            // });
            this.data = para.data;
        }
        FastTableRow.prototype.cellGet = function (col) {
            var cols = tools.toArray(col);
            var result = [];
            for (var _i = 0, cols_1 = cols; _i < cols_1.length; _i++) {
                var item = cols_1[_i];
                result.push(this.cells[this.fastTable.getColIndex(item)] || null);
            }
            return Array.isArray(col) ? result : result[0];
        };
        Object.defineProperty(FastTableRow.prototype, "cells", {
            // 获取cell
            get: function () {
                var _this = this;
                var cells = [];
                this.rowsEach(function (row) {
                    if (row) {
                        if (_this.fastTable.isLockRight) {
                            cells = cells.concat(row.cells);
                        }
                        else {
                            cells = row.cells.concat(cells);
                        }
                    }
                });
                return cells;
            },
            enumerable: true,
            configurable: true
        });
        FastTableRow.prototype.rowsEach = function (fun) {
            this.rowsInner.forEach(function (row, i, rowArr) {
                fun(row, i, rowArr);
            });
        };
        Object.defineProperty(FastTableRow.prototype, "rowsInner", {
            get: function () {
                var _this = this;
                return this.fastTable.tableBases.map(function (table) { return table.body.rowGet(_this.index); });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableRow.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                if (tools.isNotEmpty(disabled)) {
                    this._selected = disabled;
                    this.rowsEach(function (row) { return row.disabled = disabled; });
                    // this.fastTable.tableBases.forEach((table) => {
                    //     if (table) {
                    //         table.body.rowGet(this.index).disabled = disabled;
                    //     }
                    // });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableRow.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                var _this = this;
                if (tools.isNotEmpty(selected)) {
                    this._selectedInnerRowSet(selected);
                    var events = this.fastTable.eventHandlers[FastTable_1.FastTable.EVT_SELECTED];
                    events && events.forEach(function (item) {
                        typeof item === 'function' && item(_this);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableRow.prototype, "height", {
            get: function () {
                return this.rowsInner[0].height;
            },
            enumerable: true,
            configurable: true
        });
        FastTableRow.prototype._setHeight = function () {
            var maxHeight = 0;
            this.rowsEach(function (row) {
                maxHeight = Math.max(row.height, maxHeight);
            });
            this.rowsEach(function (row) {
                row.height = maxHeight;
            });
        };
        FastTableRow.prototype._rowSelectedWidthDraw = function (selected, isDraw) {
            this._selected = selected;
            isDraw && this._selectedInnerRowSet(selected);
        };
        // 内部使用
        FastTableRow.prototype._selectedInnerRowSet = function (selected) {
            this._selected = selected;
            this.rowsEach(function (row, rowindex, rowArr) {
                row.selected = selected;
                row.cells.forEach(function (cell, index, array) {
                    cell._selectedInnerSet(selected);
                });
            });
            // this.fastTable.tableBases.forEach((table) => {
            //     if (table) {
            //         table.body.rowGet(this.index).selected = selected;
            //         table.body.rowGet(this.index).cells.forEach((cell) => {
            //             (<FastTableCell>cell)._selectedInnerSet(selected, isInnerEvent);
            //         })
            //     }
            // });
        };
        Object.defineProperty(FastTableRow.prototype, "isShow", {
            get: function () {
                return this.rowsInner[0].isShow;
            },
            set: function (isShow) {
                if (tools.isNotEmpty(isShow)) {
                    this.rowsEach(function (row) {
                        row.isShow = isShow;
                    });
                    // this.fastTable.tableBases.forEach((table) => {
                    //     if (table) {
                    //         table.body.rowGet(this.index).isShow = isShow;
                    //     }
                    // });
                }
            },
            enumerable: true,
            configurable: true
        });
        FastTableRow.prototype.destroy = function () {
            this.rowsEach(function (row) {
                row && row.destroy();
            });
            this.fastTable = null;
        };
        Object.defineProperty(FastTableRow.prototype, "data", {
            get: function () {
                var data = {};
                this.rowsEach(function (row) {
                    // debugger;
                    data = Object.assign({}, data, row.data || {});
                });
                return data;
            },
            // private _data: obj;
            set: function (data) {
                if (data) {
                    var dataArr_1 = this.fastTable.tableData.dataSplit(data);
                    // this.fastTable.tablesEach((table) => {
                    //
                    // });
                    this.rowsEach(function (row, i) {
                        row.data = dataArr_1[i];
                    });
                }
                this.format();
            },
            enumerable: true,
            configurable: true
        });
        FastTableRow.prototype.format = function () {
            var format = this.fastTable.rowFormat, formated = format && format(this.data);
            this.color = formated && formated.color;
            this.background = formated && formated.bgColor;
        };
        Object.defineProperty(FastTableRow.prototype, "color", {
            get: function () {
                return this.rowsInner[0].wrapper.style.color;
            },
            set: function (color) {
                color && this.rowsEach(function (r) { return r.wrapper.style.color = color; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableRow.prototype, "background", {
            get: function () {
                return this.rowsInner[0].wrapper.style.background;
            },
            set: function (color) {
                color && this.rowsEach(function (r) { return r.wrapper.style.background = color; });
            },
            enumerable: true,
            configurable: true
        });
        return FastTableRow;
    }());
    exports.FastTableRow = FastTableRow;
});

/// <amd-module name="RowDetail"/>
define("RowDetail", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var RowDetail = /** @class */ (function (_super) {
        __extends(RowDetail, _super);
        function RowDetail(para) {
            var _this = _super.call(this, para) || this;
            _this.init(para);
            return _this;
        }
        RowDetail.prototype.wrapperInit = function () {
            return d.create('<div class="detail-container"></div>');
        };
        RowDetail.prototype.init = function (para) {
            var _this = this;
            para.detailCols.forEach(function (col) {
                var nodeList = {
                    tag: 'div',
                    props: {
                        className: 'detail-row'
                    },
                    children: [
                        {
                            tag: 'div',
                            props: {
                                className: 'detail-label'
                            },
                            children: [
                                col.title + ' :'
                            ]
                        },
                        {
                            tag: 'div',
                            props: {
                                className: 'detail-content',
                                dataset: {
                                    name: col.name
                                }
                            }
                        }
                    ]
                };
                _this.wrapper.appendChild(d.create(nodeList));
                if (tools.isNotEmpty(para.detailCells)) {
                    _this.detailCells = para.detailCells;
                }
            });
        };
        Object.defineProperty(RowDetail.prototype, "detailCells", {
            get: function () {
                return this._detailCells;
            },
            set: function (cells) {
                var _this = this;
                if (tools.isEmpty(cells)) {
                    cells = [];
                }
                this._detailCells = cells;
                var contents = d.queryAll('[data-name]', this.wrapper);
                contents.forEach(function (content) {
                    for (var _i = 0, _a = _this._detailCells; _i < _a.length; _i++) {
                        var cell = _a[_i];
                        if (cell.name === content.dataset.name) {
                            content.innerText = cell.text;
                            break;
                        }
                    }
                });
            },
            enumerable: true,
            configurable: true
        });
        return RowDetail;
    }(Component));
    exports.RowDetail = RowDetail;
});

define("FastTable", ["require", "exports", "TableBase", "FastTableRow", "FastTableColumn", "FastPseudoTable", "FastTableCell", "FastTableData", "FastTableMenu", "Button", "InputBox", "Modal"], function (require, exports, TableBase_1, FastTableRow_1, FastTabelColumn_1, FastPseudoTable_1, FastTableCell_1, FastTableData_1, FastTableMenu_1, Button_1, InputBox_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var FastTable = /** @class */ (function (_super) {
        __extends(FastTable, _super);
        // protected _insertable: boolean;
        // get insertable(){
        //     return this._insertable;
        // }
        function FastTable(para) {
            var _this = _super.call(this, para) || this;
            _this.tableData = null;
            // protected _maxWidth: number = Infinity;
            // get maxWidth() {
            //     return this._maxWidth;
            // }
            //
            // set maxWidth(num: number) {
            //     if (typeof num === 'number' && num > 0) {
            //         this._maxWidth = num;
            //     }
            // }
            _this.sortEvent = (function () {
                var handler = null;
                return {
                    on: function () { return d.on(_this.wrapper, 'click', 'th', handler = function (e) {
                        if (!_this.isChangeColWidth) {
                            var target = e.target;
                            if (target.tagName === 'TH' || target.parentElement.tagName === 'TH') {
                                var th = target.tagName === 'TH' ? target : target.parentElement, dataName = th.dataset.name, col = _this.columnGet(dataName);
                                if (dataName === 'selectCol') {
                                    // 选择的是伪列的列头
                                    return;
                                }
                                if (tools.isNotEmpty(col)) {
                                    if (col.sortState === 'NO') {
                                        col.sortState = 'ASC';
                                    }
                                    else if (col.sortState === 'DESC') {
                                        col.sortState = 'ASC';
                                    }
                                    else if (col.sortState === 'ASC') {
                                        col.sortState = 'DESC';
                                    }
                                }
                            }
                        }
                    }); },
                    off: function () { return d.off(_this.wrapper, 'click', 'th', handler); }
                };
            })();
            // 索引列
            _this._pseudoTable = null;
            // 获取所有行
            _this._rows = [];
            _this.currentSccrollLeft = 0;
            // 创建滚动事件
            _this.scrollEvent = (function () {
                var self = _this;
                var timer = null;
                var scrollHandler = function (e) {
                    // self.fastTableMenu && (self.fastTableMenu.ftableMenu.show = false);
                    self.currentSccrollLeft = this.scrollLeft;
                    d.queryAll(".main-table table", self.wrapper).forEach(function (el) {
                        el.style.webkitTransform = "translateX(" + -self.currentSccrollLeft + "px) translateZ(0)";
                        el.style.transform = "translateX(" + -self.currentSccrollLeft + "px) translateZ(0)";
                    });
                };
                var scrollingHandler = function () {
                    var handler;
                    self.wrapper.classList.add('scrolling');
                    d.on(document, 'mouseup', handler = function () {
                        d.off(document, 'mouseup', handler);
                        self.wrapper.classList.remove('scrolling');
                    });
                };
                return {
                    on: function () {
                        d.on(d.query(".scroll-container", _this.wrapper), "scroll", scrollHandler);
                        d.on(d.query(".scroll-container", _this.wrapper), "mousedown", scrollingHandler);
                    },
                    off: function () {
                        d.off(d.query(".scroll-container", _this.wrapper), "scroll", scrollHandler);
                        d.off(d.query(".scroll-container", _this.wrapper), "mousedown", scrollingHandler);
                    }
                };
            })();
            _this.touchMoveEvent = (function () {
                var displacement = 0, self = _this, isScroll = false, animationId = null, headTable, footTable;
                var touchMoveHandler = function (e) {
                    var currentScrollLeft = self.mainTable.body.innerWrapper.scrollLeft;
                    if (displacement !== currentScrollLeft) {
                        displacement = currentScrollLeft;
                        headTable = d.query("table", self.mainTable.head.innerWrapper);
                        self.colCount && (footTable = d.query("table", self.mainTable.foot.innerWrapper));
                        // 表头
                        headTable.style.webkitTransform = "translateX(" + -displacement + "px) translateZ(0)";
                        headTable.style.transform = "translateX(" + -displacement + "px) translateZ(0)";
                        // 表尾
                        if (self.colCount) {
                            footTable.style.webkitTransform = "translateX(" + -displacement + "px) translateZ(0)";
                            footTable.style.transform = "translateX(" + -displacement + "px) translateZ(0)";
                        }
                    }
                    /*if(isScroll){
                        animationId = requestAnimationFrame(touchMoveHandler);
                    }else{
                        cancelAnimationFrame(animationId);
                    }*/
                }; /*
                let isAnimation = false,
                    timer = null,
                    isRevert = true,
                    mainThead,
                    leftThead,
                    pseudoThead;
        
                let createTHead = (scroll: number) => {
                    mainThead = this.mainTable.head.tableEl.cloneNode(true) as HTMLElement;
                    leftThead = this.leftTable.head.tableEl.cloneNode(true) as HTMLElement;
                    pseudoThead = this.pseudoTable.head.tableEl.cloneNode(true) as HTMLElement;
                    this.mainTable.body.innerWrapper.style.paddingTop = '41px';
                    this.leftTable.body.innerWrapper.style.paddingTop = '41px';
                    this.pseudoTable.body.innerWrapper.style.paddingTop = '41px';
                    // thead.style.cssText = 'position: absolute; left: 0; top: ' + (scroll - 40) + 'px';
                    this.mainTable.head.wrapper.classList.add('hide');
                    this.leftTable.head.wrapper.classList.add('hide');
                    this.pseudoTable.head.wrapper.classList.add('hide');
                    mainThead.style.top = scroll + 'px';
                    leftThead.style.top = scroll + 'px';
                    pseudoThead.style.top = scroll + 'px';
                    mainThead.style.transform = '';
                    leftThead.style.transform = '';
                    pseudoThead.style.transform = '';
                    mainThead.classList.add('stack-50');
                    leftThead.classList.add('stack-50');
                    pseudoThead.classList.add('stack-50');
                    d.prepend(this.mainTable.body.innerWrapper, mainThead);
                    d.prepend(this.leftTable.body.innerWrapper, leftThead);
                    d.prepend(this.pseudoTable.body.innerWrapper, pseudoThead);
                };
        
                let revertTHead = (scroll: number) => {
                    this.mainTable.body.innerWrapper.style.paddingTop = '0';
                    this.leftTable.body.innerWrapper.style.paddingTop = '0';
                    this.pseudoTable.body.innerWrapper.style.paddingTop = '0';
                    d.query("table", this.mainTable.head.innerWrapper).style.webkitTransform = `translateX(${-scroll}px) translateZ(0)`;
                    d.query("table", this.mainTable.head.innerWrapper).style.transform = `translateX(${-scroll}px) translateZ(0)`;
                    this.mainTable.head.wrapper.classList.remove('hide');
                    this.leftTable.head.wrapper.classList.remove('hide');
                    this.pseudoTable.head.wrapper.classList.remove('hide');
                    mainThead && d.remove(mainThead);
                    leftThead && d.remove(leftThead);
                    pseudoThead && d.remove(pseudoThead);
                    mainThead = null;
                    leftThead = null;
                    pseudoThead = null;
                };
                let touchMoveHandler = (ev) => {
                    if(!(ev.isFinal || ev.isFirst)){
                        if(ev.direction === 'left' || ev.direction === 'right') {
                            clearTimeout(timer);
                            if (!isAnimation) {
                                isRevert = true;
                                isAnimation = true;
                                let scroll = this.mainTable.body.wrapper.scrollTop === 0
                                    ? 0 : this.mainTable.body.wrapper.scrollTop;
                                createTHead(scroll);
                            }
                        }
                    }
                };
                let interval = () => {
                    clearTimeout(timer);
                    isScroll = true;
                    timer = setTimeout(() => {
                        isScroll = false;
                    }, 1000);
                };
                let scrollHandler = () => {
                    if(isRevert) {
                        isRevert = false;
                        isAnimation && (animationId = requestAnimationFrame(touchScrollHandler));
                        isAnimation && revertTHead(this.mainTable.body.innerWrapper.scrollLeft);
                        isAnimation = false;
                    }
                };*/
                return {
                    on: function () {
                        d.on(_this.mainTable.body.innerWrapper, "scroll", touchMoveHandler);
                        /*d.on(this.mainTable.body.innerWrapper, "scroll", interval);
                        d.on(this.mainTable.body.wrapper, "scroll", scrollHandler);
                        d.on(document, "touchstart", (ev) => {
                            if(!d.matches(ev.target as HTMLElement, 'tr>td')){
                                isAnimation && (animationId = requestAnimationFrame(touchScrollHandler));
                                isAnimation && revertTHead(this.mainTable.body.innerWrapper.scrollLeft);
                                isAnimation = false;
                            }
                        });*/
                    },
                    off: function () {
                        d.off(_this.mainTable.body.innerWrapper, "scroll", touchMoveHandler);
                    }
                };
            })();
            /*
            * 本地过滤
            * */
            _this.filter = (function () {
                var originalData = [];
                return {
                    set: function (params) {
                        var len = _this.tableData.data.length;
                        originalData = _this.tableData.data.slice(0, _this.editing ? len - 1 : len).concat(originalData);
                        var filterData = filteringSeparation(originalData, params);
                        _this.tableData.data = filterData.conformity;
                        originalData = filterData.inconformity;
                        _this.render(0, _this.data.length);
                        if (_this.editing) {
                            _this.rowAdd();
                        }
                        function filteringSeparation(array, filter) {
                            var inconformity = [], conformity = [];
                            var _loop_1 = function (item) {
                                var flag = true;
                                filter.forEach(function (obj) {
                                    if (obj.field === 0) {
                                        flag = false;
                                        for (var key in item) {
                                            if (queryOp(item[key], obj)) {
                                                flag = true;
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        flag = flag && queryOp(item[obj.field], obj);
                                    }
                                    if (obj.not) {
                                        flag = !flag;
                                    }
                                });
                                if (flag) {
                                    conformity.push(item);
                                }
                                else {
                                    inconformity.push(item);
                                }
                            };
                            for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
                                var item = array_1[_i];
                                _loop_1(item);
                            }
                            return {
                                inconformity: inconformity,
                                conformity: conformity,
                            };
                        }
                    },
                    clear: function () {
                        // this.mainTable.tableData.set(allData);
                        var len = _this.tableData.data.length;
                        originalData = _this.tableData.data.slice(0, _this.editing ? len - 1 : len).concat(originalData);
                        _this.tableData.data = originalData;
                        originalData = [];
                        _this.render(0, void 0);
                        if (_this.editing) {
                            _this.rowAdd();
                        }
                    }
                };
                function queryOp(val, condition) {
                    switch (condition.op) {
                        case 2: //等于
                            if (val == condition.values[0]) {
                                return true;
                            }
                            break;
                        case 3: //大于
                            if (val > condition.values[0]) {
                                return true;
                            }
                            break;
                        case 4: //大于等于
                            if (val >= condition.values[0]) {
                                return true;
                            }
                            break;
                        case 5: //小于
                            if (val < condition.values[0]) {
                                return true;
                            }
                            break;
                        case 6: //小于等于
                            if (val <= condition.values[0]) {
                                return true;
                            }
                            break;
                        case 7: //介于 between
                            if (val >= condition.values[0] && val <= condition.values[1]) {
                                return true;
                            }
                            break;
                        case 9: //包含 like
                            if ((typeof val !== "undefined" && val !== null) && (val.toString().indexOf(condition.values[0]) > -1)) {
                                return true;
                            }
                            break;
                        case 10: //为空 isnull
                            if (!val && val !== 0) {
                                return true;
                            }
                            break;
                    }
                    return false;
                }
            })();
            // 编辑相关方法与事件
            _this.edit = (function () {
                var self = _this, editingCell = null, editedAddIndexes = [], deletedIndexes = [], deletedData = [], changedIndexes = [], editEvent = function (e) {
                    e.preventDefault();
                    var td = d.closest(e.target, 'td');
                    var rowIndex = parseInt(td.parentElement.dataset.index), // 当前行
                    columnIndex = _this.getColIndex(td.dataset.name); //当前列
                    editingCell = _this.rows[rowIndex] ? _this.rows[rowIndex].cells[columnIndex] : null;
                    var isInsert = _this.rows[rowIndex] ? editedAddIndexes.indexOf(_this.rows[rowIndex].data[TableBase_1.TableBase.GUID_INDEX]) > -1 : false;
                    if (tools.isNotEmpty(editingCell) && !editingCell.editing &&
                        (_this.editor.updatable || (isInsert && _this.editor.insertble))) {
                        if (_this.editor.rowCanInit(_this.rows[rowIndex]) &&
                            _this.editor.cellCanInit(editingCell.column, isInsert ? 1 : 0)) {
                            editingCell.editing = true;
                        }
                    }
                    // console.log(this.rows[rowIndex].cells[columnIndex]);
                };
                function pcEditingScroll(ev) {
                    ev.stopPropagation();
                    if (this.scrollLeft !== 0) {
                        var scrollLeft = this.scrollLeft + 300;
                        this.scrollLeft = 0;
                        var translate_1 = d.query(".scroll-container", self.wrapper).scrollLeft += scrollLeft;
                        d.queryAll(".main-table table", self.wrapper).forEach(function (el) {
                            el.style.transform = "translateX(" + -translate_1 + "px) translateZ(0)";
                        });
                    }
                }
                function mbEditingScroll(ev) {
                    ev.stopPropagation();
                    if (this.scrollLeft !== 0) {
                        var scrollLeft = this.scrollLeft;
                        this.scrollLeft = 0;
                        self.mainTable.body.innerWrapper.scrollLeft += scrollLeft;
                    }
                }
                var selector = '.section-inner-wrapper:not(.pseudo-table) tbody td:not(.disabled-cell):not(.cell-editing)';
                return {
                    addIndex: {
                        add: function (num) {
                            editedAddIndexes.push(num);
                        },
                        del: function (num) {
                            if (typeof num === 'number') {
                                var index = editedAddIndexes.indexOf(num);
                                index > -1 && editedAddIndexes.splice(index, 1);
                            }
                            else {
                                editedAddIndexes = [];
                            }
                        },
                        get: function () {
                            if (_this.editor) {
                                return editedAddIndexes.slice(0, _this.editor.autoInsert ? editedAddIndexes.length - 1 : editedAddIndexes.length);
                            }
                            else {
                                return editedAddIndexes.slice();
                            }
                        },
                        spaceRowIndex: function () {
                            return editedAddIndexes[editedAddIndexes.length - 1];
                        }
                    },
                    changeIndex: {
                        add: function (num) {
                            changedIndexes.push(num);
                        },
                        del: function (num) {
                            if (typeof num === 'number') {
                                var index = changedIndexes.indexOf(num);
                                index > -1 && changedIndexes.splice(index, 1);
                            }
                            else {
                                changedIndexes = [];
                            }
                        },
                        get: function () {
                            return changedIndexes.slice();
                        },
                    },
                    delIndex: {
                        add: function (num, data) {
                            deletedIndexes.push(num);
                            deletedData.push(Object.assign({}, data || {}));
                        },
                        del: function (num) {
                            if (typeof num === 'number') {
                                var index = deletedIndexes.indexOf(num);
                                if (index > -1) {
                                    deletedIndexes.splice(index, 1);
                                    deletedData.splice(index, 1);
                                }
                            }
                            else {
                                deletedIndexes = [];
                                deletedData = [];
                            }
                        },
                        get: function () {
                            return deletedIndexes.slice();
                        },
                        getData: function () {
                            return deletedData.map(function (obj) {
                                return Object.assign({}, obj || {});
                            });
                        }
                    },
                    event: {
                        // 编辑状态事件
                        click: {
                            on: function () { return d.on(_this.wrapper, 'click', selector, editEvent); },
                            off: function () {
                                d.off(_this.wrapper, 'click', selector, editEvent);
                                _this.edit.destroyCellInput();
                            },
                        },
                        // 编辑时触发滚动事件
                        scroll: {
                            on: function () {
                                if (!tools.isMb) {
                                    d.on(_this.mainTable.body.innerWrapper, 'scroll', pcEditingScroll);
                                    d.on(_this.mainTable.body.wrapper, 'scroll', pcEditingScroll);
                                }
                                else {
                                    d.on(_this.mainTable.body.wrapper, 'scroll', mbEditingScroll);
                                }
                            },
                            off: function () {
                                if (!tools.isMb) {
                                    d.off(_this.mainTable.body.innerWrapper, 'scroll', pcEditingScroll);
                                    d.off(_this.mainTable.body.wrapper, 'scroll', pcEditingScroll);
                                }
                                else {
                                    d.off(_this.mainTable.body.wrapper, 'scroll', mbEditingScroll);
                                }
                            }
                        }
                    },
                    destroyCellInput: function () {
                        editingCell && (editingCell.editing = false);
                        editingCell = null;
                    }
                };
            })();
            // 监听拖动改变列宽事件
            _this.colWidthEvent = (function () {
                var name = "", offsetX = 0, col = null, selector = '.section-inner-wrapper:not(.pseudo-table) th';
                var changeColHandler = function (e) {
                    if (e.isFirst) {
                        _this.hoverEvent.off();
                        var node = e.srcEvent.target;
                        if (node.nodeName === "TH") {
                            if (e.target.dataset.name !== 'selectCol') {
                                d.query("body").classList.add("showCursor");
                                name = e.target.dataset["name"];
                                col = _this.columnGet(e.target.dataset.name);
                            }
                        }
                        offsetX = 0;
                    }
                    else {
                        if (name !== "") {
                            _this.isChangeColWidth = true;
                            offsetX = offsetX + e.deltaX;
                            if (e.direction === 'right') {
                                if (offsetX >= 0) {
                                    _this.changeColWidth(col.width + e.deltaX, name);
                                }
                            }
                            else {
                                _this.changeColWidth(col.width + e.deltaX, name);
                            }
                            _this.changeScrollWidth(0);
                        }
                    }
                    if (e.isFinal) {
                        _this.hoverEvent.on();
                        name = "";
                        d.query("body").classList.remove("showCursor");
                        _this.isChangeColWidth = false;
                        _this.setMainTableWidth();
                    }
                };
                return {
                    on: function () {
                        d.on(_this.wrapper, "pan", selector, changeColHandler);
                        _this.columns.forEach(function (column) {
                            column.isResize = true;
                        });
                    },
                    off: function () {
                        d.off(_this.wrapper, "pan", selector, changeColHandler);
                        _this.columns.forEach(function (column) {
                            column.isResize = false;
                        });
                    }
                };
            })();
            // 右键菜单
            _this.rightMenuEvent = (function () {
                var menuEvent = function (e) {
                    e.preventDefault();
                };
                return {
                    on: function () { return d.on(_this.wrapper, 'contextmenu', 'tbody td', menuEvent); },
                    off: function () { return d.off(_this.wrapper, 'contextmenu', 'tobdy td', menuEvent); }
                };
            })();
            // // 双击开启编辑状态
            // private openEditEvent = (() => {
            //     let handler = null,
            //         selector = '.section-inner-wrapper:not(.pseudo-table) tbody';
            //     return {
            //         on: () => d.on(this.wrapper, 'dblclick', selector, handler = () => this.editing = true),
            //         off: () => d.off(this.wrapper, 'dblclick', selector, handler)
            //     }
            // })();
            // 选中效果
            _this.selectedEvent = (function () {
                // 用于标记shiftkey的起点位置
                var shiftComparePosition = {
                    rowIndex: -1,
                    columnIndex: -1
                };
                var isDrag = true, canSelectMbSet = ['cell-link'], // 当td中包含该class，则在移动端被点击时也可选中；
                timer = null;
                // 点击选中
                var selectedEvent = function (e) {
                    isDrag = false;
                    var td = d.closest(e.target, 'td'), isCanSelectMb = false, // 在移动端是否可被点击选中
                    rowIndex = parseInt(td.parentElement.dataset.index), // 当前行
                    columnIndex = _this.getColIndex(td.dataset.name); //当前列
                    // console.log(columnIndex);
                    //判断td在移动端是否可被选中
                    if (tools.isMb && td) {
                        for (var _i = 0, canSelectMbSet_1 = canSelectMbSet; _i < canSelectMbSet_1.length; _i++) {
                            var className = canSelectMbSet_1[_i];
                            if (td.classList.contains(className)) {
                                isCanSelectMb = true;
                                break;
                            }
                        }
                    }
                    if (_this.pseudoTable && td.dataset.name === 'selectCol') {
                        if (_this.pseudoTable._type === 'number') {
                            // 未使用checkbox
                            if (e.ctrlKey === true) {
                                singleSelectedPseudoTableCell(rowIndex);
                                shiftComparePosition.rowIndex = rowIndex;
                                shiftComparePosition.columnIndex = 0;
                            }
                            else if (e.shiftKey === true) {
                                if (shiftComparePosition.rowIndex === -1) {
                                    shiftComparePosition.rowIndex = rowIndex;
                                }
                                shiftComparePosition.columnIndex = 0;
                                _this._clearAllSelectedCells();
                                var columnIndex_1 = _this.columns.length - 1;
                                shiftKeySelectedTable({ rowIndex: rowIndex, columnIndex: columnIndex_1 });
                            }
                            else {
                                !_this.mutiSelect && _this._clearAllSelectedCells();
                                singleSelectedPseudoTableCell(rowIndex);
                                shiftComparePosition.rowIndex = rowIndex;
                                shiftComparePosition.columnIndex = 0;
                            }
                        }
                        _this.trigger(FastTable.EVT_SELECTED, rowIndex);
                    }
                    else if (!tools.isMb || isCanSelectMb) {
                        // 点击表格cell选中只在 “PC端” 或者 “cell 为link类型的 ”开启；
                        if (e.ctrlKey === true) {
                            if (_this.selectedCells[rowIndex].length === _this.rowGet(rowIndex).cells.length) {
                                var row = _this.rowGet(rowIndex);
                                row && row._selectedInnerRowSet(true);
                            }
                            else {
                                singleSelectedTabelCell(rowIndex, columnIndex);
                            }
                            shiftComparePosition.rowIndex = rowIndex;
                            shiftComparePosition.columnIndex = columnIndex;
                        }
                        else if (e.shiftKey === true) {
                            if (shiftComparePosition.columnIndex === -1 && shiftComparePosition.rowIndex === -1) {
                                shiftComparePosition.columnIndex = columnIndex;
                                shiftComparePosition.rowIndex = rowIndex;
                            }
                            _this._clearAllSelectedCells();
                            shiftKeySelectedTable({ rowIndex: rowIndex, columnIndex: columnIndex });
                        }
                        else {
                            var cell = _this.cellGet(columnIndex, rowIndex);
                            if (e.button === 2 && cell.selected === true) {
                            }
                            else {
                                _this._clearAllSelectedCells();
                                singleSelectedTabelCell(rowIndex, columnIndex);
                                shiftComparePosition.rowIndex = rowIndex;
                                shiftComparePosition.columnIndex = columnIndex;
                            }
                        }
                    }
                    _this._drawSelectedCells();
                    _this.pseudoTable.setCheckBoxStatus();
                    /*clearTimeout(timer);
                    timer = setTimeout(() => {
                        this.trigger(FastTable.EVT_SELECTED);
                        clearTimeout(timer);
                    }, 100);*/
                };
                // 拖动选中
                var dragSelectedEvent = function (e) {
                    var td = d.closest(e.target, 'td');
                    var /*rowIndex = parseInt(td.parentElement.dataset.index), // 当前行*/ rowIndex = parseInt(td.parentElement.dataset.index), columnIndex = _this.getColIndex(td.dataset.name); //当前列
                    var previousePostion = {
                        rowIndex: -1,
                        columnIndex: -1
                    };
                    isDrag = true;
                    var moveHandler = function (ev) {
                        if (isDrag) {
                            shiftComparePosition.columnIndex = columnIndex;
                            shiftComparePosition.rowIndex = rowIndex;
                            isDrag = false;
                        }
                        var td = d.closest(ev.target, 'td');
                        if (ev.target.tagName === 'TD') {
                            var currentPosition = {
                                rowIndex: parseInt(td.parentElement.dataset.index),
                                columnIndex: _this.getColIndex(ev.target.dataset.name)
                            };
                            if (currentPosition === previousePostion) {
                                return;
                            }
                            if (_this.pseudoTable && td.dataset.name === 'selectCol') {
                            }
                            else {
                                if (ev.ctrlKey === true) {
                                }
                                else if (ev.shiftKey === true) {
                                }
                                else {
                                    var cell = _this.cellGet(currentPosition.columnIndex, currentPosition.rowIndex);
                                    if (e.button === 2 && cell.selected === true) {
                                    }
                                    else {
                                        if (ev.target.dataset.name !== 'selectCol') {
                                            _this._clearAllSelectedCells();
                                            shiftKeySelectedTable(currentPosition);
                                        }
                                    }
                                }
                            }
                            previousePostion = currentPosition;
                            _this._drawSelectedCells();
                            _this.pseudoTable.setCheckBoxStatus();
                        }
                    };
                    var newMoveHandler = tools.pattern.throttling(moveHandler, 30);
                    var endHandler;
                    d.on(document, 'mousemove', newMoveHandler);
                    d.on(document, 'mouseup', endHandler = function () {
                        isDrag = false;
                        d.off(document, 'mousemove', newMoveHandler);
                        d.off(document, 'mouseup', endHandler);
                        clearTimeout(timer);
                        timer = setTimeout(function () {
                            _this.trigger(FastTable.EVT_SELECTED);
                            clearTimeout(timer);
                        }, 100);
                    });
                };
                var singleSelectedTabelCell = function (row, column) {
                    var rowObj = _this.rowGet(row);
                    if (rowObj) {
                        var cell = rowObj.cellGet(column);
                        if (!cell.isVirtual)
                            cell._selectedInnerSet(true);
                    }
                };
                var singleSelectedPseudoTableCell = function (row) {
                    // let pseudoTableRow = this.pseudoTable.body.rowGet(tools.isEmpty(domIndex) ? row : domIndex);
                    // pseudoTableRow.cells[0].selected = true; // 伪列选中
                    var sRow = _this.rowGet(row);
                    (_this.mutiSelect && sRow) ? sRow._selectedInnerRowSet(!sRow.selected) : sRow._selectedInnerRowSet(true);
                };
                var shiftKeySelectedTable = function (currentPosition) {
                    var minRowIndex = Math.min(shiftComparePosition.rowIndex, currentPosition.rowIndex), maxRowIndex = Math.max(shiftComparePosition.rowIndex, currentPosition.rowIndex), minColumnIndex = Math.min(shiftComparePosition.columnIndex, currentPosition.columnIndex), maxColumnIndex = Math.max(shiftComparePosition.columnIndex, currentPosition.columnIndex);
                    if (maxColumnIndex - minColumnIndex === _this.columns.length - 1) {
                        // 选择整行
                        for (var i = minRowIndex; i <= maxRowIndex; i++) {
                            var row = _this.rowGet(i);
                            row && row._selectedInnerRowSet(true);
                        }
                    }
                    else {
                        for (var i = minRowIndex; i <= maxRowIndex; i++) {
                            for (var j = minColumnIndex; j <= maxColumnIndex; j++) {
                                var row = _this.rowGet(i);
                                if (row) {
                                    var cell = row.cellGet(j);
                                    if (!cell.isVirtual)
                                        cell._selectedInnerSet(true);
                                }
                            }
                        }
                    }
                };
                var selector = '.section-inner-wrapper:not(.pseudo-table) tbody td:not(.disabled-cell)', eventName = tools.isMb ? 'click' : 'mousedown';
                return {
                    selectedOn: function () { return d.on(_this.wrapper, eventName, 'tbody td:not(.disabled-cell)', selectedEvent); },
                    selectedOff: function () { return d.off(_this.wrapper, eventName, 'tbody td:not(.disabled-cell)', selectedEvent); },
                    dragOn: function () { return d.on(_this.wrapper, 'mousedown', selector, dragSelectedEvent); },
                    dragOff: function () { return d.off(_this.wrapper, 'mousedown', selector, dragSelectedEvent); }
                };
            })();
            _this.loadedError = function () {
                var clickHandler = null;
                _this.noData.toggle(false);
                _this.errorData.toggle(true);
                d.on(_this.mainTable.body.wrapper, 'click', clickHandler = function () {
                    _this.tableData.refresh();
                    _this.errorData.toggle(false);
                    _this.noData.toggle(true);
                    d.off(_this.mainTable.body.wrapper, 'click', clickHandler);
                });
            };
            _this.errorData = (function () {
                return {
                    toggle: function (isShow) {
                        _this.mainTable.body.wrapper.classList.remove(FastTable.TABLE_NOT_DATA_CLASS);
                        _this.mainTable.body.wrapper.classList.toggle(FastTable.TABLE_LOADED_ERROR_CLASS, isShow);
                    }
                };
            })();
            _this.noData = (function () {
                return {
                    toggle: function (isShow) {
                        _this.mainTable.body.wrapper.classList.remove(FastTable.TABLE_LOADED_ERROR_CLASS);
                        _this.mainTable.body.wrapper.classList.toggle(FastTable.TABLE_NOT_DATA_CLASS, isShow);
                    }
                };
            })();
            _this.hoverMoreEvent = (function () {
                var selected = '.section-inner-wrapper:not(.pseudo-table) td', overHandler = null, outHandler = null, moreWrapper, timer = null;
                return {
                    on: function () {
                        d.on(_this.wrapper, 'mouseover', selected, overHandler = function (ev) {
                            clearTimeout(timer);
                            moreWrapper && d.remove(moreWrapper);
                            var td = d.closest(ev.target, 'td'), rowIndex = td.parentElement.dataset['index'], colName = td.dataset['name'], cell = _this.rows[rowIndex].cellGet(colName);
                            if (cell.isMore) {
                                moreWrapper = h("div", { className: "more-detail" });
                                moreWrapper.innerHTML = cell.text;
                                d.setPosition(moreWrapper, cell.wrapper, true);
                                moreWrapper.style.zIndex = '9';
                                d.on(moreWrapper, 'mouseover', function () {
                                    clearTimeout(timer);
                                    d.off(moreWrapper, 'mouseover');
                                    d.on(moreWrapper, 'mouseout', function () {
                                        clearTimeout(timer);
                                        timer = setTimeout(function () {
                                            moreWrapper && d.remove(moreWrapper);
                                            moreWrapper = null;
                                        }, 100);
                                        d.off(moreWrapper, 'mouseout');
                                    });
                                });
                            }
                        });
                        d.on(_this.wrapper, 'mouseout', outHandler = function () {
                            clearTimeout(timer);
                            timer = setTimeout(function () {
                                moreWrapper && d.remove(moreWrapper);
                                moreWrapper = null;
                            }, 100);
                        });
                    },
                    off: function () {
                        moreWrapper && d.remove(moreWrapper);
                        moreWrapper = null;
                        d.off(_this.wrapper, 'mouseover', selected, overHandler);
                        d.off(_this.wrapper, 'mouseout', outHandler);
                    }
                };
            })();
            _this.hoverEvent = (function () {
                var selected = '.section-inner-wrapper:not(.pseudo-table) th', column = null, overHandler = null, outHandler = null;
                return {
                    on: function () {
                        d.on(_this.wrapper, 'mouseover', selected, overHandler = function (ev) {
                            var th = d.closest(ev.target, 'th');
                            column = _this.columnGet(th.dataset.name);
                            column && column.bodyWrapper.classList.add('hover');
                        });
                        d.on(_this.wrapper, 'mouseout', selected, outHandler = function () {
                            column && column.bodyWrapper.classList.remove('hover');
                            column = null;
                        });
                    },
                    off: function () {
                        d.off(_this.wrapper, 'mouseover', selected, overHandler);
                        d.off(_this.wrapper, 'mouseout', selected, outHandler);
                    }
                };
            })();
            _this.click = (function () {
                var handlers = {}, isOn = true;
                /**
                 * 添加事件数组
                 *
                 * 1.缓存handler
                 * 2.判断当前是否为开启状态
                 * 3.是 - 用d.on 添加监听
                 * 4.否 - 不用处理
                 *
                 * @param {string} selector 代理对象
                 * @param {EventListener} handler 事件函数
                 */
                var add = function (selector, handler) {
                    handlers[selector] = handlers[selector] || [];
                    handlers[selector].push(handler);
                    isOn && d.on(_this.wrapper, 'click', selector, handler);
                };
                /**
                 * 删除事件数组
                 *
                 * 1.从缓存删除handler
                 * 2.判断当前是否为开启状态
                 * 3.是 - 用d.off 移除监听
                 * 4.否 - 不用处理
                 *
                 * @param {string} selector 代理对象
                 * @param [handler]
                 */
                var remove = function (selector, handler) {
                    var selHandlers = handlers[selector];
                    var index = Array.isArray(selHandlers) ? selHandlers.indexOf(handler) : -1;
                    if (index === -1) {
                        return;
                    }
                    selHandlers.splice(index, 1);
                    !selHandlers[0] && delete handlers[selector];
                    isOn && d.off(_this.wrapper, 'click', selector, handler);
                };
                var on = function () {
                    off();
                    isOn = true;
                    var _loop_2 = function (selector) {
                        handlers[selector].forEach(function (handler) {
                            d.on(_this.wrapper, 'click', selector, handler);
                        });
                    };
                    for (var selector in handlers) {
                        _loop_2(selector);
                    }
                };
                var off = function () {
                    isOn = false;
                    var _loop_3 = function (selector) {
                        handlers[selector].forEach(function (handler) {
                            d.off(_this.wrapper, 'click', selector, handler);
                        });
                    };
                    for (var selector in handlers) {
                        _loop_3(selector);
                    }
                };
                return { add: add, remove: remove, on: on, off: off };
            })();
            _this.colsSort = (function () {
                var modal = null, guidIndex = tools.getGuid(), showList = null, body = null, hideList = null, draggingItem = null, draggedItem = null, selectedItem = null, selectedIndex = null, isFirst = true, handler = null, draggingType = 'show', hideListTop = 0, showListTop = 0, offset = { x: 0, y: 0 }, procedure = [], items = null, hideItems = [];
                function initModal() {
                    return new Modal_1.Modal({
                        container: document.body,
                        header: '列管理',
                        position: tools.isMb ? 'full' : '',
                        width: '730px',
                        isShow: true,
                    });
                }
                var dragEvent = {
                    on: function () {
                        d.on(body, 'touchstart', '.col-admin-list', handler = function (ev) {
                            var handleMove, handleEnd, disX = 0, disY = 0;
                            draggedItem = d.closest(ev.target, '.col-list-item>div');
                            draggingType = d.closest(ev.target, 'ul').classList.contains('list-show') ? 'hide' : 'show';
                            if (draggedItem !== null) {
                                draggingItem = draggedItem.cloneNode(true);
                                draggedItem.classList.add('placeholder');
                                selectedItem = draggedItem;
                                selectedItem.classList.add('selected');
                                draggingItem.classList.add('dragging');
                                offset.x = ev.targetTouches[0].clientX;
                                offset.y = ev.targetTouches[0].clientY;
                                disX = offset.x - draggedItem.getBoundingClientRect().left;
                                disY = offset.y - draggedItem.getBoundingClientRect().top;
                                offset.x = offset.x - disX;
                                offset.y = offset.y - disY;
                                draggingItem.style.cssText = 'transform: translateX(' + offset.x +
                                    'px) translateY(' + offset.y + 'px) translateZ(0)';
                                d.append(document.body, draggingItem);
                                hideListTop = hideList.getBoundingClientRect().top;
                                showListTop = showList.getBoundingClientRect().top + showList.getBoundingClientRect().height;
                                items.forEach(function (obj) {
                                    var offset = obj.el.getBoundingClientRect();
                                    obj.x = offset.left;
                                    obj.y = offset.top;
                                    obj.w = offset.width;
                                    obj.h = offset.height;
                                });
                            }
                            d.on(document, 'touchmove', handleMove = tools.pattern.throttling(function (e) {
                                // isHide = (e as TouchEvent).targetTouches[0].clientY > hideListTop;
                                if (draggingItem !== null) {
                                    moveChange(offset.x, offset.y);
                                    offset.x = e.targetTouches[0].clientX - disX;
                                    offset.y = e.targetTouches[0].clientY - disY;
                                    draggingItem.style.cssText = 'transform: translateX(' + offset.x +
                                        'px) translateY(' + offset.y + 'px) translateZ(0)';
                                }
                            }, 30));
                            d.on(document, 'touchend', handleEnd = function (ev) {
                                isFirst = true;
                                exchange();
                                d.off(document, 'touchmove', handleMove);
                                d.off(document, 'touchend', handleEnd);
                            });
                        });
                    },
                    off: function () {
                        d.off(body, 'touchstart', '.col-admin-list', handler);
                    }
                };
                var exchange = function () {
                    draggedItem && draggedItem.classList.remove('placeholder');
                    draggingItem && draggingItem.classList.remove('dragging');
                    selectedItem && selectedItem.classList.remove('selected');
                    if (draggedItem !== selectedItem) {
                        if (selectedItem.classList.contains('list-' + draggingType)) {
                            d.remove(draggedItem.parentElement);
                            draggingItem.removeAttribute('style');
                            var li = h("li", { className: "col-list-item" }, draggingItem);
                            if (draggingType === 'hide') {
                                d.append(hideList, li);
                                for (var i = 0; i < items.length; i++) {
                                    var item = items[i];
                                    if (item.el.dataset['name'] === draggedItem.dataset['name']) {
                                        var item_1 = items.splice(i, 1)[0];
                                        item_1.el = draggingItem;
                                        hideItems.push(item_1);
                                        break;
                                    }
                                }
                            }
                            else {
                                d.append(showList, li);
                                for (var i = 0; i < hideItems.length; i++) {
                                    var item = hideItems[i];
                                    if (item.el.dataset['name'] === draggedItem.dataset['name']) {
                                        var item_2 = hideItems.splice(i, 1)[0];
                                        item_2.el = draggingItem;
                                        items.push(item_2);
                                        break;
                                    }
                                }
                            }
                            procedure.push([draggingType, draggedItem.dataset.name]);
                        }
                        else {
                            var cloneNode = selectedItem.cloneNode(true);
                            draggingItem.removeAttribute('style');
                            for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
                                var item = items_1[_i];
                                if (item.el === draggedItem) {
                                    item.el = cloneNode;
                                }
                            }
                            items[selectedIndex].el = draggingItem;
                            procedure.push([draggingItem.dataset.name, selectedItem.dataset.name]);
                            d.replace(draggingItem, selectedItem);
                            d.replace(cloneNode, draggedItem);
                        }
                    }
                    else {
                        d.remove(draggingItem);
                    }
                    draggedItem = null;
                    draggingItem = null;
                    selectedItem = null;
                };
                var moveChange = function (x, y) {
                    if ((draggingType === 'hide' && y > hideListTop) || (draggingType === 'show' && y < showListTop)) {
                        selectedItem && selectedItem.classList.remove('selected');
                        selectedItem = draggingType === 'hide' ? hideList : showList;
                        selectedItem.classList.add('selected');
                    }
                    else {
                        var begin = (Math.pow(items[0].x - x, 2) + Math.pow(items[0].y - y, 2));
                        selectedIndex = 0;
                        for (var i = 1; i < items.length; i++) {
                            var item = items[i];
                            var offset_1 = (Math.pow(item.x - x, 2) + Math.pow(item.y - y, 2));
                            if (offset_1 < begin) {
                                begin = offset_1;
                                selectedIndex = i;
                            }
                        }
                        selectedItem && selectedItem.classList.remove('selected');
                        selectedItem = items[selectedIndex].el;
                        selectedItem.classList.add('selected');
                    }
                };
                return {
                    open: function () {
                        showList = h("ul", { className: "col-admin-list list-show" });
                        hideList = h("ul", { className: "col-admin-list list-hide" });
                        items = [];
                        var showFrag = document.createDocumentFragment(), hideFrag = document.createDocumentFragment();
                        _this.columns.forEach(function (col, index) {
                            if (!col.isVirtual) {
                                var div = h("div", { "data-index": index + '', "data-name": col.name },
                                    h("span", null, col.title));
                                var li = h("li", { className: "col-list-item" }, div);
                                if (col.show) {
                                    showFrag.appendChild(li);
                                    items.push({ el: div, index: index });
                                }
                                else {
                                    hideFrag.appendChild(li);
                                    hideItems.push({ el: div, index: index });
                                }
                            }
                        });
                        d.append(showList, showFrag);
                        d.append(hideList, hideFrag);
                        var names = items.map(function (item) {
                            return item.el.dataset.name;
                        });
                        body = h("div", { className: "col-admin-content" },
                            h("h4", { className: "title" }, "\u663E\u793A"),
                            showList,
                            h("h4", { className: "title" }, "\u9690\u85CF"),
                            hideList);
                        if (modal === null) {
                            modal = initModal();
                            modal.body = body;
                            modal.modalHeader.rightPanel = (function () {
                                var rightInputBox = new InputBox_1.InputBox(), clearBtn = new Button_1.Button({
                                    content: '确定',
                                    onClick: function () {
                                        _this.columnsSort(procedure);
                                        procedure = [];
                                        dragEvent.off();
                                        modal.isShow = false;
                                    }
                                });
                                rightInputBox.addItem(clearBtn);
                                return rightInputBox;
                            })();
                            modal.onClose = function () {
                                procedure = [];
                                dragEvent.off();
                            };
                        }
                        else {
                            modal.body = body;
                            modal.isShow = true;
                        }
                        dragEvent.on();
                    },
                    destroy: function () {
                        dragEvent.off();
                        modal && modal.destroy();
                        modal = null;
                        showList = null;
                        items = null;
                        offset = null;
                        _this.fastTableMenu && _this.fastTableMenu.destory();
                    }
                };
            })();
            _this.dragColumnsEvent = (function () {
                var dragHandler = function (e) {
                    var th = d.closest(e.target, 'th'), isTh = d.matches(e.target, '.section-inner-wrapper:not(.pseudo-table) th>div'), resouceCol = null, destinationCol = null, tempCol = null, offsetLeft = tools.offset.left(_this.mainTable.wrapper), offsetTop = tools.offset.top(_this.mainTable.wrapper), leftTableColsName = [], scrollLeft = 0;
                    _this.leftTable && _this.leftTable.columns.forEach(function (col) {
                        leftTableColsName.push(col.name);
                    });
                    if (isTh) {
                        var dx_1 = e.clientX - tools.offset.left(th), dy_1 = e.clientY + tools.scrollTop() - tools.offset.top(th), mouseMoveEvent_1, thMouseUpEvent_1;
                        resouceCol = _this.columnGet(th.dataset.name);
                        if (!resouceCol) {
                            return;
                        }
                        if (leftTableColsName.indexOf(resouceCol.name) < 0) {
                            scrollLeft = _this.currentSccrollLeft;
                        }
                        tempCol = h("div", { class: "tempCol" }, resouceCol.cells[0][0].text);
                        tempCol.style.width = resouceCol.width + 'px';
                        tempCol.style.left = e.clientX - offsetLeft - dx_1 - scrollLeft + 'px';
                        tempCol.style.top = e.clientY - offsetTop - dy_1 + tools.scrollTop() + 'px';
                        _this.mainTable.wrapper.appendChild(tempCol);
                        mouseMoveEvent_1 = function (me) {
                            tempCol.style.left = me.clientX - scrollLeft - dx_1 - offsetLeft + 'px';
                            tempCol.style.top = me.clientY + tools.scrollTop() - dy_1 - offsetTop + 'px';
                            var meTh = d.closest(me.target, 'th');
                            if (tools.isEmpty(meTh)) {
                                d.remove(tempCol);
                                d.off(document, 'mousemove', mouseMoveEvent_1);
                                d.off(_this.wrapper, 'mousemove', '.section-inner-wrapper:not(.pseudo-table) th', thMouseMoveHandler_1);
                                d.off(_this.wrapper, 'mouseup', '.section-inner-wrapper:not(.pseudo-table) th', thMouseUpEvent_1);
                                d.off(document, 'mouseup', mouseMoveEvent_1);
                            }
                        };
                        var thMouseMoveHandler_1 = function (tm) {
                            var tmTh = d.closest(tm.target, 'th');
                            destinationCol = _this.columnGet(tmTh.dataset.name);
                            if (destinationCol != resouceCol) {
                                d.queryAll('.section-inner-wrapper:not(.pseudo-table) th', _this.mainTable.head.wrapper).forEach(function (th) {
                                    th.classList.remove('dragStyle');
                                });
                                tmTh.classList.add('dragStyle');
                            }
                        };
                        thMouseMoveHandler_1 = tools.pattern.throttling(thMouseMoveHandler_1, 50);
                        d.on(document, 'mousemove', mouseMoveEvent_1);
                        d.on(_this.wrapper, 'mousemove', '.section-inner-wrapper:not(.pseudo-table) th', thMouseMoveHandler_1);
                        var mouseUpHandler = function () {
                            d.remove(tempCol);
                            d.off(document, 'mousemove', mouseMoveEvent_1);
                            d.off(_this.wrapper, 'mouseup', '.section-inner-wrapper:not(.pseudo-table) th', thMouseUpEvent_1);
                            d.off(_this.wrapper, 'mousemove', '.section-inner-wrapper:not(.pseudo-table) th', thMouseMoveHandler_1);
                            d.off(document, 'mouseup', mouseMoveEvent_1);
                        };
                        d.on(document, 'mouseup', mouseMoveEvent_1);
                        d.on(_this.wrapper, 'mouseup', '.section-inner-wrapper:not(.pseudo-table) th', thMouseUpEvent_1 = function (upEv) {
                            var upTh = d.closest(upEv.target, 'th');
                            destinationCol = _this.columnGet(upTh.dataset.name);
                            if (destinationCol != resouceCol) {
                                _this.dragCol(resouceCol, destinationCol);
                            }
                            d.remove(tempCol);
                            d.off(document, 'mousemove', mouseMoveEvent_1);
                            d.off(_this.wrapper, 'mouseup', '.section-inner-wrapper:not(.pseudo-table) th', thMouseUpEvent_1);
                            d.off(_this.wrapper, 'mousemove', '.section-inner-wrapper:not(.pseudo-table) th', thMouseMoveHandler_1);
                            d.off(document, 'mouseup', mouseMoveEvent_1);
                            upTh.classList.remove('dragStyle');
                        });
                    }
                };
                return {
                    on: function () { return d.on(_this.mainTable.head.wrapper, 'mousedown', dragHandler); },
                    off: function () { return d.off(_this.mainTable.head.wrapper, 'mousedown', dragHandler); }
                };
            })();
            _this._editing = false;
            _this.editHandlers = [];
            _this._isWrapLine = false;
            _this.middleButtonEvent = (function () {
                var handler = null;
                return {
                    on: function () {
                        d.on(_this.wrapper, 'mousedown', handler = function (ev) {
                            if (ev.button === 1) {
                                ev.stopPropagation();
                                ev.preventDefault();
                            }
                        });
                    },
                    off: function () {
                        d.off(_this.wrapper, 'mousedown', handler);
                    }
                };
            })();
            _this.maxHeight = para.maxHeight;
            _this.rowFormat = para.rowFormat;
            _this._isLockRight = para.isLockRight || false;
            // this._insertable = tools.isEmpty(para.insertable) ? true : para.insertable;
            _this.cellFormat = para.cellFormat;
            _this.init(para);
            _this.mainTable.body.wrapper.classList.add(FastTable.TABLE_NOT_DATA_CLASS);
            _this.isLockRight && _this.wrapper.classList.add(FastTable.TABLE_RIGHT_LOCK_CLASS);
            if (tools.isMb) {
                d.on(window, 'resize', function () {
                    _this.tablesEach(function (table) {
                        table.adjustColWidth();
                    });
                    _this.calcWidth();
                    _this.setMainTableWidth();
                });
            }
            window['f'] = _this;
            return _this;
        }
        FastTable.prototype.wrapperInit = function () {
            if (tools.isMb) {
                return h("div", { className: "fast-table-container" });
            }
            else {
                return h("div", { className: "fast-table-container" },
                    h("div", { className: "tables" }),
                    h("div", { className: "scroll-container" },
                        h("div", { className: "scroll-content" })));
            }
        };
        FastTable.prototype.on = function (name, handler) {
            _super.prototype.on.call(this, name, handler);
            this.tablesEach(function (table) {
                table.on(name, handler);
            });
        };
        FastTable.prototype.off = function (name, handler) {
            _super.prototype.on.call(this, name, handler);
            this.tablesEach(function (table) {
                table.off(name, handler);
            });
        };
        Object.defineProperty(FastTable.prototype, "colCount", {
            get: function () {
                return this._colCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "isLockRight", {
            get: function () {
                return this._isLockRight;
            },
            enumerable: true,
            configurable: true
        });
        // 初始化
        FastTable.prototype.init = function (para) {
            var _this = this;
            // debugger;
            this._isWrapLine = tools.isMb ? (tools.isEmpty(para.isWrapLine) ? false : para.isWrapLine) : false;
            this._colCount = tools.isEmpty(para.colCount) ? false : para.colCount;
            // this.maxWidth = para.maxWidth;
            this.initTable(para);
            this._isFullWidth = tools.isEmpty(para.isFullWidth) ? true : para.isFullWidth;
            if (this.isFullWidth) {
                this.wrapper.classList.add('table-width-full');
            }
            this.mutiSelect = tools.isNotEmpty(para.pseudo) ? !!para.pseudo.multi : false;
            this.noData.toggle(true);
            this.tableData = new FastTableData_1.FastTableData({
                ajax: para.ajax,
                page: para.page,
                data: para.data,
                ftable: this,
                render: function (start, length, isRefresh) {
                    if (!tools.isMb && !_this.tableData.serverMode) {
                        if (isRefresh) {
                            _this.tableData.originalData = _this.tableData.data;
                        }
                        tools.isEmpty(_this.tableData.originalData) && (_this.tableData.originalData = _this.tableData.data);
                        _this.tableData.data = _this.tableData.originalData.slice(start, start + length);
                        start = 0;
                    }
                    _this.render(start, length);
                }
            });
            // this.data = para.data;
            // 索引列
            if (para.pseudo) {
                var _a = para.pseudo, type = _a.type, isShow = _a.isShow;
                this.initPseudoTable(type, isShow);
            }
            // else {
            //     this.pseudoTable = null;
            // }
            // this.setWrapperPaddingLeft(this.calcMainTableLeftOffSet(0));
            // setTimeout(() => {
            //     //   监听滚动事件
            //     if (!tools.isMb) {
            //         // PC端
            //         this.changeScrollWidth(0);
            //         this.scrollEvent.on();
            //     } else {
            //         //  移动端
            //         // this.wrapper.querySelector('.scroll-container').classList.add('hide');
            //         this.touchMoveEvent.on();
            //     }
            // }, 200);
            this.isChangeColWidth = false;
            // 开启拖动改变列宽功能
            if (para.isResizeCol) {
                this.colWidthEvent.on();
            }
            // 开启选中状态
            if (para.dragSelect) {
                this.selectedEvent.dragOn();
            }
            if (para.clickSelect) {
                this.selectedEvent.selectedOn();
            }
            // 开启右键菜单
            if (tools.isNotEmpty(para.menu)) {
                this.fastTableMenu = new FastTableMenu_1.FastTableMenu({ items: para.menu, ftable: this });
                // new FastTableMenu({items: para.menu, ftable: this});
            }
            // 双击打开详情页
            // d.on(this.wrapper, 'dblclick', 'tbody td', (e) => {
            //     let index = parseInt(e.srcElement.parentElement.dataset.index);
            //     let row = this.rowGet(index);
            //     let cols: ITableCol[] = [];
            //     this.columns.forEach((col) => {
            //         let obj = {
            //             name: col.name,
            //             title: col.cells[0][0].text
            //         };
            //         cols.push(obj);
            //     });
            //     let detailCells = row.cells;
            //     let detail = new RowDetail({
            //         detailCols: cols,
            //         detailCells: detailCells
            //     });
            //     let modal = new Modal({
            //         body: detail.wrapper,
            //         width: '400px',
            //         header: '查看详情',
            //         isOnceDestroy: true
            //     });
            // })
            if (para.sort) {
                this.sortEvent.on();
            }
            // if (tools.isMb) {
            //     this.sortEvent('touchstart');
            // } else {
            //     this.sortEvent('click');
            // }
            if (para.dragCol) {
                this.dragColumnsEvent.on();
            }
            if (this.isWrapLine) {
                this.on(FastTable.EVT_CELL_EDIT_CANCEL, function (cell) {
                    _this.setRowHeight(cell);
                });
            }
            if (!tools.isMb) {
                this.hoverEvent.on();
                this.hoverMoreEvent.on();
            }
            this.middleButtonEvent.on();
            this.edit.event.scroll.on();
        };
        ;
        Object.defineProperty(FastTable.prototype, "isFullWidth", {
            get: function () {
                return this._isFullWidth;
            },
            enumerable: true,
            configurable: true
        });
        // 设置表的样式，当伪列和锁列存在不存在时主表的样式
        FastTable.prototype.setTableStyle = function () {
            d.queryAll('.left-table', this.wrapper).forEach(function (el) { return el.style.removeProperty('padding-left'); });
            d.queryAll('.main-table', this.wrapper).forEach(function (el) { return el.style.removeProperty('padding-left'); });
            var leftTable = this.leftTable, paddingLeft = 40, pseudoTable = this.pseudoTable;
            if (tools.isNotEmpty(leftTable) && (tools.isNotEmpty(pseudoTable)) && pseudoTable.isShow) {
                var tables = this.isLockRight ? d.queryAll('.main-table', this.wrapper)
                    : d.queryAll('.left-table', this.wrapper);
                tables.forEach(function (el) { return el.style.paddingLeft = paddingLeft + 'px'; });
            }
            if (tools.isEmpty(leftTable) && (tools.isNotEmpty(pseudoTable)) && pseudoTable.isShow) {
                d.queryAll('.main-table', this.wrapper).forEach(function (el) { return el.style.paddingLeft = paddingLeft + 'px'; });
            }
        };
        // 改变滚动条宽度
        FastTable.prototype.changeScrollWidth = function (width) {
            //     let mwidth = window.getComputedStyle(d.query('.main-table')).width,
            //         mwidth_num = parseInt(mwidth.slice(0,mwidth.length-2));
            if (!tools.isMb) {
                var minus = this.tableData.data.length * 30 > this.mainTable.maxHeight ? 0 : 11;
                width = (this.mainTable.width + this.calcMainTableLeftOffSet(width) - minus) + 7;
                d.query(".scroll-content", this.wrapper).style.width = width + "px";
            }
            // console.log(this.mainTable.width);
            // PC端设置表格高度
            // let fwidth = window.getComputedStyle(d.query('.fast-table-container')).width,
            //     fwidth_num = parseInt(fwidth.slice(0,fwidth.length-2));
            // let height = 0;
            // if (fwidth_num < this.mainTable.width + this.calcMainTableLeftOffSet(width)){
            //     height += 10;
            // }
            // if (this.tableData.pageSize > 0){
            //     height += 50;
            // }
            // d.query('.tables',this.wrapper).style.height = `calc(100% - ${height}px)`;
            // if ((this.mainTable.width + this.calcMainTableLeftOffSet(width)) <= window.innerWidth) {
            //     this.wrapper.classList.remove('pc-scroll');
            // } else {
            //     this.wrapper.classList.add('pc-scroll');
            // }
        };
        FastTable.prototype.calcMainTableLeftOffSet = function (width) {
            var offsetWidth = 0;
            if (this.leftTable) {
                offsetWidth += this.leftTable.width;
            }
            if (this.pseudoTable) {
                offsetWidth += this.pseudoTable.width;
            }
            offsetWidth += width;
            return offsetWidth;
        };
        ;
        FastTable.prototype.initTable = function (para) {
            var _this = this;
            var cols = para.cols, fastTableCols = [[], []];
            if (cols.length === 1) {
                for (var i = 0; i < cols[0].length; i++) {
                    if (cols[0][i].isFixed) {
                        fastTableCols[1].push(cols[0][i]);
                    }
                    else {
                        fastTableCols[0].push(cols[0][i]);
                    }
                }
            }
            else {
                fastTableCols[0][0] = [];
                for (var i = 0; i < cols[0].length; i++) {
                    var rowspan = tools.isEmpty(cols[0][i].rowspan) ? 0 : cols[0][i].rowspan;
                    if (cols[0][i].isFixed && rowspan === cols.length) {
                        fastTableCols[1].push(cols[0][i]);
                    }
                    else {
                        fastTableCols[0][0].push(cols[0][i]);
                    }
                }
                for (var i = 1; i < cols.length; i++) {
                    fastTableCols[0].push(cols[i]);
                }
            }
            var con = null;
            if (tools.isMb) {
                con = this.wrapper;
            }
            else {
                con = this.wrapper.querySelector('.tables');
            }
            var mainTable = new TableBase_1.TableBase({
                cols: Array.isArray(fastTableCols[0][0]) ? fastTableCols[0] : [fastTableCols[0]],
                container: con,
                construct: {
                    dataCell: FastTableCell_1.FastTableCell,
                    col: FastTabelColumn_1.FastTableColumn
                },
                cellFormat: this.cellFormat,
                content: this,
                colCount: this.colCount,
                maxHeight: this.maxHeight,
                // colMaxWidth: this.maxWidth,
                isWrapLine: this.isWrapLine,
                deviation: this.isLockRight ? 10 : 0,
            });
            this.tableBases.push(mainTable);
            // 给主表添加类
            this.mainTable.head.innerWrapper.classList.add("main-table");
            this.mainTable.body.innerWrapper.classList.add("main-table");
            if (this.colCount) {
                this.mainTable.foot.innerWrapper.classList.add("main-table");
            }
            if (fastTableCols[1].length > 0) {
                this.createLeftTable(fastTableCols[1]);
            }
            mainTable.on(TableBase_1.TableBase.EVT_COL_COUNT_CHANGED, function (indexes) {
                if (_this.leftTable) {
                    _this.leftTable.colCountByIndex(indexes);
                }
                _this.render(0, void 0, void 0, false);
            });
        };
        // 创建左侧锁列表格
        FastTable.prototype.createLeftTable = function (cols) {
            var _this = this;
            // debugger;
            var leftTable = this.mainTable._createAnnexedTable({
                cols: [cols],
                construct: {
                    dataCell: FastTableCell_1.FastTableCell,
                    col: FastTabelColumn_1.FastTableColumn
                },
                content: this,
                cellFormat: this.cellFormat,
                colCount: this.colCount,
                maxHeight: this.maxHeight,
                // colMaxWidth: this.maxWidth,
                isWrapLine: this.isWrapLine,
            }, TableBase_1.TableBase, 1);
            // leftTable.on(TableBase.EVT_COL_COUNT_CHANGED, (indexes) => {
            //     console.log(indexes);
            // });
            // 加入到基表数组中
            this.tableBases.push(leftTable);
            if (tools.isMb) {
                leftTable.on(TableBase_1.TableBase.EVT_COL_VISIBILITY_CHANGED, function () {
                    _this.setMainTableWidth();
                });
            }
            // 设置样式
            this.leftTable.head.innerWrapper.classList.add("left-table");
            this.leftTable.body.innerWrapper.classList.add("left-table");
            if (this.colCount) {
                this.leftTable.foot.innerWrapper.classList.add("left-table");
            }
            // 设置各表样式
            this.setTableStyle();
        };
        Object.defineProperty(FastTable.prototype, "tableBases", {
            get: function () {
                if (!this._tableBases) {
                    this._tableBases = [];
                }
                return this._tableBases;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "mainTable", {
            get: function () {
                return this.tableBases[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "leftTable", {
            get: function () {
                return this.tableBases[1];
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.tablesEach = function (fun) {
            this.tableBases.forEach(function (t, i) {
                fun(t, i);
            });
        };
        FastTable.prototype.setMainTableWidth = function () {
            if (tools.isMb) {
                var width = 0;
                if (this.pseudoTable) {
                    width += 40;
                }
                if (this.isLockRight) {
                    width -= 10;
                }
                // console.log(width);
                if (this.leftTable) {
                    width += this.leftTable.width;
                    var widthStr = 'calc(100% - ' + width + 'px)';
                    this.mainTable.body.innerWrapper.style.width = widthStr;
                    this.mainTable.head.innerWrapper.style.width = widthStr;
                    this.colCount && (this.mainTable.foot.innerWrapper.style.width = widthStr);
                }
                else {
                    var widthStr = this.isLockRight ? 'calc(100% - 10px)' : '100%';
                    this.mainTable.body.innerWrapper.style.width = widthStr;
                    this.mainTable.head.innerWrapper.style.width = widthStr;
                    this.colCount && (this.mainTable.foot.innerWrapper.style.width = widthStr);
                }
            }
        };
        Object.defineProperty(FastTable.prototype, "pseudoTable", {
            get: function () {
                return this._pseudoTable;
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.initPseudoTable = function (type, isShow) {
            // let count = this.mainTable.body.rows ? this.mainTable.body.rows.length : 0;
            this._pseudoTable = this.mainTable._createAnnexedTable({
                fastTable: this,
                type: type,
                isShow: isShow,
                multiHeadRow: this.mainTable.head.rows.length,
                colCount: this.colCount && { text: ' ' }
            }, FastPseudoTable_1.FastPseudoTable, 0);
            // this._pseudoTable.checkAllBox.onClick = (isChecked) => {
            //     console.log(isChecked);
            // };
            this.setTableStyle();
        };
        Object.defineProperty(FastTable.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.rowGet = function (index) {
            var _this = this;
            var result = [];
            index = tools.toArray(index);
            index.forEach(function (value) {
                result.push(_this.rows[value]);
            });
            return result.length === 1 ? result[0] : result;
        };
        /*rowGet(domIndex: number): FastTableRow {
            let index = null;
            for (let row of this.mainTable.body.rows) {
                if (row && row.domIndex === domIndex) {
                    index = row.index;
                    break;
                }
            }
            return index !== null ? this.rows[index] : null;
        }*/
        FastTable.prototype.resetRowIndex = function () {
            this.rows.forEach(function (row, index) {
                row.index = index;
            });
        };
        FastTable.prototype.rowAdd = function (obj, i) {
            var _this = this;
            if (i === void 0) { i = 0; }
            if (this.editing && this.editor.insertble) {
                var len = Object.keys(this.mainTable.tableData.get()).length;
                this.tableBases.forEach(function (table, index) {
                    table.tableData.add(tools.isEmpty(_this.editor.defData) ? {} : tools.obj.copy(_this.editor.defData), i);
                });
                this.render(0, 1, this.rows.length === 0 ? -1 : i);
                this.initDisabledEditorRow(this.rows[i]);
                this._drawSelectedCells();
                typeof len === 'number' && this.edit.addIndex.add(this.data[i][TableBase_1.TableBase.GUID_INDEX]);
                return len;
            }
            else if (tools.isNotEmpty(obj)) {
                tools.toArray(obj).forEach(function (para) {
                    var fastTableRow = new FastTableRow_1.FastTableRow(para);
                    _this.rows.push(fastTableRow);
                });
                if (this.pseudoTable) {
                    this.pseudoTable.render();
                }
            }
            this.resetRowIndex();
        };
        FastTable.prototype.rowDel = function (index) {
            if (tools.isNotEmpty(index)) {
                var row = [];
                index = tools.toArray(index);
                index.sort(function (a, b) {
                    if (a > b) {
                        return -1;
                    }
                    else if (a < b) {
                        return 1;
                    }
                    else {
                        return 0;
                    }
                });
                var notRowDelIndexes = [], tableData = this.tableData.data;
                var _loop_4 = function (value) {
                    if (this_1.editing) {
                        if (!this_1.editor.rowCanInit(this_1.rows[value])) {
                            if (notRowDelIndexes.indexOf(value + 1) === -1)
                                notRowDelIndexes.push(value + 1);
                            return "continue";
                        }
                    }
                    row.push(this_1.rows[value]);
                    var data = Object.assign({}, tableData[value]);
                    var guidIndex = this_1.editing ? data[TableBase_1.TableBase.GUID_INDEX] : null;
                    this_1.tablesEach(function (table) {
                        if (table) {
                            table.body.rowDel(value);
                        }
                    });
                    if (this_1.editing) {
                        var addIndexObj = this_1.edit.addIndex, changeIndexObj = this_1.edit.changeIndex;
                        if (addIndexObj.get().indexOf(guidIndex) > -1) {
                            addIndexObj.del(guidIndex);
                        }
                        else if (changeIndexObj.get().indexOf(guidIndex) > -1) {
                            changeIndexObj.del(guidIndex);
                            this_1.edit.delIndex.add(guidIndex, data);
                        }
                        else {
                            this_1.edit.delIndex.add(guidIndex, data);
                        }
                    }
                    this_1.rows.splice(value, 1, null);
                };
                var this_1 = this;
                for (var _i = 0, index_1 = index; _i < index_1.length; _i++) {
                    var value = index_1[_i];
                    _loop_4(value);
                }
                this._rows = this._rows.filter(function (row) { return row !== null; });
                this.resetRowIndex();
                if (this.pseudoTable) {
                    this.pseudoTable.render();
                }
                this.noData.toggle(Object.keys(this.tableData.data).length === 0);
                if (notRowDelIndexes.length !== 0) {
                    notRowDelIndexes.reverse();
                    var str = notRowDelIndexes.join('、');
                    Modal_1.Modal.alert('第' + str + '行无法删除');
                }
                return row.length === 1 ? row[0] : row;
            }
            else {
                return null;
            }
        };
        // 获取所有被选择的行，返回行数组
        FastTable.prototype.rowSelectedGet = function () {
            var result = [];
            this.rows.forEach(function (item) {
                if (item.selected) {
                    result.push(item);
                }
            });
            return result;
        };
        // 获取cell
        FastTable.prototype.cellGet = function (col, row) {
            if (this.rows) {
                var fastTableRow = this.rows[row];
                return tools.isNotEmpty(fastTableRow) ? fastTableRow.cellGet(col) : null;
            }
            else {
                return null;
            }
        };
        Object.defineProperty(FastTable.prototype, "columns", {
            // 获取所有列
            get: function () {
                var _this = this;
                var columns = [];
                this.tablesEach(function (table, i) {
                    if (table) {
                        if (_this.isLockRight) {
                            columns = columns.concat(table.columns);
                        }
                        else {
                            columns = table.columns.concat(columns);
                        }
                    }
                });
                return columns;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "columnsVisible", {
            get: function () {
                return this.columns.filter(function (col) { return !col.isVirtual && col.show; });
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.columnGet = function (col) {
            var _this = this;
            var result = [];
            col = tools.toArray(col);
            col.forEach(function (value) {
                result.push(_this.columns[_this.getColIndex(value)] || null);
            });
            return result.length === 1 ? result[0] : result;
        };
        FastTable.prototype.columnAdd = function (col, data, index) {
            if (index === void 0) { index = -1; }
            this.mainTable.columnAdd(col, data);
            if (index !== -1) {
                this.changeColIndex(col.name, index);
            }
        };
        FastTable.prototype.changeColIndex = function (colIndex, index) {
            colIndex = this.getColIndex(colIndex);
            var leftLen = this.leftTable ? this.leftTable.columns.length : 0, insertTable = index >= leftLen ? this.mainTable : this.leftTable, deleteTable = colIndex >= leftLen ? this.mainTable : this.leftTable;
            colIndex = colIndex >= leftLen ? colIndex - leftLen : colIndex;
            index = index >= leftLen ? index - leftLen : index;
            var delCol = deleteTable.columnsDel(colIndex, false);
            insertTable.columnInsertBefore(delCol, index);
        };
        FastTable.prototype.columnDel = function (col) {
            this.mainTable.columnsDel(col, true);
            this.leftTable && this.leftTable.columnsDel(col, true);
            this.mainTable.updateTableWidth();
            this.leftTable.updateTableWidth();
        };
        Object.defineProperty(FastTable.prototype, "data", {
            get: function () {
                return this.tableData.data;
            },
            // 设置表格数据
            set: function (data) {
                // debugger
                if (!Array.isArray(data) || !this.mainTable) {
                    return;
                }
                var tableData = this.tableData;
                tableData.data = data;
                var pageSize = tableData.pageSize === -1 ? void 0 : tableData.pageSize;
                this.render(tableData.current, pageSize);
            },
            enumerable: true,
            configurable: true
        });
        // 添加一行
        FastTable.prototype.dataAdd = function (data) {
            var _this = this;
            // 处理数据
            var dataLen = this.tableData.data.length, rowLen = this.rows.length, maxRowLen = this.tableData.pageSize;
            maxRowLen = Math.ceil((rowLen || 1) / maxRowLen) * maxRowLen;
            tools.toArray(data).forEach(function (data, index) {
                var dataSplit = _this.tableData.dataSplit(data);
                _this.tablesEach(function (table, index) {
                    if (table) {
                        table.tableData.add(dataSplit[index]);
                    }
                });
                rowLen++;
                if (rowLen === maxRowLen) {
                    _this.render(dataLen, index, -1);
                }
            });
            if (rowLen < maxRowLen) {
                this.render(this.rows.length, tools.toArray(data).length, -1);
            }
            if (!this.tableData.serverMode) {
                this.tableData.total = this.tableData.data.length;
            }
        };
        FastTable.prototype.dataDel = function (index) {
            var _this = this;
            var result = [];
            index = tools.toArray(index);
            index.sort().reverse();
            index.forEach(function (value) {
                _this.data.splice(value, 1);
                _this.tablesEach(function (table) {
                    if (table) {
                        table.dataDel(value);
                    }
                });
            });
            if (this.pseudoTable) {
                this.pseudoTable.render();
            }
            return result.length === 1 ? result[0] : result;
        };
        FastTable.prototype.getColIndex = function (index) {
            if (typeof index === "string") {
                this.columns.forEach(function (item, i) {
                    if (item.name === index) {
                        index = i;
                    }
                });
            }
            return typeof index === 'string' ? -1 : index;
        };
        // 处理列数据
        FastTable.prototype.handleRowData = function (data) {
            var cols = [];
            this.tablesEach(function (table) {
                if (table) {
                    cols.push(table.columns);
                }
                else {
                    cols.push([]);
                }
            });
            var fastTableData = [];
            if (Array.isArray(data)) {
                fastTableData = [[], []];
                for (var i = 0; i < data.length; i++) {
                    var rowObj = data[i];
                    var arr = handleData(rowObj);
                    fastTableData[0].push(arr[0]);
                    fastTableData[1].push(arr[1]);
                }
            }
            else {
                fastTableData = handleData(data);
            }
            function handleData(oneData) {
                var arr = [{}, {}];
                var _loop_5 = function (key) {
                    cols.forEach(function (col, index) {
                        col.forEach(function (colItem) {
                            if (colItem.name === key) {
                                arr[index][key] = oneData[key];
                            }
                        });
                    });
                };
                for (var key in oneData) {
                    _loop_5(key);
                }
                return arr;
            }
            return fastTableData;
        };
        // 改变列宽
        FastTable.prototype.changeColWidth = function (width, name) {
            this.columnGet(name).width = width;
        };
        Object.defineProperty(FastTable.prototype, "selectedCells", {
            // 选中的所有cell
            get: function () {
                var cells = [];
                this.rows.forEach(function (row) {
                    var arr = [];
                    row && row.cells.forEach(function (cell) {
                        if (cell.selected === true) {
                            arr.push(cell);
                        }
                    });
                    cells.push(arr);
                });
                return cells;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "selectedRows", {
            // 获取所有选中的行
            get: function () {
                return this.rows.filter(function (row) { return row && row.selected; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "unselectedRows", {
            get: function () {
                return this.rows.filter(function (row) { return !row.selected; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "selectedRowsData", {
            get: function () {
                return this.selectedRows.map(function (row) { return row.data; });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "visibleCol", {
            get: function () {
                var visibleCol = [];
                this.columns.forEach(function (col) {
                    if (col.show) {
                        visibleCol.push(col.name);
                    }
                });
                return visibleCol;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "unselectedRowsData", {
            get: function () {
                return this.unselectedRows.map(function (row) { return row.data; });
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.calcWidth = function () {
            if (this.container) {
                var fullWidth = this.container.clientWidth, allWidth = this.mainTable.width, cols = this.columns || []; // 存放每一列的宽度
                if (this.leftTable) {
                    allWidth += this.leftTable.width;
                }
                if (this.pseudoTable) {
                    allWidth += this.pseudoTable.width;
                }
                var len_1 = 0;
                cols.forEach(function (col) {
                    if (col.show && !col.isVirtual) {
                        len_1++;
                    }
                });
                if (this.isFullWidth && allWidth < fullWidth) {
                    if (len_1 > 0) {
                        var remainingWidth = tools.isMb ? fullWidth - this.width + 2 : fullWidth - this.width - 2, avg_1 = (remainingWidth + 10) / len_1;
                        cols.forEach(function (col) {
                            if (col.show && !col.isVirtual) {
                                col.width += avg_1;
                            }
                        });
                    }
                }
                // 判断有右侧滚动条时，设置右侧锁列与锁头对齐
                if (this.mainTable.body.scrollWrapper.offsetHeight > this.mainTable.body.wrapper.offsetHeight + 10) {
                    if (this.isLockRight) {
                        this.leftTable && (this.leftTable.body.innerWrapper.style.marginRight = '-10px');
                    }
                }
                else {
                    if (this.isLockRight) {
                        this.leftTable && this.leftTable.body.innerWrapper.style.removeProperty('margin-right');
                    }
                }
            }
            var events = this.eventHandlers[FastTable.EVT_WIDTH_CANCEL];
            tools.isNotEmpty(events) && events.forEach(function (handler) {
                typeof handler === 'function' && handler();
            });
            // 超出父元素宽度时，限制最大宽度
            // fullWidthCalc();
            // // 撑开到父元素宽度
            // function fullWidthCalc() {
            // // 平均值
            //     let ave = fullWidth / cols.length,
            //     remainingWidth = ave , // 剩下的宽度
            //     remainingLen = cols.length; // 剩下的列
            //
            //     // 大于平均值的取平均值
            //     for(let col of cols){
            //         if(col.width > ave){
            //             remainingWidth -= col.width; // 剩下的宽度
            //             remainingLen --; // 剩下的数量
            //             col.width = ave;
            //         }
            //     }
            //
            //     let remainingAve = remainingWidth / remainingLen; // 除去大于平均宽度之后的总宽
            //     for(let col of cols){
            //         if(col.width <= ave){
            //             col.width = remainingAve; // 再赋值给剩下的列
            //         }
            //     }
            // }
        };
        FastTable.prototype.render = function (x, y, w, z) {
            var _this = this;
            if (z === void 0) { z = true; }
            this.wrapper.style.display = 'none';
            this.tablesEach(function (table) {
                table.render(x, y, w, z);
                if (_this.tableData.serverMode) {
                    table.adjustColWidth(/*tools.isMb ? Math.max(0, len - this.tableData.pageSize) :*/ 0);
                }
                else {
                    table.adjustColWidth(0);
                }
            });
            // debugger;
            var indexes = this.mainTable.body.rows.map(function (row) { return row ? row.index : null; });
            var delIndexes = [];
            d.diff(indexes, this.rows, {
                create: function (index) {
                    if (index !== null) {
                        /* this._rows.push(new FastTableRow({
                             fastTable: this,
                             index: index
                         }))*/
                        var flag = true;
                        for (var i = 0, len = _this._rows.length; i < len; i++) {
                            if (!(i in _this._rows)) {
                                _this._rows[i] = new FastTableRow_1.FastTableRow({
                                    fastTable: _this,
                                    index: index
                                });
                                flag = false;
                                break;
                            }
                        }
                        if (flag) {
                            _this._rows.push(new FastTableRow_1.FastTableRow({
                                fastTable: _this,
                                index: index
                            }));
                        }
                    }
                },
                replace: function (index, row) {
                    if (tools.isNotEmpty(row) && index !== null) {
                        row.index = index;
                    }
                    else if (tools.isEmpty(row) && index !== null) {
                        _this._rows[index] = new FastTableRow_1.FastTableRow({
                            fastTable: _this,
                            index: index
                        });
                    }
                    else if (tools.isNotEmpty(row) && index === null) {
                        var index_2 = _this._rows.indexOf(row);
                        if (index_2 >= 0) {
                            delete _this._rows[index_2];
                        }
                        row.destroy();
                    }
                },
                destroy: function (row) {
                    if (tools.isNotEmpty(row)) {
                        var index = _this._rows.indexOf(row);
                        if (index >= 0) {
                            delIndexes.push(index);
                        }
                    }
                }
            });
            this.rowDel(delIndexes);
            this.pseudoTable && this.pseudoTable.render();
            this.noData.toggle(Object.keys(this.tableData.data).length === 0);
            var handlers = this.eventHandlers[FastTable.EVT_RENDERED];
            Array.isArray(handlers) && handlers.forEach(function (handler) {
                handler();
            });
            this.isWrapLine && this.setRowsHeight();
            this.wrapper.style.display = 'block';
            //   监听滚动事件
            this.calcWidth();
            this.setMainTableWidth();
            this.rows && this.rows.forEach(function (row) {
                row.format();
            });
            if (!tools.isMb) {
                // PC端
                this.scrollEvent.off();
                this.changeScrollWidth(0);
                this.scrollEvent.on();
            }
            else {
                //  移动端
                // this.wrapper.querySelector('.scroll-container').classList.add('hide');
                this.touchMoveEvent.off();
                this.touchMoveEvent.on();
            }
        };
        Object.defineProperty(FastTable.prototype, "width", {
            get: function () {
                var pseudoTableWidth = this.pseudoTable ? this.pseudoTable.width : 0;
                return this.tableBases.reduce(function (width, table) { return table.width + width; }, 0) + pseudoTableWidth;
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype._clearAllSelectedCells = function () {
            var _this = this;
            this.selectedCells.forEach(function (row, index) {
                if (row.length > 0) {
                    var selRow = _this.rowGet(index);
                    if (selRow) {
                        selRow._selectedInnerRowSet(false);
                        row && row.forEach(function (cell, i, arr) {
                            if (cell) {
                                var headerCell = _this.columnGet(cell.name).cells[0][0];
                                headerCell && (headerCell.selected = false);
                                if (i === arr.length - 1 && index === _this.selectedCells.length - 1) {
                                    // 最后一次绘制
                                    cell._selectedInnerSet(false);
                                }
                                else {
                                    cell._selectedInnerSet(false);
                                }
                            }
                        });
                    }
                }
            });
        };
        FastTable.prototype._drawSelectedCells = function () {
            var _this = this;
            // 清除表头的状态
            this.columns.forEach(function (col) {
                // col.cells[0][0].selected = false;
                col.selected = false;
            });
            var uniIndex = {};
            this.selectedCells.forEach(function (rowCells, i, array) {
                if (_this.mainTable.body.rows[i]) {
                    var index_3 = _this.mainTable.body.rows[i].index;
                    // 绘制伪列
                    if (_this.pseudoTable) {
                        uniIndex[index_3] = rowCells.length;
                    }
                    rowCells.forEach(function (cell) {
                        // 绘制表头
                        // headerCell = column.cells[0][0];
                        // if (headerCell.selected === false) {
                        //     headerCell.selected = true;
                        // }
                        var columnIndex = _this.getColIndex(cell.name);
                        var column = _this.columns[columnIndex];
                        if (column.selected === false) {
                            column._selectedInnerColSet(true, false);
                        }
                        var allBorderClass = ['topBorder', 'bottomBorder', 'leftBorder', 'rightBorder'];
                        allBorderClass.forEach(function (cName) {
                            cell.wrapper.classList.add(cName);
                        });
                        // let currentDomIndex = this.mainTable.body.rows[index].domIndex,
                        //     prevDomIndex = currentDomIndex - 1,
                        //     nextDomIndex = currentDomIndex + 1;
                        // if (prevDomIndex >= 0){
                        //     let prevIndex  = parseInt((this.mainTable.body.rows[index].wrapper.previousElementSibling as HTMLElement).dataset.index);
                        //     if (this.rowGet(prevIndex).cellGet(columnIndex).selected) {
                        //         cell.wrapper.classList.remove('topBorder');
                        //     }
                        // }
                        // if (nextDomIndex <= array.length-1){
                        //     let nextIndex  = parseInt((this.mainTable.body.rows[index].wrapper.nextElementSibling as HTMLElement).dataset.index);
                        //     if (this.rowGet(nextIndex).cellGet(columnIndex).selected) {
                        //         cell.wrapper.classList.remove('topBorder');
                        //     }
                        // }
                        //上一行
                        var topIndex = 1, topRow = _this.rowGet(index_3 - topIndex);
                        while (topRow && index_3 - topIndex >= 0) {
                            var topCell = topRow.cellGet(columnIndex);
                            if (topCell && !topCell.isVirtual && topCell.show) {
                                topCell.selected && cell.wrapper.classList.remove('topBorder');
                                break;
                            }
                            topIndex++;
                            topRow = _this.rowGet(index_3 - topIndex);
                        }
                        // if (domIndex - 1 >= 0) {
                        //     if (this.rowGet(domIndex - 1).cellGet(columnIndex).selected) {
                        //         !cell.isVirtual && cell.wrapper.classList.remove('topBorder');
                        //     }
                        // }
                        // 下一行
                        var bottomIndex = 1, bottomRow = _this.rowGet(index_3 + bottomIndex);
                        while (bottomRow && index_3 + bottomIndex < array.length) {
                            var bottomCell = bottomRow.cellGet(columnIndex);
                            if (bottomCell && !bottomCell.isVirtual && bottomCell.show) {
                                bottomCell.selected && cell.wrapper.classList.remove('bottomBorder');
                                break;
                            }
                            bottomIndex++;
                            bottomRow = _this.rowGet(index_3 + bottomIndex);
                        }
                        // if (domIndex + 1 < array.length) {
                        //     if (this.rowGet(domIndex + 1).cellGet(columnIndex).selected) {
                        //         !cell.isVirtual && cell.wrapper.classList.remove('bottomBorder');
                        //     }
                        // }
                        // 左侧列
                        var leftIndex = 1, leftRow = _this.rowGet(index_3);
                        while (leftRow && columnIndex - leftIndex >= 0) {
                            var leftCell = leftRow.cellGet(columnIndex - leftIndex);
                            if (leftRow && !leftCell.isVirtual && leftCell.show) {
                                leftCell.selected && cell.wrapper.classList.remove('leftBorder');
                                break;
                            }
                            leftIndex++;
                            leftRow = _this.rowGet(index_3);
                        }
                        // 右侧列
                        var rightIndex = 1, rightRow = _this.rowGet(index_3);
                        while (rightRow && columnIndex + rightIndex < _this.columns.length) {
                            var rightCell = rightRow.cellGet(columnIndex + rightIndex);
                            if (rightCell && !rightCell.isVirtual && rightCell.show) {
                                rightCell.selected && cell.wrapper.classList.remove('rightBorder');
                                break;
                            }
                            rightIndex++;
                            rightRow = _this.rowGet(index_3);
                        }
                        // if (columnIndex + 1 < this.columns.length) {
                        //     if (this.rowGet(domIndex).cellGet(columnIndex + 1).selected) {
                        //         !cell.isVirtual && cell.wrapper.classList.remove('rightBorder');
                        //     }
                        // }
                    });
                }
            });
            for (var index in uniIndex) {
                var status_1 = 0, row = this.rowGet(parseInt(index)), len = uniIndex[index];
                row && row._rowSelectedWidthDraw(false, false);
                if (len > 0 && len < row.cells.length) {
                    status_1 = 2;
                }
                else if (row && row.cells.length === len) {
                    status_1 = 1;
                }
                if (status_1 > 0) {
                    row && row._rowSelectedWidthDraw(true, false);
                }
                this.pseudoTable._setCellsSelected(parseInt(index), status_1);
            }
        };
        // 获取当前选择列的个数
        FastTable.prototype.getSelectedCols = function () {
            var cols = [];
            this.columns.forEach(function (col) {
                col.selected && cols.push(col);
            });
            return cols;
        };
        FastTable.prototype.columnsSort = function (procedure) {
            var _this = this;
            var len = this.leftTable.columns.length;
            this.columns.forEach(function (col) {
                if (col.isFixed) {
                    col.isFixed = false;
                }
            });
            procedure && procedure.forEach(function (items) {
                if (items[0] === 'hide') {
                    _this.columnGet(items[1]).show = false;
                }
                else if (items[0] === 'show') {
                    _this.columnGet(items[1]).show = true;
                }
                else {
                    _this.mainTable.columnExchange(items[0], items[1]);
                }
            });
            for (var i = 0; i < len; i++) {
                this.columns[i].isFixed = true;
            }
            var result = {}, index = 0;
            for (var _i = 0, _a = this.columns; _i < _a.length; _i++) {
                var column = _a[_i];
                if (!column.isVirtual) {
                    result[column.name] = {
                        index: index,
                        isShow: column.show,
                        isFixed: column.isFixed
                    };
                    index++;
                }
            }
            var handlers = this.eventHandlers[FastTable.EVT_TABLE_COL_CHANGE];
            tools.isNotEmpty(handlers) && handlers.forEach(function (handler) {
                var _a;
                typeof handler === 'function' && handler({
                    data: (_a = {},
                        _a[tools.isMb ? 'mb' : 'pc'] = result,
                        _a)
                });
            });
            /*let diffReplace = (n, o) => {
                if (n !== o) {
                    let index = allNames.indexOf(o);
                    allNames[allNames.indexOf(n)] = o;
                    allNames[index] = n;
                    this.mainTable.columnExchange(n, o);
                }
            };
    
            let i = 0,
                hasNew = i in names,
                hasOld = i in allNames;
    
            while (hasNew || hasOld) {
                diffReplace(names[i], allNames[i]);
                i++;
                hasNew = i in names;
                hasOld = i in allNames;
            }
            for (let i = 0; i < len; i++) {
                this.columns[i].isFixed = true;
            }*/
        };
        FastTable.prototype.dragCol = function (resouceCol, destinationCol) {
            var leftTableColsName = [], len = this.leftTable ? this.leftTable.columns.length : 0, resouceName = resouceCol.name, destinationName = destinationCol.name;
            this.leftTable && this.leftTable.columns.forEach(function (col) {
                leftTableColsName.push(col.name);
            });
            // 判断删除列的基表以及插入列的基表
            var deleteTable = null, insertTable = null;
            if (leftTableColsName.indexOf(resouceName) >= 0) {
                deleteTable = this.leftTable;
            }
            else {
                deleteTable = this.mainTable;
            }
            if (leftTableColsName.indexOf(destinationName) >= 0) {
                insertTable = this.leftTable;
            }
            else {
                insertTable = this.mainTable;
            }
            var deleteCol = deleteTable.columnsDel(resouceName, false);
            insertTable.columnInsertBefore(deleteCol, destinationName);
            this.leftTable && this.leftTable.columns.forEach(function (col, index) {
                if (index < len) {
                    col._setColumnFixedNotRender(true);
                }
                else {
                    col._setColumnFixed(false);
                }
            });
        };
        FastTable.sepPivotData = function (obj) {
            var keys = [], data = {};
            for (var key in obj) {
                if (key.indexOf('.') > -1) {
                    keys.push(key);
                }
                else {
                    data[key] = obj[key];
                }
            }
            return {
                keys: keys,
                data: data
            };
        };
        FastTable.prototype.getSelectedRows = function () {
            var rows = [];
            this.rows.forEach(function (row) {
                row.selected && rows.push(row);
            });
            return rows;
        };
        Object.defineProperty(FastTable.prototype, "editedData", {
            get: function () {
                if (this.editing) {
                    this.edit.destroyCellInput();
                    var edit = this.edit, result_1 = {
                        update: [],
                        insert: [],
                        delete: [],
                    }, oldData = this.tableData.noEditData, oldUpdateData_1 = [], insertIndex_1 = edit.addIndex.get(), editedIndex_1 = edit.changeIndex.get();
                    var obj_1 = {};
                    for (var _i = 0, _a = this.columns.map(function (col) { return col.name; }); _i < _a.length; _i++) {
                        var name_1 = _a[_i];
                        obj_1[name_1] = null;
                    }
                    this.data.forEach(function (data, i) {
                        var index = data[TableBase_1.TableBase.GUID_INDEX];
                        data = Object.assign({}, data);
                        delete data[TableBase_1.TableBase.GUID_INDEX];
                        if (insertIndex_1.indexOf(index) > -1) {
                            result_1.insert.push(Object.assign({}, obj_1, data));
                        }
                        else if (editedIndex_1.indexOf(index) > -1) {
                            // data = Object.assign({}, data);
                            // delete data[TableBase.GUID_INDEX];
                            result_1.update.push(Object.assign({}, obj_1, data));
                        }
                    });
                    oldData.forEach(function (data, i) {
                        var index = data[TableBase_1.TableBase.GUID_INDEX];
                        data = Object.assign({}, data);
                        if (editedIndex_1.indexOf(index) > -1) {
                            oldUpdateData_1.push(Object.assign({}, obj_1, data));
                        }
                    });
                    edit.delIndex.getData().forEach(function (data) {
                        var delData = Object.assign({}, data);
                        delete delData[TableBase_1.TableBase.GUID_INDEX];
                        result_1.delete.push(delData);
                    });
                    // 在交叉表模式下表格编辑的数据格式与普通表格不一样
                    if (this.editor.isPivot) {
                        var pivotResult_1 = {
                            update: [],
                            insert: [],
                            delete: [],
                        };
                        console.log(result_1);
                        var _loop_6 = function (operation) {
                            result_1[operation].forEach(function (obj, index) {
                                var sepData = FastTable.sepPivotData(obj);
                                switch (operation) {
                                    case 'insert':
                                        // 新增
                                        sepData.keys.forEach(function (key) {
                                            var _a;
                                            if (tools.isNotEmpty(obj[key])) {
                                                pivotResult_1.insert.push(Object.assign({}, sepData.data, (_a = {}, _a[key] = obj[key], _a)));
                                            }
                                        });
                                        break;
                                    case 'delete':
                                        // 删除
                                        sepData.keys.forEach(function (key) {
                                            var _a;
                                            if (tools.isNotEmpty(obj[key])) {
                                            }
                                            pivotResult_1.delete.push(Object.assign({}, sepData.data, (_a = {}, _a[key] = obj[key], _a)));
                                        });
                                        break;
                                    case 'update':
                                        // 修改需要分状态
                                        sepData.keys.forEach(function (key) {
                                            var _a, _b, _c;
                                            var oldData = oldUpdateData_1[index] ? oldUpdateData_1[index][key] : null, data = obj[key];
                                            if (tools.isEmpty(oldData) && tools.isNotEmpty(data)) {
                                                // 新增 （原始数据为空）
                                                pivotResult_1.insert.push(Object.assign({}, sepData.data, (_a = {}, _a[key] = data, _a)));
                                            }
                                            else if (tools.isNotEmpty(oldData) && tools.isEmpty(data)) {
                                                // 删除 （现有数据变成空）
                                                pivotResult_1.delete.push(Object.assign({}, sepData.data, (_b = {}, _b[key] = data, _b)));
                                            }
                                            else if (oldData != data) {
                                                // 修改 （原始数据与修改过的数据都不为空，且不与原始数据一样）
                                                pivotResult_1.update.push(Object.assign({}, sepData.data, (_c = {}, _c[key] = data, _c)));
                                            }
                                        });
                                        break;
                                }
                            });
                        };
                        for (var operation in result_1) {
                            _loop_6(operation);
                        }
                        console.log(pivotResult_1);
                        pivotResult_1['isPivot'] = true;
                        return pivotResult_1;
                    }
                    result_1['isPivot'] = false;
                    return result_1;
                }
                return null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTable.prototype, "editing", {
            get: function () {
                return this._editing;
            },
            set: function (isEdit) {
                if (this._editing !== isEdit) {
                    this._editing = isEdit;
                    this.tableData.disabled = isEdit;
                    if (isEdit) {
                        this.edit.event.click.on();
                        this.sortEvent.off();
                        this.click.off();
                        !tools.isMb && this.hoverMoreEvent.off();
                        this.mainTable.initEditor(this.editor.inputInit);
                        this.leftTable && this.leftTable.initEditor(this.editor.inputInit);
                        this.edit.event.scroll.on();
                        if (this.editor.autoInsert) {
                            var num = this.rowAdd();
                        }
                        else {
                            this._drawSelectedCells();
                        }
                    }
                    else {
                        this.edit.event.click.off();
                        !tools.isMb && this.hoverMoreEvent.on();
                        this.sortEvent.on();
                        this.click.on();
                        this.mainTable.cancelEditor();
                        this.leftTable && this.leftTable.cancelEditor();
                        this.edit.event.scroll.off();
                        this.rowDel(this.edit.addIndex.spaceRowIndex());
                        this.tablesEach(function (table) {
                            table.tableData.edit.close();
                            table.body.rows = table.body.rows.filter(function (row) { return tools.isNotEmpty(row); });
                        });
                        this.render(0, void 0);
                        this.tablesEach(function (table) {
                            table.body.rows = table.body.rows.filter(function (row) { return tools.isNotEmpty(row); });
                        });
                        this._rows = this.rows.filter(function (row) { return tools.isNotEmpty(row); });
                        this.edit.addIndex.del();
                        this.edit.delIndex.del();
                        this.edit.changeIndex.del();
                        this._drawSelectedCells();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.editorInit = function (editor) {
            var _this = this;
            this.editor = {
                isPivot: editor.isPivot || false,
                defData: editor.defData,
                updatable: tools.isEmpty(editor.updatable) ? true : editor.updatable,
                insertble: tools.isEmpty(editor.insertble) ? true : editor.insertble,
                inputInit: editor.inputInit,
                cellCanInit: tools.isEmpty(editor.cellCanInit) ? function () { return true; } : editor.cellCanInit,
                rowCanInit: tools.isEmpty(editor.rowCanInit) ? function () { return true; } : editor.rowCanInit,
                autoInsert: tools.isEmpty(editor.autoInsert) ? false : editor.autoInsert,
            };
            this.initDisabledEditor();
            this.editing = true;
            this.tablesEach(function (table, index) {
                table.on(TableBase_1.TableBase.EVT_EDITED, function (ev) {
                    if (ev.row === 0 && _this.editor.autoInsert) {
                        var num = _this.rowAdd(void 0, 0);
                    }
                    else {
                        var index_4 = _this.data[ev.row][TableBase_1.TableBase.GUID_INDEX];
                        if (_this.edit.addIndex.get().indexOf(index_4) === -1 && _this.edit.changeIndex.get().indexOf(index_4) === -1) {
                            _this.edit.changeIndex.add(index_4);
                        }
                    }
                });
                table.on(TableBase_1.TableBase.EVT_CELL_EDIT_CANCEL, _this.editHandlers[index] = function (cell, isChange) {
                    if (!isChange) {
                        var index_5 = _this.data[cell.row.index][TableBase_1.TableBase.GUID_INDEX];
                        if (_this.edit.addIndex.get().indexOf(index_5) > -1) {
                            _this.edit.addIndex.del(index_5);
                        }
                        else if (_this.edit.changeIndex.get().indexOf(index_5) > -1) {
                            _this.edit.changeIndex.del(index_5);
                        }
                    }
                });
            });
        };
        FastTable.prototype.editorCancel = function () {
            var _this = this;
            this.editing = false;
            this.clearDisabledEditor();
            this.editor = null;
            this.tablesEach(function (table, index) {
                table.off(TableBase_1.TableBase.EVT_EDITED);
                table.off(TableBase_1.TableBase.EVT_CELL_EDIT_CANCEL, _this.editHandlers[index]);
            });
        };
        FastTable.prototype.initDisabledEditorRow = function (row) {
            var editor = this.editor;
            row && row.cells.forEach(function (cell) {
                if (!(editor.updatable && editor.rowCanInit(row) && editor.cellCanInit(cell.column, 1))) {
                    cell.disabled = true;
                }
            });
        };
        FastTable.prototype.initDisabledEditor = function () {
            var editor = this.editor;
            this.rows.forEach(function (row) {
                row && row.cells.forEach(function (cell) {
                    if (!(editor.updatable && editor.rowCanInit(row) && editor.cellCanInit(cell.column, 0))) {
                        cell.disabled = true;
                    }
                });
            });
        };
        FastTable.prototype.clearDisabledEditor = function () {
            this.rows.forEach(function (row) {
                row && row.cells.forEach(function (cell) {
                    cell.disabled = false;
                    cell.errorMsg = '';
                });
            });
        };
        Object.defineProperty(FastTable.prototype, "isWrapLine", {
            get: function () {
                return this._isWrapLine;
            },
            enumerable: true,
            configurable: true
        });
        FastTable.prototype.setRowHeight = function (cell) {
            var canvas = document.createElement("canvas");
            var context = canvas.getContext("2d");
            context.font = '12px Arial';
            var column = cell.column, row = cell.row, text = cell.text, width = getTextWidth(text), scale = Math.ceil(width / (column.maxWidth - 14));
            var nowHeight = (scale - 1) * 17 + 40;
            if (nowHeight > row.height) {
                row._setHeight(nowHeight);
                this.rows[row.index]._setHeight();
                this.pseudoTable.body.rows[row.index].height = row.height;
            }
            canvas = null;
            context = null;
            function getTextWidth(text) {
                var metrics = context.measureText(text);
                return metrics.width;
            }
        };
        // 根据参数定位到行
        // colName 列名称， data 任意数据
        FastTable.prototype.locateToRow = function (colName, data) {
            var index = 0;
            this.rows && this.rows.forEach(function (row) {
                var cell = row.cellGet(colName);
                if (cell && cell.data == data) {
                    row.selected = true;
                    index++;
                }
            });
            this._drawSelectedCells();
            return index;
        };
        FastTable.prototype.setRowsHeight = function () {
            var _this = this;
            this.rows.forEach(function (row, i) {
                row._setHeight();
                _this.pseudoTable.body.rows[i].height = row.height;
            });
        };
        FastTable.EVT_RENDERED = '_FT_RENDERED_';
        FastTable.EVT_CHANGED = TableBase_1.TableBase.EVT_CHANGED;
        FastTable.EVT_SELECTED = '_FT_SELECTED_'; // 选中事件
        FastTable.EVT_CELL_EDIT_CANCEL = TableBase_1.TableBase.EVT_CELL_EDIT_CANCEL;
        FastTable.EVT_TABLE_COL_CHANGE = '_FT_COLUMNS_CHANGE_';
        FastTable.EVT_WIDTH_CANCEL = TableBase_1.TableBase.EVT_WIDTH_CANCEL; // 宽度改变是触发事件
        FastTable.TABLE_NOT_DATA_CLASS = 'table-nodata';
        FastTable.TABLE_LOADED_ERROR_CLASS = 'table-loaded-error';
        FastTable.TABLE_RIGHT_LOCK_CLASS = 'table-right-lock';
        return FastTable;
    }(Component));
    exports.FastTable = FastTable;
});

/// <amd-module name="FastTableCell"/>
define("FastTableCell", ["require", "exports", "TableCell", "FastTable", "Tooltip"], function (require, exports, TableCell_1, FastTable_1, tooltip_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var FastTableCell = /** @class */ (function (_super) {
        __extends(FastTableCell, _super);
        function FastTableCell(para) {
            return _super.call(this, para) || this;
        }
        Object.defineProperty(FastTableCell.prototype, "ftable", {
            get: function () {
                return this.row.section.table.content;
            },
            enumerable: true,
            configurable: true
        });
        // isInnerEvent 用于标记当前是否是用户触发的事件(内部定义的事件)
        FastTableCell.prototype._selectedInnerSet = function (selected) {
            var _this = this;
            this._selected = selected;
            this.wrapper.classList.toggle('selected', selected);
            var allBorderClass = ['topBorder', 'bottomBorder', 'leftBorder', 'rightBorder'];
            allBorderClass.forEach(function (cName) {
                _this.wrapper.classList.remove(cName);
            });
            // 为true的时候绘制
            // if (isDraw) {
            //     // 绘制
            //     // this.ftable._drawSelectedCells();
            // }
        };
        Object.defineProperty(FastTableCell.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                this._selectedInnerSet(selected);
                this.ftable.trigger(FastTable_1.FastTable.EVT_SELECTED);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableCell.prototype, "frow", {
            get: function () {
                return this.ftable.rowGet(this._row.index);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableCell.prototype, "errorMsg", {
            get: function () {
                return this._errorMsg || '';
            },
            set: function (msg) {
                if (msg == this.errorMsg) {
                    return;
                }
                if (msg) {
                    var visibleCols = this.ftable.columnsVisible.map(function (col) { return col.name; }), isLastCol = visibleCols.indexOf(this.name) > visibleCols.length / 2;
                    new tooltip_1.Tooltip({
                        visible: tools.isMb,
                        errorMsg: msg,
                        el: this.wrapper,
                        length: 'medium',
                        pos: isLastCol ? 'left' : 'right'
                    });
                    d.classAdd(this.wrapper, 'error');
                    this.wrapper.innerHTML = '';
                    d.append(this.wrapper, h("div", null, this.text));
                }
                else {
                    tooltip_1.Tooltip.clear(this.wrapper);
                    this.wrapper.innerHTML = '';
                    d.append(this.wrapper, this.text);
                    d.classRemove(this.wrapper, 'error');
                }
                this._errorMsg = msg;
            },
            enumerable: true,
            configurable: true
        });
        return FastTableCell;
    }(TableCell_1.TableDataCell));
    exports.FastTableCell = FastTableCell;
});

/// <amd-module name="FastTableData"/>
define("FastTableData", ["require", "exports", "DataManager"], function (require, exports, DataManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var FastTableData = /** @class */ (function (_super) {
        __extends(FastTableData, _super);
        function FastTableData(para) {
            var _this = this;
            // debugger;
            var ftable = para.ftable;
            para.loading = Object.assign({
                msg: '数据加载中...',
                disableEl: ftable.wrapper,
                container: ftable.wrapper.parentElement
            }, para.loading);
            if (para.page) {
                para.page.container = tools.isMb ? ftable.mainTable.body.wrapper : ftable.wrapper;
            }
            _this = _super.call(this, para) || this;
            _this.onError = function () {
                if (!_this.ftable.rows || _this.ftable.rows.length === 0) {
                    _this.ftable.loadedError();
                }
            };
            return _this;
        }
        FastTableData.prototype.init = function (para) {
            this.ftable = para.ftable;
        };
        // 数据获取方法
        FastTableData.prototype.dataAdd = function (dataArr) {
            var _this = this;
            if (!Array.isArray(dataArr)) {
                return;
            }
            this.dataSplit(dataArr).forEach(function (data, index) {
                _this.ftable.tableBases[index].tableData.add(data);
            });
        };
        Object.defineProperty(FastTableData.prototype, "originalData", {
            get: function () {
                return this._originalData;
            },
            set: function (data) {
                this._originalData = data.map(function (obj) {
                    return Object.assign({}, obj || {});
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableData.prototype, "data", {
            get: function () {
                var _this = this;
                var dataArr = null;
                this.ftable.tablesEach(function (table) {
                    var tableData = table.data;
                    if (!dataArr) {
                        dataArr = tableData;
                    }
                    else {
                        var fixedArr_1 = [];
                        _this.ftable.columns.forEach(function (column) {
                            if (column.isFixed) {
                                fixedArr_1.push(column.name);
                            }
                        });
                        dataArr = dataArr.map(function (data, i) {
                            var result = Object.assign({}, data);
                            fixedArr_1.forEach(function (name) {
                                result[name] = tableData[i] ? tableData[i][name] : null;
                            });
                            return result;
                        });
                    }
                });
                return dataArr;
            },
            set: function (dataArr) {
                var _this = this;
                if (!Array.isArray(dataArr)) {
                    return;
                }
                this.dataSplit(dataArr).forEach(function (data, index) {
                    var table = _this.ftable.tableBases[index];
                    if (table) {
                        table.tableData.set(data);
                    }
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTableData.prototype, "noEditData", {
            get: function () {
                var _this = this;
                var dataArr = null;
                this.ftable.tablesEach(function (table) {
                    var tableData = table.tableData.edit.getOriginalData();
                    if (!dataArr) {
                        dataArr = tableData;
                    }
                    else {
                        var fixedArr_2 = [];
                        _this.ftable.columns.forEach(function (column) {
                            if (column.isFixed) {
                                fixedArr_2.push(column.name);
                            }
                        });
                        dataArr = dataArr.map(function (data, i) {
                            var result = Object.assign({}, data);
                            fixedArr_2.forEach(function (name) {
                                result[name] = tableData[i] ? tableData[i][name] : null;
                            });
                            return result;
                        });
                    }
                });
                return dataArr;
            },
            enumerable: true,
            configurable: true
        });
        FastTableData.prototype.rowDataGet = function (index) {
            var data = {};
            this.ftable.tablesEach(function (table) { return Object.assign(data, table.tableData.get(index)); });
            return data;
        };
        FastTableData.prototype.dataSplit = function (datas) {
            var leftTable = this.ftable.leftTable, leftColsName = (leftTable ? leftTable.columns : []).map(function (col) { return col.name; });
            if (tools.isEmpty(leftColsName)) {
                return [datas];
            }
            var dataArr = tools.toArray(datas), splited = [[], []];
            dataArr.forEach(function (data) {
                var left = {}, main = Object.assign({}, data);
                leftColsName.forEach(function (name) {
                    if (name in main) {
                        left[name] = main[name];
                        delete main[name];
                    }
                });
                splited[0].push(main);
                splited[1].push(left);
            });
            return Array.isArray(datas) ? splited : splited.map(function (dataArr) { return dataArr[0]; });
        };
        FastTableData.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.ftable = null;
        };
        return FastTableData;
    }(DataManager_1.DataManager));
    exports.FastTableData = FastTableData;
});

define("FastTableMenu", ["require", "exports", "Menu", "PopMenu"], function (require, exports, Menu_1, PopMenu_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var FastTableMenu = /** @class */ (function () {
        function FastTableMenu(para) {
            var _this = this;
            this.mousedownEvent = (function () {
                var mousedownHandler = function (e) {
                    _this.ftableMenu.show = false;
                };
                return {
                    on: function () { return d.on(document, 'click', mousedownHandler); },
                    off: function () { return d.off(document, 'click', mousedownHandler); }
                };
            })();
            this.cell = null;
            this.contextMenuEvent = (function () {
                var eventType = tools.isMb ? 'press' : 'contextmenu';
                var contextMenuHandler = function (e) {
                    if (e.type === 'contextmenu') {
                        e.preventDefault();
                    }
                    var fm = _this.ftableMenu;
                    fm = tools.isMb ? fm : fm;
                    fm.show = false;
                    var tr = d.closest(e.target, 'tr'), td = d.closest(e.target, 'td, th'), isTh = d.matches(td, 'th'), rowIndex = parseInt(tr.dataset.index), cell = _this.ftable.cellGet(td.dataset.name, rowIndex);
                    // this.ftable.pseudoTable.setPresentSelected(rowIndex);
                    if (isTh || tools.isMb) {
                        if (cell && !cell.selected) {
                            _this.ftable._clearAllSelectedCells();
                            cell.selected = true;
                            _this.ftable._drawSelectedCells();
                        }
                    }
                    _this.cell = cell;
                    var children = fm.contextMenu.children;
                    _this.updateMenu();
                    fm.show = true;
                    var offsetLeft = tools.offset.left(_this.ftable.wrapper), offsetTop = tools.offset.top(_this.ftable.wrapper), scrollTop = tools.getScrollTop(_this.ftable.wrapper);
                    if (tools.isMb) {
                        fm.contextMenu.setPosition(e.deltaX - offsetLeft, e.deltaY - offsetTop + scrollTop);
                    }
                    else {
                        fm.contextMenu.setPosition(e.clientX - offsetLeft, e.clientY - offsetTop + scrollTop);
                    }
                    // debugger;
                };
                var selector = '.section-inner-wrapper:not(.pseudo-table) tbody td, .section-inner-wrapper:not(.pseudo-table) thead th';
                return {
                    on: function () { return d.on(_this.ftable.wrapper, eventType, selector, contextMenuHandler); },
                    off: function () { return d.off(_this.ftable.wrapper, eventType, selector, contextMenuHandler); }
                };
            })();
            this.ftable = para.ftable;
            var items = [];
            if (tools.isNotEmpty(para.items)) {
                items = para.items.filter(function (item) {
                    return tools.isNotEmpty(item);
                });
            }
            if (tools.isMb) {
                var popItems_1 = [];
                items.forEach(function (item) {
                    var content = {
                        rowMulti: 0,
                        colMulti: 0
                    };
                    if (tools.isNotEmpty(item.rowMulti)) {
                        content.rowMulti = item.rowMulti;
                        delete item.rowMulti;
                    }
                    if (tools.isNotEmpty(item.colMulti)) {
                        content.colMulti = item.colMulti;
                        delete item.colMulti;
                    }
                    var newItem = Object.assign(item, { content: content });
                    popItems_1.push(item);
                });
                this.ftableMenu = new PopMenu_1.NewPopMenu({
                    items: popItems_1,
                    container: para.ftable.wrapper
                });
            }
            else {
                this.ftableMenu = new FastTablePCMenu({
                    ftable: para.ftable,
                    items: items
                });
            }
            // 右键菜单事件
            this.contextMenuEvent.on();
            this.ftableMenu.contextMenu.onOpen = function (node) {
                if (tools.isFunction(node.content.click)) {
                    var a = {
                        set text(str) {
                            node.text = str;
                        }
                    };
                    if (tools.isMb) {
                        // 点击显示子菜单
                        if (tools.isNotEmpty(node.content.children)) {
                            _this.ftableMenu.splitItems(node.content.children);
                            _this.ftableMenu.setChildren();
                        }
                        else {
                            node.content.click(_this.cell, _this.ftable.getSelectedRows(), _this.ftable.getSelectedCols(), a);
                            _this.ftableMenu.show = false;
                        }
                    }
                    else {
                        node.content.click(_this.cell, _this.ftable.getSelectedRows(), _this.ftable.getSelectedCols(), a);
                        _this.ftableMenu.show = false;
                    }
                }
                else {
                    _this.ftableMenu.show = false;
                }
            };
            // 鼠标按下右键菜单消失
            this.mousedownEvent.on();
        }
        FastTableMenu.prototype.updateMenu = function () {
            var _this = this;
            var children = this.ftableMenu.contextMenu.children;
            children = tools.isMb ? children : children;
            children && children.forEach(function (node) {
                node.disabled = _this.jageItemDisabled(node.content.rowMulti, node.content.colMulti);
                node.selected = false;
                if (tools.isNotEmpty(node.children) && !tools.isMb) {
                    _this.updatePCChildren(node.children);
                }
            });
        };
        FastTableMenu.prototype.updatePCChildren = function (children) {
            var _this = this;
            children && children.forEach(function (node) {
                node.disabled = _this.jageItemDisabled(node.content.rowMulti, node.content.colMulti);
                node.selected = false;
                if (tools.isNotEmpty(node.children) && !tools.isMb) {
                    _this.updatePCChildren(node.children);
                }
            });
        };
        // 判断是否可用
        FastTableMenu.prototype.jageItemDisabled = function (rowMultiPara, colMultiPara) {
            var selectRowsLen = this.ftable.getSelectedRows().length, // 当前选择了多少行
            selectColsLen = this.ftable.getSelectedCols().length, // 当前选择了多少列
            rowMulti = tools.isEmpty(rowMultiPara) ? 0 : rowMultiPara, colMulti = tools.isEmpty(colMultiPara) ? 0 : colMultiPara;
            if (rowMulti !== 0) {
                if (colMulti !== 0) {
                    if (rowMulti === selectRowsLen && colMulti === selectColsLen) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    if (rowMulti === selectRowsLen) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
            }
            else {
                if (colMulti !== 0) {
                    if (colMulti === selectColsLen) {
                        return false;
                    }
                    else {
                        return true;
                    }
                }
                else {
                    return false;
                }
            }
        };
        FastTableMenu.prototype.destory = function () {
            this.ftable = null;
            this.ftableMenu.destory();
            this.contextMenuEvent.off();
            this.mousedownEvent.off();
        };
        return FastTableMenu;
    }());
    exports.FastTableMenu = FastTableMenu;
    var FastTablePCMenu = /** @class */ (function () {
        function FastTablePCMenu(para) {
            this.ftable = para.ftable;
            this.contextMenu = new Menu_1.Menu({
                container: para.ftable.wrapper,
                expand: true,
                isOutline: true,
                isHoverExpand: true,
                children: this.handlerMenuData(para.items)
            });
            this.contextMenu.wrapper.classList.add('ftable-context-menu');
        }
        Object.defineProperty(FastTablePCMenu.prototype, "contextMenu", {
            get: function () {
                return this._contextMenu;
            },
            set: function (menu) {
                this._contextMenu = menu;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FastTablePCMenu.prototype, "show", {
            set: function (isShow) {
                this._show = isShow;
                if (isShow) {
                    this.contextMenu.wrapper.style.display = 'block';
                }
                else {
                    this.contextMenu.wrapper.style.display = 'none';
                }
            },
            enumerable: true,
            configurable: true
        });
        // 处理选项转换为menuData
        FastTablePCMenu.prototype.handlerMenuData = function (items) {
            var _this = this;
            var menuData = [];
            items.forEach(function (item) {
                var menuObj = {};
                menuObj['text'] = item['title'];
                menuObj['icon'] = item['icon'];
                var rowMulti = tools.isNotEmpty(item.rowMulti) ? item.rowMulti : 0, colMulti = tools.isNotEmpty(item.colMulti) ? item.colMulti : 0;
                menuObj['content'] = {
                    rowMulti: rowMulti,
                    colMulti: colMulti,
                    click: null
                };
                if (tools.isNotEmpty(item.children)) {
                    menuObj['children'] = _this.handlerMenuData(item.children);
                }
                else {
                    menuObj['content'].click = item.onClick;
                }
                menuData.push(menuObj);
            });
            return menuData;
        };
        // 判断是否可用
        // private jageItemDisabled(rowMultiPara: number, colMultiPara: number): boolean {
        //     let selectRowsLen = this.ftable.getSelectedRows().length, // 当前选择了多少行
        //         selectColsLen = this.ftable.getSelectedCols().length, // 当前选择了多少列
        //         rowMulti = tools.isEmpty(rowMultiPara) ? 0 : rowMultiPara,
        //         colMulti = tools.isEmpty(colMultiPara) ? 0 : colMultiPara;
        //     if (rowMulti !== 0) {
        //         if (colMulti !== 0) {
        //             if (rowMulti === selectRowsLen && colMulti === selectColsLen) {
        //                 return false;
        //             } else {
        //                 return true;
        //             }
        //         } else {
        //             if (rowMulti === selectRowsLen) {
        //                 return false;
        //             } else {
        //                 return true;
        //             }
        //         }
        //     } else {
        //         if (colMulti !== 0) {
        //             if (colMulti === selectColsLen) {
        //                 return false;
        //             } else {
        //                 return true;
        //             }
        //         } else {
        //             return false;
        //         }
        //     }
        // }
        FastTablePCMenu.prototype.destory = function () {
            this.contextMenu.destroy();
        };
        return FastTablePCMenu;
    }());
});
// class FastTableMBMenuItem {
//     public content: any;
//
//     constructor(para: IFastTableMenuItem) {
//         this.text = tools.isEmpty(para.title) ? '' : para.title;
//         this.icon = tools.isEmpty(para.icon) ? '' : para.icon;
//         this.content = {
//             rowMulti: tools.isEmpty(para.rowMulti) ? 0 : para.rowMulti,
//             colMulti: tools.isEmpty(para.colMulti) ? 0 : para.colMulti,
//             click: tools.isEmpty(para.onClick) ? function () {
//             } : para.onClick,
//             children: tools.isEmpty(para.children) ? [] : para.children
//         };
//     }
//
//     // 容器
//     protected _wrapper: HTMLElement;
//     get wrapper() {
//         if (!this._wrapper) {
//             this._wrapper = this.wrapperCreate();
//         }
//         return this._wrapper;
//     }
//
//     protected wrapperCreate() {
//         return d.create('<div class="ftable-mbmenu-item fmbitem"><div class="ftable-mbmenu-textwrapper"></div>');
//     }
//
//
//     // 是否可用
//     private _disabled: boolean;
//     set disabled(disabled: boolean) {
//         this._disabled = !!disabled;
//         this.wrapper.classList.toggle('nouse', this._disabled);
//     }
//
//     get disabled() {
//         return this._disabled;
//     }
//
//     private _selected: boolean;
//     set selected(selected: boolean) {
//         if (selected === this._selected) {
//             return;
//         }
//         this._selected = !!selected;
//         this.wrapper.classList.toggle('selected', this._selected);
//     }
//
//     get selected() {
//         return this._selected;
//     }
//
//     // 文本
//     private _text: string;
//     set text(text: string) {
//         this._text = text;
//         this.textEl && (this.textEl.innerText = text)
//     }
//
//     get text() {
//         return this._text;
//     }
//
//     private _textEl: HTMLElement;
//     private get textEl() {
//         if (!this._textEl) {
//             this._textEl = d.query('.ftable-mbmenu-textwrapper', this.wrapper);
//         }
//         return this._textEl;
//     }
//
//     // 图标
//     private _icon: string;
//     set icon(icon: string) {
//         if (icon) {
//             if (typeof icon === 'string') {
//                 this.iconEl.classList.add(...icon.split(' '));
//                 this._icon = icon;
//             }
//         } else {
//             this._icon && this.iconEl.classList.remove(...this._icon.split(' '));
//         }
//     }
//
//     get icon() {
//         return this._icon;
//     }
//
//     private _iconEl?: HTMLElement;
//     private get iconEl() {
//         if (!this._iconEl) {
//             this._iconEl = d.create('<i class="ftable-mbmenu-icon" data-role="icon"></i>');
//             d.before(this.textEl, this._iconEl);
//         }
//         return this._iconEl;
//     }
//
//     destory() {
//         d.remove(this._wrapper);
//         this._wrapper = null;
//         this._textEl = null;
//         this._iconEl = null;
//     }
// }
//
// class FastTableMBMenu extends FastTableMBMenuItem {
//     private ftable: FastTable;
//     private _contextMenu: FastTableMBMenu;
//     set contextMenu(menu: FastTableMBMenu) {
//         this._contextMenu = menu;
//     }
//
//     get contextMenu() {
//         return this._contextMenu;
//     }
//
//     private originChildren: IFastTableMenuItem[];
//
//     constructor(para: IFastTableMenu) {
//         super({
//             title: '', icon: '', rowMulti: 0, colMulti: 0, onClick: function () {
//             }, children: []
//         });
//         this.ftable = para.ftable;
//         this.contextMenu = this;
//         this.originChildren = para.items;
//         this.splitItems(para.items);
//         this.setChildren();
//         this.ftable.wrapper.appendChild(this.wrapper);
//         // document.body.appendChild(this.wrapper);
//         this.show = false;
//
//         d.on(this.wrapper, 'click', '.next-item', (event) => {
//             event.stopPropagation();
//             let itemWrappers = d.queryAll('.ftable-mbmenu-item', this.wrapper),
//                 index = parseInt(this.wrapper.dataset.index),
//                 nextIndex = index + 1 >= this.wrapperItemsArr.length ? this.wrapperItemsArr.length - 1 : index + 1;
//             if (index !== this.wrapperItemsArr.length - 1) {
//                 this.wrapper.dataset['index'] = nextIndex + '';
//                 this.setChildren(nextIndex);
//             }
//         });
//         d.on(this.wrapper, 'click', '.prev-item', (e) => {
//             e.stopPropagation();
//             let itemWrappers = d.queryAll('.ftable-mbmenu-item', this.wrapper),
//                 index = parseInt(this.wrapper.dataset.index),
//                 prevIndex = index - 1 < 0 ? 0 : index - 1;
//             this.wrapper.dataset['index'] = prevIndex + '';
//             this.setChildren(prevIndex);
//         });
//
//         d.on(this.wrapper, 'click', '.fmbitem', (event) => {
//             event.stopPropagation();
//             let fmbitem = d.closest(event.target as HTMLElement, '.fmbitem'),
//                 index = parseInt(fmbitem.dataset.index),
//                 item = this.allItems[index];
//             item.selected = true;
//             this.onOpen && this.onOpen(item);
//         });
//     }
//
//     protected wrapperCreate() {
//         return d.create('<div class="ftable-mbmenu-wrapper" data-index="0"></div>');
//     }
//
//     setChildren(index = 0) {
//         this.wrapper.innerHTML = '';
//         let items = this.wrapperItemsArr[index];
//         if (this.wrapperItemsArr.length === 1) {
//             items.forEach((item, i) => {
//                 i === 0 && item.wrapper.classList.add('leftBorderRadius');
//                 i === items.length - 1 && item.wrapper.classList.add('rightBorderRadius');
//                 this.wrapper.appendChild(item.wrapper);
//             });
//         } else {
//             if (index !== 0) {
//                 let firstPrevBtn = this.prevBtn;
//                 this.wrapper.appendChild(this.prevBtn);
//             }
//             items.forEach((item, i) => {
//                 (index === 0 && i === 0) && item.wrapper.classList.add('leftBorderRadius');
//                 this.wrapper.appendChild(item.wrapper);
//             });
//             let lastNextBtn = this.nextBtn;
//             if (index === this.wrapperItemsArr.length - 1) {
//                 lastNextBtn.classList.add('nouse');
//             }
//             this.wrapper.appendChild(lastNextBtn);
//         }
//         this.wrapper.appendChild(d.create('<div class="arrow"></div>'));
//         this.setArrowPostiton(this.x);
//     }
//
//     private _allItems: FastTableMBMenuItem[];
//     set allItems(items: FastTableMBMenuItem[]) {
//         this._allItems = items;
//     }
//
//     get allItems() {
//         if (!this._allItems) {
//             this._allItems = [];
//         }
//         return this._allItems;
//     }
//
//     private _show: boolean;
//     set show(isShow: boolean) {
//         this._show = isShow;
//         if (isShow === true) {
//             this.splitItems(this.originChildren);
//             this.wrapper.dataset['index'] = '0';
//             this.setChildren();
//             this.updateMenu(this.allItems);
//             this.wrapper.style.opacity = '1';
//             this.wrapper.style.display = 'flex';
//             this.wrapper.style.display = '-webkit-flex';
//         } else {
//             this.wrapper.style.opacity = '0';
//             this.wrapper.style.display = 'none';
//         }
//     }
//
//     get show() {
//         return this._show;
//     }
//
//     private updateMenu(children: FastTableMBMenuItem[]) {
//         children.forEach((node) => {
//             node.disabled = this.jageItemDisabled(node.content.rowMulti, node.content.colMulti);
//             node.selected = false;
//         });
//     }
//
//     // 判断是否可用
//     private jageItemDisabled(rowMultiPara: number, colMultiPara: number): boolean {
//         let selectRowsLen = this.ftable.getSelectedRows().length, // 当前选择了多少行
//             selectColsLen = this.ftable.getSelectedCols().length, // 当前选择了多少列
//             rowMulti = tools.isEmpty(rowMultiPara) ? 0 : rowMultiPara,
//             colMulti = tools.isEmpty(colMultiPara) ? 0 : colMultiPara;
//         if (rowMulti !== 0) {
//             if (colMulti !== 0) {
//                 if (rowMulti === selectRowsLen && colMulti === selectColsLen) {
//                     return false;
//                 } else {
//                     return true;
//                 }
//             } else {
//                 if (rowMulti === selectRowsLen) {
//                     return false;
//                 } else {
//                     return true;
//                 }
//             }
//         } else {
//             if (colMulti !== 0) {
//                 if (colMulti === selectColsLen) {
//                     return false;
//                 } else {
//                     return true;
//                 }
//             } else {
//                 return false;
//             }
//         }
//     }
//
//     private x: number;
//
//     setPosition(x: number, y: number) {
//         this.x = x;
//         this.wrapper.style.top = (y - 45) + 'px';
//         let x1 = x, width = parseInt(window.getComputedStyle(this.wrapper).width);
//         this.wrapperItemsArr.length === 1 ? x1 -= width / 2 : x1 -= 120;
//         if (x + 120 > window.innerWidth) {
//             x1 = window.innerWidth - width;
//             d.query('.arrow', this.wrapper).style.left = (x - x1 - 5) + 'px';
//         } else if (x1 < 0) {
//             x1 = 0;
//             d.query('.arrow', this.wrapper).style.left = (x - 5) + 'px';
//         } else {
//             d.query('.arrow', this.wrapper).style.left = 'calc(50% - 5px)';
//         }
//         this.wrapper.style.left = x1 + 'px';
//     }
//
//     private setArrowPostiton(x) {
//         let x1 = x;
//         this.wrapperItemsArr.length === 1 ? x1 -= 50 : x1 -= 120;
//         if (x + 120 > window.innerWidth) {
//             x1 = window.innerWidth - 240;
//             d.query('.arrow', this.wrapper).style.left = (x - x1 - 5) + 'px';
//         }
//         if (x1 < 0) {
//             x1 = 0;
//             d.query('.arrow', this.wrapper).style.left = (x - 5) + 'px';
//         }
//     }
//
//     private _prevBtn: HTMLElement;
//     get prevBtn() {
//         this._prevBtn = d.create('<div class="ftable-mbmenu-item prev-item">&lt;</div>');
//         return this._prevBtn;
//     }
//
//     private _nextBtn: HTMLElement;
//     get nextBtn() {
//         this._nextBtn = d.create('<div class="ftable-mbmenu-item next-item">&gt;</div>');
//         return this._nextBtn;
//     }
//
//     private _wrapperItemsArr: FastTableMBMenuItem[][];
//     get wrapperItemsArr() {
//         if (!this._wrapperItemsArr) {
//             this._wrapperItemsArr = [];
//         }
//         return this._wrapperItemsArr;
//     }
//
//     set wrapperItemsArr(itemArr: FastTableMBMenuItem[][]) {
//         this._wrapperItemsArr = itemArr;
//     }
//
//     splitItems(items) {
//         this.allItems = [];
//         this.wrapperItemsArr = [];
//         items.forEach((item, index) => {
//             let mbItem = new FastTableMBMenuItem(item);
//             mbItem.wrapper.dataset['index'] = index + '';
//             this.allItems.push(mbItem);
//         });
//         if (this.allItems.length <= 3) {
//             this.wrapperItemsArr.push(this.allItems);
//         } else {
//             this.wrapper.style.width = '240px';
//             let arr = this.allItems.slice(3, this.allItems.length),
//                 frontArr = this.allItems.slice(0, 3),
//                 len = Math.floor(arr.length / 2) + 1;
//             this.wrapperItemsArr.push(frontArr);
//             for (let i = 0; i < len - 1; i++) {
//                 let itemArr = arr.slice(i * 2, (i + 1) * 2);
//                 this.wrapperItemsArr.push(itemArr);
//             }
//         }
//     }
//
//     private _onOpen: (node: FastTableMBMenuItem) => void;
//     set onOpen(cb: (node: FastTableMBMenuItem) => void) {
//         this._onOpen = cb;
//     }
//
//     get onOpen(): (node: FastTableMBMenuItem) => void {
//         return this._onOpen;
//     }
//
//     destory() {
//         d.off(this.wrapper);
//         d.remove(this._wrapper);
//         this._wrapper = null;
//     }
// }

define("TreeNodeBase", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="TreeNodeBase"/>
    var tools = G.tools;
    var isInit = '__IS_INIT__', parent = '__PARENT__';
    var TreeNodeBase = /** @class */ (function () {
        /**
         * para[parent] - 不用parent作为参数接口的属性 是防止外部调用是误传此参数.
         * @param {IBasicTreePara} para
         */
        function TreeNodeBase(para) {
            /**
             * 将参数转成一棵树
             * @param {IBasicTreePara} data
             * @param {G.TreeNodeBase} root
             * @return {G.TreeNodeBase}
             */
            // protected data2tree(data: IBasicTreePara, root?: this): this {
            //
            //     let toTree = (data: IBasicTreePara, root?: this) => {
            //         let {content, children} = data,
            //             top = root ? root : new (<any>this.constructor(data));
            //
            //         // top._content = content;
            //
            //         if(!tools.isEmpty(children)) {
            //             children.forEach(nodeData => {
            //                 let child = this.data2tree(nodeData);
            //                 if(child) {
            //                     child.parentSet(top);
            //                 }
            //             });
            //         }
            //
            //         return top;
            //     };
            //
            //     return toTree(data, root);
            // }
            // 内容
            this.content = null;
            // 父
            this._parent = null;
            if (!para[isInit]) { // 根节点, 广度遍历初始化树，以免初始化时无法找到父节点
                var paraQueue = [para], root = null;
                var _loop_1 = function () {
                    var currentPara = paraQueue.shift();
                    //
                    currentPara[isInit] = true;
                    if (root === null) {
                        currentPara[parent] = currentPara[parent] || 'nothing'; // hack 根元素 防止无限递归
                    }
                    var node = this_1.nodeCreate(currentPara);
                    delete currentPara[isInit];
                    if (root === null) {
                        root = node;
                    }
                    if (Array.isArray(currentPara.children)) {
                        paraQueue.push.apply(paraQueue, currentPara.children.map(function (child) {
                            child[parent] = node;
                            return child;
                        }));
                    }
                };
                var this_1 = this;
                while (paraQueue[0]) {
                    _loop_1();
                }
                return root;
            }
            else {
                this.init(para);
            }
            // if(!para[parent]) { // 根节点, 广度遍历初始化树，以免初始化时无法找到父节点
            //     let paraQueue: IBasicTreePara[] = [para],
            //         root: this = null;
            //
            //     while (paraQueue[0]) {
            //         let currentPara = paraQueue.shift();
            //         //
            //         if(root === null){
            //             currentPara[parent] = 'nothing'; // hack 根元素 防止无限递归
            //         }
            //         let node = this.nodeCreate(currentPara);
            //         if(root === null){
            //             root = node
            //         }
            //
            //         if(Array.isArray(currentPara.children)){
            //             // currentPara.children.forEach(child => {
            //             //     child[parent] = node;
            //             // });
            //
            //             paraQueue.push(...currentPara.children.map(child => {
            //                 child[parent] = node;
            //                 return child;
            //             }));
            //         }
            //     }
            //     return root;
            // }else{
            //     this.init(para);
            // }
        }
        TreeNodeBase.prototype.init = function (para) {
            if (para[parent] instanceof TreeNodeBase) {
                this.parent = para[parent];
                delete para[parent];
            }
            this.content = para.content;
        };
        TreeNodeBase.prototype.nodeCreate = function (para) {
            if (para === void 0) { para = {}; }
            return new this.constructor(para);
        };
        Object.defineProperty(TreeNodeBase.prototype, "deep", {
            // 获取当前节点深度
            get: function () {
                var deep = 0, current = this;
                while (current = current.parent) {
                    deep++;
                    // 防止死循环
                    if (deep > 10000) {
                        return null;
                    }
                }
                return deep;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNodeBase.prototype, "parent", {
            get: function () {
                return this._parent;
            },
            set: function (tnode) {
                // TODO 判断是否会引起回路(tnode 是否为当前树的根节点)
                if (tnode) {
                    tnode.childrenAdd(this);
                }
                else {
                    // 从父元素将自己移除
                    this._parent && this._parent.childrenRemove(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNodeBase.prototype, "siblings", {
            get: function () {
                var _this = this;
                return this.parent ? this.parent.children.filter(function (node) { return node !== _this; }) : null;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TreeNodeBase.prototype, "children", {
            get: function () {
                return this._children && this._children.slice();
            },
            set: function (tnode) {
                this.childrenSet(tnode);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 重置子节点
         * @param {this | this[]} tnode
         */
        TreeNodeBase.prototype.childrenSet = function (tnode) {
            // 将之前的children父元素清理
            Array.isArray(this._children) && this._children.forEach(function (t) {
                t._parent = null;
            });
            this._children = null;
            this.childrenAdd(tnode);
        };
        TreeNodeBase.prototype.childrenAdd = function (nodePara) {
            var _this = this;
            var add = function (tnodes) {
                var _a;
                if (tools.isEmpty(tnodes)) {
                    return;
                }
                _this._children = _this._children || [];
                (_a = _this._children).push.apply(_a, tnodes);
                // 把新的父节点指向当前节点
                // tnodes._parent = this;
                tnodes.forEach(function (tnode) { return tnode._parent = _this; });
            };
            var paraArr = tools.toArray(nodePara), nodes = [];
            paraArr.forEach(function (para) {
                // let node: this = null;
                if (para instanceof TreeNodeBase) {
                    nodes.push(para);
                }
                else {
                    // para[parent] = 'noting';
                    para[parent] = _this;
                    _this.nodeCreate(para);
                }
            });
            add(nodes);
            return nodes;
        };
        TreeNodeBase.prototype.childrenRemove = function (tnode) {
            var nodes = tools.toArray(tnode);
            for (var i = 0, node = null; node = nodes[i]; i++) {
                if (this._children && node) {
                    var index = this._children.indexOf(node);
                    if (index > -1) {
                        this._children.splice(index, 1);
                        node._parent = null;
                        i--;
                    }
                }
            }
            // let remove = (tnode: this) => {
            //
            // };
            //
            // if(Array.isArray(tnode)){
            //     tnode.forEach(t => remove(t));
            // }else{
            //     remove(tnode);
            // }
        };
        /**
         * 通过遍历 找到需要的节点数组
         * @param {(tnode: BasicTreeNode) => boolean} filterCb
         * @param {number} maxDeep
         * @return {this[]}
         */
        TreeNodeBase.prototype.find = function (filterCb, maxDeep) {
            if (maxDeep === void 0) { maxDeep = -1; }
            var tnodes = null;
            this.each(function (t, deep) {
                if (maxDeep < 0 || deep <= maxDeep) {
                    if (filterCb(t)) {
                        tnodes = tnodes || [];
                        tnodes.push(t);
                    }
                }
            });
            return tnodes;
        };
        /**
         * 从本身节点开始，向后查找（包含本身）
         * @param {(tnode: this) => boolean} filterCb
         * @returns {this}
         */
        TreeNodeBase.prototype.backFind = function (filterCb) {
            var result = this, deep = 0;
            while (result) {
                deep++;
                if (filterCb(result)) {
                    return result;
                }
                else {
                    result = result.parent;
                }
                if (deep > 100) {
                    return;
                }
            }
            return null;
        };
        Object.defineProperty(TreeNodeBase.prototype, "root", {
            get: function () {
                return this.backFind(function (node) { return !node.parent; });
            },
            enumerable: true,
            configurable: true
        });
        // backTrack
        // static toTree(tnode: BasicTreeNode) {
        //     return new ;
        // }
        /**
         * 获取数据
         * @return {IBasicTreePara}
         */
        // dataGet() {
        //     function dataGet(tnode: TreeNodeBase){
        //         if(tnode){
        //             let treeData: IBasicTreePara = {};
        //             treeData.content = tnode.content;
        //             treeData.children = [];
        //
        //             Array.isArray(tnode.children) && tnode.children.forEach(t => {
        //                 treeData.children.push(dataGet(t));
        //             });
        //
        //             return treeData;
        //         }else{
        //             return null;
        //         }
        //     }
        //
        //     return dataGet(this);
        // }
        /**
         * 遍历树（前序遍历）
         * @param {(tnode: BasicTreeNode, deep: number) => void} cb
         */
        TreeNodeBase.prototype.each = function (cb) {
            var each = function (tnode, cb, startDeep) {
                if (startDeep === void 0) { startDeep = 0; }
                if (tnode) {
                    cb(tnode, startDeep);
                    startDeep++;
                    var children = tnode.children;
                    Array.isArray(children) && children.forEach(function (t) {
                        each(t, cb, startDeep);
                    });
                }
            };
            each(this, cb);
        };
        /**
         * 通过路径获取节点
         * @param {number[]} path
         * @return TreeNodeBase
         */
        TreeNodeBase.prototype.nodeGetByPath = function (path) {
            var getByPath = function (tnode, path) {
                if (tnode && Array.isArray(tnode.children) && path && path.length) {
                    var first = path.shift();
                    return getByPath(tnode.children[first], path);
                }
                else {
                    return tnode;
                }
            };
            return getByPath(this, path);
        };
        return TreeNodeBase;
    }());
    exports.TreeNodeBase = TreeNodeBase;
});

define("ShellDeviceAd", ["require", "exports", "Result", "BaseShellImpl", "Modal"], function (require, exports, Result_1, BaseShellImpl_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    // import {ShellNativeUiAd} from "./shellNativeUi";
    // import {Modal} from "../../components/feedback/modal/Modal";
    /**
     * Created by zhengchao on 2017/12/5.
     * 安卓硬件设备操作接口
     */
    var ShellDeviceAd = /** @class */ (function (_super) {
        __extends(ShellDeviceAd, _super);
        function ShellDeviceAd() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellDeviceAd.prototype.getInfo = function (param) {
            var result = new Result_1.Result();
            if (param && !tools.isEmpty(param.msg))
                result.data = this.adHandle('getDevice', '{key:' + param.msg + '}');
            else
                result.data = this.adHandle('getDevice');
            return result;
        };
        ShellDeviceAd.prototype.copy = function (param) {
            param.msg = tools.str.toEmpty(param.msg).trim();
            this.adHandle('copy', '{data:"' + param.msg + '"}');
            Modal_1.Modal.toast('复制成功');
            return null;
        };
        ShellDeviceAd.prototype.getGps = function (param) {
            if (param.type === 0)
                param.callback("");
            else {
                this.adHandle('getGps', '{type:' + param.type + ',event:"putGps"}');
                d.once(window, 'putGps', function (e) {
                    param.callback(e);
                });
            }
            return null;
        };
        ShellDeviceAd.prototype.update = function (param) {
            this.adHandle('checkUpdate');
            Modal_1.Modal.toast('已经是最新版本');
            return null;
        };
        ShellDeviceAd.prototype.quit = function (param) {
            this.adHandle('quit');
            return null;
        };
        ShellDeviceAd.prototype.touchid = function (param) {
            var event = "touchidCallback";
            this.adHandle('touchid', '{event:"' + event + '"}');
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellDeviceAd.prototype.wechatin = function (param) {
            var event = "wechatCallback";
            this.adHandle('wechatin', '{event:"' + event + '"}');
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellDeviceAd.prototype.scan = function (param) {
            var event = 'scanCallback';
            var result = new Result_1.Result();
            result.data = this.adHandle('scan', '{event:"' + event + '"}');
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return result;
        };
        ShellDeviceAd.prototype.shake = function (param) {
            this.adHandle('shake', '{event:"shake"}'); //param.msg=>event;
            d.once(window, 'shake', function (e) {
                param.callback(e);
            });
            return null;
        };
        return ShellDeviceAd;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellDeviceAd = ShellDeviceAd;
});

define("ShellErpManageAd", ["require", "exports", "BaseShellImpl"], function (require, exports, BaseShellImpl_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/5.
     * 安卓企业设备操作接口
     */
    var ShellErpManageAd = /** @class */ (function (_super) {
        __extends(ShellErpManageAd, _super);
        function ShellErpManageAd() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellErpManageAd.prototype.inventory = function (param) {
            return null;
        };
        ShellErpManageAd.prototype.pos = function (param) {
        };
        ShellErpManageAd.prototype.downloadFile = function (param) {
        };
        return ShellErpManageAd;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellErpManageAd = ShellErpManageAd;
});

// /// <amd-module name="ShellNativeUiAd"/>
// import {Param} from "../../entity/Param";
// import {IShellNativeUi} from "../inf/IShellNativeUi";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by zhengchao on 2017/12/5.
//  * 安卓原生交互操作接口
//  */
// export class ShellNativeUiAd extends BaseShellImpl implements IShellNativeUi{
//     alert(param: Param): void {
//         alert(param.data);
//     }
//
//     confirm(param: Param): void {
//         if (confirm(param.data)) {
//             param.callback(1);
//         } else {
//             param.callback(0);
//         }
//     }
//
//     toast(param: Param): void {
//         mui.toast(param.data);
//     }
//
//     notice(obj: { msg: string; url?: string; position?: string; time?: number; title?: string; type?: string }): void {
//         this.adHandle('callMsg',obj.msg);
//     }
//
//
//
//
// }
//
//
//
//

// /// <amd-module name="ShellStorageAd"/>
// import {IShellStorage} from "global/shell/inf/IShellStorage";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by zhengchao on 2017/12/6.
//  * 安卓本地缓存操作接口
//  */
// export class ShellStorageAd extends BaseShellImpl implements IShellStorage{
//
//     get(key:string) {
//         return window.localStorage.getItem(key);
//     }
//
//     set(key:string,value):void{
//         if(typeof value === 'object')
//             value = JSON.stringify(value);
//         window.localStorage.setItem(key ,value);
//     }
//
//     del(key:string):void{
//         window.localStorage.removeItem(key);
//     }
//
// }
//
//
//
//

/// <amd-module name="ShellWebViewAd"/>
// import {Param} from "../../entity/Param";
// import {IShellWebView} from "global/shell/inf/IShellWebView";
// import {Result} from "global/entity/Result";
// import {BaseShellImpl} from "../BaseShellImpl";
// import tools = G.tools;
// import CONF = BW.CONF;
//
// /**
//  * Created by zhengchao on 2017/12/5.
//  * 安卓窗口管理操作接口
//  */
// export class ShellWebViewAd extends BaseShellImpl implements IShellWebView{
//     open(param: Param): Result {
//         let result = new Result();
//         let o:winOpen = param.data;
//         if(typeof o.data === "string"){
//             o.data = JSON.parse(o.data);
//         }
//         o.extras = {viewData:JSON.stringify(o.extras)};
//         result.data = this.adHandle('open',JSON.stringify(o));
//         return result;
//     }
//
//     close(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('close','{event:"'+param.data.event+'",data:"'+param.data.data+'"}');
//         return result;
//     }
//
//     load(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('load','{url:"'+param.data.url+'",event:"windowData",data:"'+param.data.data+'"}');
//         return result;
//     }
//
//     back(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('back','{event:"'+param.data.event+'",data:"'+param.data.data+'"}');
//         return result;
//     }
//
//     wake?(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('wake','{event:"'+param.data.event+'",data:"'+param.data.data+'"}');
//         return result;
//     }
//
//     logout(param: Param): Result {
//         let result = new Result();
//         if(tools.isEmpty(param.data.url)){
//             result.data = this.adHandle('logout', '{url:' + CONF.url.login + '}');
//         }else{
//             result.data = this.adHandle('logout','{url:"'+param.data.url+'"}');
//         }
//         return result
//     }
//
//     openImg(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('openImg','{url:"'+param.data.url+'"}');
//         return result;
//     }
//
//     download(param: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('download','{url:'+param.data.url+'}');
//         return result;
//     }
//
//     clear?(param?: Param): Result {
//         let result = new Result();
//         result.data = this.adHandle('clear');
//         return result;
//     }
//
//     opentab?(param?: Param): Result {
//         let result = new Result();
//         let ja = [
//             {icon : "home", name : "首页", url : CONF.url.home},
//             {icon : "contacts", name : "通讯", url : CONF.url.contact},
//             {icon : "message", name : "消息", url : CONF.url.message},
//             {icon : "myselfMenu", name : "我的", url : CONF.url.myselfMenu}
//         ];
//         result.data = this.adHandle('opentab',
//             "{\"userid\":"+param.data.userid+"," +
//             "\"accessToken\":\""+param.data.accessToken+"\"," +
//             "\"data\":"+JSON.stringify(ja)+"}");
//         return result;
//     }
//
//     fire?(param: Param): Result {
//         tools.event.fire(param.msg, param.data, window);
//         return null;
//     }
//
//     powerManager?(param?: Param): Result{
//         let result = new Result();
//         result.data = this.adHandle('powerManager','');
//         return result;
//     }
//
//     whiteBat?(param?: Param): Result{
//         let result = new Result();
//         result.data = this.adHandle('whiteBat','');
//         return result;
//     }
// }
//
//
//

define("ShellDeviceH5", ["require", "exports", "Result", "BaseShellImpl", "Modal"], function (require, exports, Result_1, BaseShellImpl_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/5.
     * 移动硬件设备操作接口
     */
    var ShellDeviceH5 = /** @class */ (function (_super) {
        __extends(ShellDeviceH5, _super);
        function ShellDeviceH5() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellDeviceH5.prototype.getInfo = function (param) {
            var result = new Result_1.Result();
            result.success = false;
            result.msg = "设备信息只在客户端中才可获取";
            return result;
        };
        ShellDeviceH5.prototype.copy = function (param) {
            // let ui = new ShellNativeUiH5();
            Modal_1.Modal.toast('您的设备暂不支持复制');
            return null;
        };
        ShellDeviceH5.prototype.getGps = function (param) {
            throw new Error("Method not implemented.");
        };
        ShellDeviceH5.prototype.update = function (param) {
            Modal_1.Modal.toast('已经是最新版本');
            return null;
        };
        ShellDeviceH5.prototype.touchid = function (param) {
            Modal_1.Modal.toast('您的设备暂不支持指纹');
            return null;
        };
        ShellDeviceH5.prototype.wechatin = function (param) {
            Modal_1.Modal.toast('您的设备暂不支持微信');
            return null;
        };
        ShellDeviceH5.prototype.scan = function (param) {
            Modal_1.Modal.toast('您的设备暂不支持扫一扫');
            return null;
        };
        ShellDeviceH5.prototype.shake = function (param) {
            Modal_1.Modal.toast('您的设备暂不支持摇一摇');
            return null;
        };
        return ShellDeviceH5;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellDeviceH5 = ShellDeviceH5;
});

define("ShellErpManageH5", ["require", "exports", "BaseShellImpl"], function (require, exports, BaseShellImpl_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by wengyifan on 2017/12/9.
     * H5企业设备操作接口
     */
    var ShellErpManageH5 = /** @class */ (function (_super) {
        __extends(ShellErpManageH5, _super);
        function ShellErpManageH5() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellErpManageH5.prototype.inventory = function (param) {
            return null;
        };
        ShellErpManageH5.prototype.pos = function (param) {
        };
        ShellErpManageH5.prototype.downloadFile = function (param) {
        };
        return ShellErpManageH5;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellErpManageH5 = ShellErpManageH5;
});

// /// <amd-module name="ShellNativeUiH5"/>
// import {Param} from "../../entity/Param";
// import {IShellNativeUi} from "../inf/IShellNativeUi";
// import {BaseShellImpl} from "../BaseShellImpl";
// import tools = G.tools;
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * H5原生交互操作接口
//  */
// export class ShellNativeUiH5 extends BaseShellImpl implements IShellNativeUi{
//     alert( param:Param ) :void{
//         mui.alert(tools.str.htmlEncode(param.data));
//     };
//     confirm( param:Param ) :void{
//         mui.confirm(tools.str.htmlEncode(param.data.msg), param.data.title, param.data.btn, function(e){
//             param.callback(e.index);
//         });
//     };
//     toast( param:Param ) :void{
//         mui.toast(tools.str.htmlEncode(param.data));
//     };
//     notice(obj : {msg :string, url?:string, position?:string, time?:number, title?:string, type?:string}) :void{
//         this.toast(new Param({data:tools.str.htmlEncode(obj.msg)}));
//     };
//
// }

// /// <amd-module name="ShellStorageH5"/>
// import {IShellStorage} from "global/shell/inf/IShellStorage";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * H5本地缓存操作接口
//  */
// export class ShellStorageH5 extends BaseShellImpl implements IShellStorage{
//
//     get(key:string) {
//         return window.localStorage.getItem(key);
//     }
//
//     set(key:string,value):void{
//         if(typeof value === 'object')
//             value = JSON.stringify(value);
//         window.localStorage.setItem(key ,value);
//     }
//
//     del(key:string):void{
//         window.localStorage.removeItem(key);
//     }
//
// }
//
//
//
//

/// <amd-module name="ShellWebViewH5"/>
// import {Param} from "../../entity/Param";
// import {IShellWebView} from "global/shell/inf/IShellWebView";
// import {Result} from "global/entity/Result";
// import {BaseShellImpl} from "../BaseShellImpl";
// import {ShellNativeUiH5} from "./ShellNativeUi";
// import tools = G.tools;
// import CONF = BW.CONF;
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * H5窗口管理操作接口
//  */
// export class ShellWebViewH5 extends BaseShellImpl implements IShellWebView{
//     open(param: Param): Result {
//         let o:winOpen=param.data;
//         localStorage.setItem('viewData', JSON.stringify(o.extras));
//         mui.openWindow({
//             url : o.url,
//             createNew : true,
//             show:{
//                 aniShow: 'slide-in-right',
//                 duration: 300
//             },
//             waiting:{
//                 autoShow : true,
//                 title : '正在加载...',
//                 options : {
//                 }
//             }
//         });
//         return null;
//     }
//
//     close(param: Param): Result {
//         mui.back();
//         return null;
//     }
//
//     load(param: Param): Result {
//         location.assign(param.data.url);
//         return null;
//     }
//
//     back(param: Param): Result {
//         history.back();
//         return null;
//     }
//
//     wake?(param: Param): Result {
//         throw new Error("Method not implemented.");
//     }
//
//     logout(param: Param): Result {
//         location.assign(CONF.url.login);
//         return null;
//     }
//
//     openImg(param: Param): Result {
//         throw new Error("Method not implemented.");
//     }
//
//     closeAll?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     closeOther?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     download(param: Param): Result {
//         window.location.href = param.data.url;
//         return null;
//     }
//
//     clear?(param?: Param): Result {
//         let ui = new ShellNativeUiH5();
//         ui.toast(new Param({data:'清除成功'}));
//         return null;
//     }
//
//     opentab?(param?: Param): Result {
//         this.open(new Param({data:{url: CONF.url.main}}));
//         return null;
//     }
//
//     setTitle?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     fire?(param: Param): Result {
//         tools.event.fire(param.msg, param.data, window);
//         return null;
//     }
//
// }
//
//

define("AndroidFactory", ["require", "exports", "ShellDeviceAd", "ShellErpManageAd", "ShellFactory"], function (require, exports, ShellDevice_1, ShellErpManage_1, ShellFactory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/6.
     * 安卓接口工厂类
     */
    var AndroidFactory = /** @class */ (function (_super) {
        __extends(AndroidFactory, _super);
        function AndroidFactory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AndroidFactory.prototype.device = function () {
            return new ShellDevice_1.ShellDeviceAd();
        };
        AndroidFactory.prototype.erp = function () {
            return new ShellErpManage_1.ShellErpManageAd();
        };
        return AndroidFactory;
    }(ShellFactory_1.ShellFactory));
    exports.AndroidFactory = AndroidFactory;
});

define("H5Factory", ["require", "exports", "ShellErpManageH5", "ShellFactory", "ShellDeviceH5"], function (require, exports, ShellErpManage_1, ShellFactory_1, ShellDevice_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/6.
     * H5接口工厂类
     */
    var H5Factory = /** @class */ (function (_super) {
        __extends(H5Factory, _super);
        function H5Factory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        H5Factory.prototype.device = function () {
            return new ShellDevice_1.ShellDeviceH5();
        };
        H5Factory.prototype.erp = function () {
            return new ShellErpManage_1.ShellErpManageH5();
        };
        return H5Factory;
    }(ShellFactory_1.ShellFactory));
    exports.H5Factory = H5Factory;
});

define("IosFactory", ["require", "exports", "ShellDeviceIp", "ShellErpManageIp", "ShellFactory"], function (require, exports, ShellDevice_1, ShellErpManage_1, ShellFactory_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by zhengchao on 2017/12/4.
     * 苹果接口工厂类
     */
    var IosFactory = /** @class */ (function (_super) {
        __extends(IosFactory, _super);
        function IosFactory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IosFactory.prototype.device = function () {
            return new ShellDevice_1.ShellDeviceIp();
        };
        IosFactory.prototype.erp = function () {
            return new ShellErpManage_1.ShellErpManageIp();
        };
        return IosFactory;
    }(ShellFactory_1.ShellFactory));
    exports.IosFactory = IosFactory;
});

define("PcFactory", ["require", "exports", "ShellErpManagePc", "ShellFactory", "ShellDevicePc"], function (require, exports, ShellErpManage_1, ShellFactory_1, ShellDevice_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by wengyifan on 2017/12/9.
     * Pc接口工厂类
     */
    var PcFactory = /** @class */ (function (_super) {
        __extends(PcFactory, _super);
        function PcFactory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        PcFactory.prototype.device = function () {
            return new ShellDevice_1.ShellDevicePc();
        };
        PcFactory.prototype.erp = function () {
            return new ShellErpManage_1.ShellErpManagePc();
        };
        return PcFactory;
    }(ShellFactory_1.ShellFactory));
    exports.PcFactory = PcFactory;
});

define("ShellFactory", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="ShellFactory"/>
    /**
     * Created by zhengchao on 2017/12/4.
     * 硬件设备抽象工厂
     */
    var ShellFactory = /** @class */ (function () {
        /**
         * 窗口操作接口
         */
        // protected abstract webView( pageContainer?:HTMLDivElement , navBar?:HTMLDivElement );
        /**
         * 原生界面操作接口
         */
        // protected abstract nativeUi();
        /**
         * 本地缓存操作接口
         */
        // protected abstract storage();
        function ShellFactory() {
        }
        return ShellFactory;
    }());
    exports.ShellFactory = ShellFactory;
});

define("ShellDevicePc", ["require", "exports", "Result", "BaseShellImpl", "Modal"], function (require, exports, Result_1, BaseShellImpl_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var Ajax = G.Ajax;
    /**
     * Created by zhengchao on 2017/12/5.
     * 电脑硬件设备操作接口
     */
    var ShellDevicePc = /** @class */ (function (_super) {
        __extends(ShellDevicePc, _super);
        function ShellDevicePc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellDevicePc.prototype.getInfo = function (param) {
            var result = new Result_1.Result();
            var json = this.pcHandle('getDevice', '');
            if (!tools.isEmpty(json)) {
                result.data = JSON.parse(json).msg;
            }
            else {
                Modal_1.Modal.toast("获取不到设备信息");
            }
            return result;
        };
        ShellDevicePc.prototype.copy = function (param) {
            tools.copy(param.msg);
            Modal_1.Modal.alert('复制成功');
            return null;
        };
        ShellDevicePc.prototype.getGps = function (param) {
            throw new Error("Method not implemented.");
        };
        ShellDevicePc.prototype.versionUp = function (url, param) {
            var result = new Result_1.Result();
            var versionText = this.pcHandle('getVersion', '');
            Ajax.fetch(url, {
                data: { getversion: versionText },
            }).then(function (_a) {
                var response = _a.response;
                param.callback(response);
            });
            return result;
        };
        ShellDevicePc.prototype.wechatin = function (param) {
            throw new Error("Method not implemented.");
        };
        ShellDevicePc.prototype.scan = function (param) {
            throw new Error("Method not implemented.");
        };
        return ShellDevicePc;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellDevicePc = ShellDevicePc;
});

define("ShellErpManagePc", ["require", "exports", "BaseShellImpl", "Result"], function (require, exports, BaseShellImpl_1, Result_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    /**
     * Created by wengyifan on 2017/12/9.
     * PC企业设备操作接口
     */
    var ShellErpManagePc = /** @class */ (function (_super) {
        __extends(ShellErpManagePc, _super);
        function ShellErpManagePc() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellErpManagePc.prototype.inventory = function (param) {
            var result = new Result_1.Result();
            var dict = tools.isEmpty(param.data) ? "" : JSON.stringify(param.data);
            result.data = this.pcHandle(param.msg, dict); //msg=>['callUpload', 'callDownload', 'cancelSend', 'callFinger']
            return result;
        };
        ShellErpManagePc.prototype.pos = function (param) {
        };
        ShellErpManagePc.prototype.callFinger = function (param) {
            var result = new Result_1.Result();
            result.data = JSON.parse(this.pcHandle('callFinger', '{"type":' + param.type + '}'));
            return result;
        };
        ShellErpManagePc.prototype.callFingerMsg = function (param) {
            d.on(window, 'callFingerMsg', function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellErpManagePc.prototype.setFinger = function (param) {
            d.on(window, 'setFinger', function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellErpManagePc.prototype.verifyFinger = function (param) {
            var result = new Result_1.Result();
            var data = param.data;
            result.data = this.pcHandle('verifyFinger', JSON.stringify(data));
            return result;
        };
        ShellErpManagePc.prototype.cancelFinger = function (param) {
            var result = new Result_1.Result();
            result.data = this.pcHandle('cancelFinger', '');
            d.off(window, 'callFingerMsg');
            d.off(window, 'setFinger');
            return result;
        };
        ShellErpManagePc.prototype.downloadFile = function (param) {
            this.pcHandle('downloadFile', param.data);
            return null;
        };
        return ShellErpManagePc;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellErpManagePc = ShellErpManagePc;
});

// /// <amd-module name="ShellNativeUiPc"/>
// import {Param} from "../../entity/Param";
// import {IShellNativeUi} from "../inf/IShellNativeUi";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * PC原生交互操作接口
//  */
// export class ShellNativeUiPc extends BaseShellImpl implements IShellNativeUi{
//     alert( param:Param ) :void{
//     };
//     confirm( param:Param ) :void{
//     };
//     toast( param:Param ) :void{
//     };
//     notice(obj : {msg :string, url?:string, position?:string, time?:number, title?:string, type?:string ,callback?:Function}) :void{
//     };
//
// }

// /// <amd-module name="ShellStoragePc"/>
// import {IShellStorage} from "global/shell/inf/IShellStorage";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * PC本地缓存操作接口
//  */
// export class ShellStoragePc extends BaseShellImpl implements IShellStorage{
//
//     get(key:string) {
//         return window.localStorage.getItem(key);
//     }
//
//     set(key:string,value):void{
//         if(typeof value === 'object')
//             value = JSON.stringify(value);
//         window.localStorage.setItem(key ,value);
//     }
//
//     del(key:string):void{
//         window.localStorage.removeItem(key);
//     }
//
// }
//
//
//
//

/// <amd-module name="ShellWebViewPc"/>
// import {Param} from "../../entity/Param";
// import {IShellWebView} from "global/shell/inf/IShellWebView";
// import {Result} from "global/entity/Result";
// import {BaseShellImpl} from "../BaseShellImpl";
// import tools = G.tools;
// import CONF = BW.CONF;
// import d = G.d;
//
// interface SYSInitPara {
//     pageContainer: HTMLDivElement;
//     navBar: HTMLDivElement;
// }
// interface UrlData{
//     title : string,
//     url?: string;
//     refer? : string,
//     isLock?: boolean;
// }
/**
 * Created by wengyifan on 2017/12/9.
 * Pc窗口管理操作接口
//  */
// export class ShellWebViewPc extends BaseShellImpl implements IShellWebView{
//     private pages: G.sysPcPage = null;
//     private tabs: G.sysPcTab = null;
//     private tabContainer: HTMLUListElement = null;
//     private pageContainer: HTMLDivElement;
//     private navBar: HTMLDivElement;
//     private inMain: boolean = false;
//
//     private tabMenu:TabMenuI[] = [{
//         title: '刷新',
//         callback: (url:string) => {
//             this.refresh(new Param({msg:url}));
//         }
//     },{
//         title: '锁定/解锁',
//         callback: (url) => {
//             let tab = this.tabs.getTab(url);
//             if(tab) {
//                 this.lockToggle( new Param({msg:url,is:!tab.classList.contains('locked')}) );
//             }
//         }
//     }];
//
//     constructor(para: SYSInitPara) {
//         super();
//         if (para && para.pageContainer && para.navBar) {
//             this.inMain = true;
//             this.pageContainer = para.pageContainer;
//             this.navBar = para.navBar;
//             this.tabContainer = <HTMLUListElement>para.navBar.querySelector('ul.page-tabs-content');
//             this.pages = new G.sysPcPage(para.pageContainer);
//             this.tabs = new G.sysPcTab(this.tabContainer, this.tabMenu);
//
//             if(sysPcHistory.isUseLockInit()){
//                 sysPcHistory.setInitType('0');
//
//                 setTimeout(() => {
//                     sysPcHistory.lockGet(tabArr => {
//                         // debugger;
//                         sysPcHistory.removeAll();
//                         tabArr = tabArr.map(tab => {
//                             tab.isLock = true;
//                             sysPcHistory.add(tab);
//                             return tab;
//                         });
//
//                         // debugger;
//                         this.tabs.initHistory(tabArr);
//
//                         if(!tools.isEmpty(tabArr)){
//                             this.open(new Param({data:{url: tabArr.pop().url}}));
//                         }
//                     });
//                 }, 300);
//
//
//
//             }else{
//                 let lastUrl = sysPcHistory.last();
//                 if (lastUrl) {
//                     this.tabs.initHistory((() => {
//                         let tabs: UrlData[] = [],
//                             menus = sysPcHistory.getMenuOrder();
//
//                         for(let url in menus){
//                             let menu = menus[url];
//                             tabs.push({
//                                 url: url,
//                                 title: menu.title,
//                                 isLock: menu.isLock,
//                                 refer: menu.refer
//                             })
//                         }
//
//                         return tabs;
//                     })());
//                     this.open(new Param({data:{url: lastUrl}}));
//                 }
//             }
//
//
//         } else {
//             this.inMain = false;
//         }
//     }
//
//     open(param: Param): Result {
//         let o:winOpen = param.data;
//         if (this.inMain) {
//             let isNew = this.pages.open(o);
//             this.tabs.open(o.url);
//             sysPcHistory.add({url: o.url, refer:param.msg, title:''});
//             if (!isNew) {
//                 this.fire(new Param({msg:'wake', data:{data:this.pages.get(o.url).dom, url:o.url}}));
//             }
//         } else {
//             location.assign(o.url);
//         }
//         localStorage.setItem('viewData', JSON.stringify(o.extras));
//         return null;
//     }
//
//     close(param?: Param): Result {
//         let lastUrl = sysPcHistory.last(),url;
//         if( !!param ){
//             if( typeof param.data === 'object' ){
//                 url = param.data.url;
//             }
//         }
//         typeof url === 'undefined' && (url = lastUrl);
//         if (sysPcHistory.indexOf(url) > -1) {
//             let isLast = lastUrl === url;
//             //事件发送
//             this.fire(new Param({data:{data:param.data.data,event:param.data.event, url:sysPcHistory.getRefer(url)[0]}}));
//             // 历史清除
//             sysPcHistory.remove(url);
//             this.pages.close(url);
//             this.tabs.close(url);
//             // 如果关闭当前打开的页面，则关闭后打开历史倒数第二位置的页面
//             if (sysPcHistory.len() > 0 && isLast) {
//                 this.open(new Param({data:{url: sysPcHistory.last()}}));
//             }
//         }
//         return null;
//     }
//
//     load(param: Param): Result {
//         location.assign(param.data.url);
//         return null;
//     }
//
//     back(param?: Param): Result {
//         window.history.back();
//         return null;
//     }
//
//     wake?(param: Param): Result {
//         throw new Error("Method not implemented.");
//     }
//
//     refresh?(param: Param): Result {
//         this.pages.refresh(param.data.url, () => {
//             // this.setBreadcrumb(url);
//             typeof param.callback === 'function' && param.callback();
//         });
//         return null;
//     }
//
//     lockToggle? (param: Param): Result {
//         sysPcHistory.lockToggle(param.msg, param.is);
//         this.tabs.lockToggle(param.msg, param.is);
//         return null;
//     }
//
//     logout(param: Param): Result {
//         let url = param.data.url;
//         if(G.tools.isEmpty(url)){
//             window.location.assign(CONF.url.login);
//         }else{
//             window.location.assign(url);
//         }
//         return null;
//     }
//
//     openImg(param: Param): Result {
//         throw new Error("Method not implemented.");
//     }
//
//     closeAll?(param:Param):Result {
//         sysPcHistory.get().forEach(url => {
//             this.pages.close(url);
//             this.tabs.close(url);
//         });
//         sysPcHistory.removeAll();
//         return null;
//     }
//
//     closeOther?(param:Param):Result {
//         let lastUrl = sysPcHistory.last();
//         sysPcHistory.get().slice(0).forEach(url => {
//             if (url !== lastUrl) {
//                 this.pages.close(url);
//                 this.tabs.close(url);
//                 sysPcHistory.remove(url);
//             }
//         });
//         return null;
//     }
//
//     download(param: Param): Result {
//         window.location.href = param.data.url;
//         return null;
//     }
//
//     clear?(param?: Param): Result {
//         throw new Error("Method not implemented.");
//     }
//
//     opentab?(param?: Param): Result {
//         location.assign(BW.CONF.url.main);
//         return null;
//     }
//
//     setTitle?(param:Param): Result {
//         this.tabs.setTabTitle( param.data.url, param.data.title );
//         sysPcHistory.setMenuName(param.data.url, param.data.title);
//         // 打开后设置面包屑
//         this.setBreadcrumb( new Param( {data:{url:param.data.url}} ) );
//         return null;
//     }
//
//     setBreadcrumb?( param: Param ): Result {
//         let url=param.data.url;
//         let refers = sysPcHistory.getRefer(url, -1),
//             liHtml = '<li><span class="iconfont icon-house"></span></li>',
//             menu = sysPcHistory.getMenuOrder(),
//             page = this.pages.get(url);
//
//         refers.unshift(url);
//         for (let len = refers.length - 1; len >= 0; len--) {
//             let m = menu[refers[len]];
//             if (m && m.title) {
//                 if (len > 0) {
//                     liHtml += '<li><a data-href="' + refers[len] + '">' + m.title + '</a></li>';
//                 } else {
//                     liHtml += '<li class="active">' + m.title + '</li>';
//                 }
//             }
//         }
//         let self = this,
//             liHtmlDom = d.create('<ol class="breadcrumb">' + liHtml + '</ol>');
//
//         d.on(liHtmlDom, 'click', 'a[data-href]', function() {
//             self.open(new Param({data:{url: this.dataset.href}}));
//         });
//         page.dom.insertBefore(liHtmlDom, page.dom.firstElementChild);
//         return null;
//     }
//
//     fire?(param: Param): Result {
//         let page = this.pages.get(param.data.url);
//         if (page) {
//             tools.event.fire(param.data.event, param.data.data, page.dom);
//         }
//         return null;
//     }
//
// }

define("ShellDeviceIp", ["require", "exports", "Result", "BaseShellImpl", "Modal"], function (require, exports, Result_1, BaseShellImpl_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    /**
     * Created by zhengchao on 2017/12/5.
     * 苹果硬件设备操作接口
     */
    var ShellDeviceIp = /** @class */ (function (_super) {
        __extends(ShellDeviceIp, _super);
        function ShellDeviceIp() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellDeviceIp.prototype.getInfo = function (param) {
            var result = new Result_1.Result(), dict = {};
            if (tools.isEmpty(param.msg)) {
                dict.key = param.msg;
            }
            dict.event = "getDevice";
            this.ipHandle('getDevice', dict);
            window.addEventListener('getDevice', function (e) {
                param.callback(e);
            });
            return result;
        };
        ShellDeviceIp.prototype.copy = function (param) {
            // let ui=new ShellNativeUiIp();
            param.msg = G.tools.str.toEmpty(param.msg).trim();
            this.ipHandle('copy', { data: param.msg });
            Modal_1.Modal.toast('复制成功');
            return null;
        };
        ShellDeviceIp.prototype.getGps = function (param) {
            if (param.type === 0)
                param.callback("");
            else {
                var dict = {};
                dict.type = param.type;
                dict.event = "putGps";
                this.ipHandle('getGps', dict);
                window.addEventListener('putGps', function (e) {
                    param.callback(e);
                });
            }
            return null;
        };
        ShellDeviceIp.prototype.update = function (param) {
            this.ipHandle('checkUpdate');
            Modal_1.Modal.toast('已经是最新版本');
            return null;
        };
        ShellDeviceIp.prototype.quit = function (param) {
            this.ipHandle('quit');
            return null;
        };
        ShellDeviceIp.prototype.touchid = function (param) {
            var event = "touchidCallback";
            this.ipHandle('touchid', { event: event });
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellDeviceIp.prototype.wechatin = function (param) {
            var event = "wechatCallback";
            this.ipHandle('wechatin', { event: event });
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellDeviceIp.prototype.scan = function (param) {
            var event = 'scanCallback';
            this.ipHandle('scan', { event: event });
            d.once(window, event, function (e) {
                param.callback(e);
            });
            return null;
        };
        ShellDeviceIp.prototype.shake = function (param) {
            this.ipHandle('shake', { event: 'shake' }); //param.msg=>event;
            d.once(window, 'shake', function (e) {
                param.callback(e);
            });
            return null;
        };
        return ShellDeviceIp;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellDeviceIp = ShellDeviceIp;
});

define("ShellErpManageIp", ["require", "exports", "BaseShellImpl"], function (require, exports, BaseShellImpl_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /**
     * Created by wengyifan on 2017/12/9.
     * 苹果企业设备操作接口
     */
    var ShellErpManageIp = /** @class */ (function (_super) {
        __extends(ShellErpManageIp, _super);
        function ShellErpManageIp() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ShellErpManageIp.prototype.inventory = function (param) {
            return null;
        };
        ShellErpManageIp.prototype.pos = function (param) {
        };
        ShellErpManageIp.prototype.downloadFile = function (param) {
        };
        return ShellErpManageIp;
    }(BaseShellImpl_1.BaseShellImpl));
    exports.ShellErpManageIp = ShellErpManageIp;
});

// /// <amd-module name="ShellNativeUiIp"/>
// import {Param} from "../../entity/Param";
// import {IShellNativeUi} from "../inf/IShellNativeUi";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * 苹果原生交互操作接口
//  */
// export class ShellNativeUiIp extends BaseShellImpl implements IShellNativeUi{
//     alert( param:Param ) :void{
//         alert(param.data);
//     };
//     confirm( param:Param ) :void{
//         if (confirm(param.data)) {
//             param.callback(1);
//         } else {
//             param.callback(0);
//         }
//     };
//     toast( param:Param ) :void{
//         mui.toast(param.data);
//     };
//     notice(obj : {msg :string, url?:string, position?:string, time?:number, title?:string, type?:string}) :void{
//         let dict :obj= {};
//         dict.data = obj.msg;
//         this.ipHandle('callMsg',dict);
//     };
//
// }

// /// <amd-module name="ShellStorageIP"/>
// import {IShellStorage} from "global/shell/inf/IShellStorage";
// import {BaseShellImpl} from "../BaseShellImpl";
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * 苹果本地缓存操作接口
//  */
// export class ShellStorageIp extends BaseShellImpl implements IShellStorage{
//
//     get(key:string):any {
//         return window.localStorage.getItem(key);
//     }
//
//     set(key:string,value):void{
//         if(typeof value === 'object')
//             value = JSON.stringify(value);
//         window.localStorage.setItem(key ,value);
//     }
//
//     del(key:string):void{
//         window.localStorage.removeItem(key);
//     }
//
// }
//
//
//
//

/// <amd-module name="ShellWebViewIp"/>
// import {Param} from "../../entity/Param";
// import {IShellWebView} from "global/shell/inf/IShellWebView";
// import {Result} from "global/entity/Result";
// import {BaseShellImpl} from "../BaseShellImpl";
// import tools = G.tools;
// import CONF = BW.CONF;
//
// /**
//  * Created by wengyifan on 2017/12/9.
//  * 苹果窗口管理操作接口
//  */
// export class ShellWebViewIp extends BaseShellImpl implements IShellWebView{
//     open(param: Param): Result {
//         let o:winOpen = param.data;
//         if(typeof o.data === "object"){
//             o.data = JSON.stringify(o.data);
//         }
//         window.localStorage.setItem('viewData', JSON.stringify(o.extras));
//         let dict = {
//             url : o.url,
//             header : o.header,
//             event : "windowData",
//             extras : {viewData:JSON.stringify(o.extras)},
//             data : o.data
//         };
//         this.ipHandle('open', dict);
//         return null;
//     }
//
//     close(param: Param): Result {
//         let dict:obj = {};
//         dict.data = param.data.data;
//         dict.event = param.data.event;
//         this.ipHandle('close', dict);
//         return null;
//     }
//
//     load(param: Param): Result {
//         let dict:obj = {};
//         dict.url = param.data.url;
//         dict.data = param.data.data;
//         dict.event = "windowData";
//         this.ipHandle('load', dict);
//         return null;
//     }
//
//     back(param: Param): Result {
//         let dict:obj = {};
//         dict.event = param.data.event;
//         dict.data = param.data.data;
//         this.ipHandle('back',dict);
//         return null;
//     }
//
//     wake?(param: Param): Result {
//         let dict:obj = {};
//         dict.data = param.data.data;
//         dict.event = param.data.event;
//         this.ipHandle('wake', dict);
//         return null;
//     }
//
//     logout(param: Param): Result {
//         if(tools.isEmpty(param.data.url)){
//             this.ipHandle('logout', {url:CONF.url.login});
//         }else{
//             this.ipHandle('logout',{url:param.data.url});
//         }
//         return null;
//     }
//
//     openImg(param: Param): Result {
//         let dict:obj = {};
//         dict.url = param.data.url;
//         this.ipHandle('openImg',dict);
//         return null;
//     }
//
//     closeAll?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     closeOther?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     download(param: Param): Result {
//         let dict :obj= {};
//         dict.url = param.data.url;
//         this.ipHandle('download', dict);
//         return null;
//     }
//
//     clear?(param?: Param): Result {
//         this.ipHandle('clear');
//         return null;
//     }
//
//     opentab?(param?: Param): Result {
//         let dict :obj= {};
//         let ja = [
//             {icon : "home", name : "首页", url : BW.CONF.url.home},
//             {icon : "contacts", name : "通讯", url : BW.CONF.url.contact},
//             {icon : "message", name : "消息", url : BW.CONF.url.message},
//             {icon : "myselfMenu", name : "我的", url : BW.CONF.url.myselfMenu}
//         ];
//         dict.data = JSON.stringify(ja);
//         dict.userid = param.data.userid;
//         dict.accessToken = param.data.accessToken;
//         this.ipHandle('opentab', dict);
//         return null;
//     }
//
//     setTitle?(param:Param):Result {
//         throw new Error("Method not implemented.");
//     }
//
//     fire?(param: Param): Result {
//         tools.event.fire(param.msg, param.data, window);
//         return null;
//     }
//
// }
//
//
//
//

/// <amd-module name="Badge"/>
// import d = G.d;
// import tools = G.tools;
// import {Component, IComponentPara} from "../../Component";
//
// interface IBadge extends IComponentPara{
//     count?: number;
//     maxcount?: number;
//     isShowZero?: boolean;
//     isDot?: boolean;
//     position?: string;
//     container: HTMLElement;
//     color?: string;
// }
//
// /**
//  * 徽标组件对象
//  */
// export class Badge extends Component implements IBadge {
//     protected wrapperInit(): HTMLElement {
//         return d.create(`<span class="badge">` + container.innerHTML + `<sup class="badge-count">.</sup></span>`);
//     }
//
//     private init(badge: IBadge) {
//         // this._wrapper = d.createByHTML(`<sup class="badge-count"></sup>`);
//         // this.container = badge.container;
//         this.count = badge.count;
//         this.isShowZero = badge.isShowZero;
//         this.isDot = badge.isDot;
//         this.color = badge.color;
//         this.maxcount = badge.maxcount;
//         this.position = badge.position;
//     }
//
//     /*
//     * 展示的数字，大于 maxcount 时显示为 ${maxcount}+，为 0 时隐藏
//     * 类型number
//     * */
//     private _count: number;
//     set count(count: number) {
//         this._count = tools.isEmpty(count) ? 0 : count;
//         let curCount = tools.isEmpty(count) ? 0 : count > this._maxcount ? this._maxcount + '+' : count;
//         if (this._container) {
//             let countWrapper = d.query(`.badge-count`, this._container);
//             if (countWrapper) {
//                 if (!this._isShowZero && curCount === 0) {
//                     countWrapper.style.display = 'none';
//                     return;
//                 }
//                 countWrapper.innerHTML = curCount + '';
//             }
//         }
//     }
//
//     get count() {
//         return this._count;
//     }
//
//     /*
//     *  展示封顶的数字值
//     *  类型：number
//     *  默认值：99
//     * */
//     private _maxcount;
//     set maxcount(maxcount: number) {
//         this._maxcount = tools.isEmpty(maxcount) ? 99 : maxcount;
//         let countWrapper = d.query(`.badge-count`, this._container);
//         if (countWrapper && this._maxcount) {
//             if (this._count > this._maxcount) {
//                 countWrapper.innerHTML = this.maxcount + '+';
//             } else {
//                 countWrapper.innerHTML = this._count + '';
//             }
//         }
//     }
//
//     get maxcount() {
//         return this._maxcount;
//     }
//
//     /*
//     * 当数值为 0 时，是否展示 Badge
//     * 类型：boolean
//     * 默认：false
//     * */
//     private _isShowZero: boolean;
//     set isShowZero(isShowZero: boolean) {
//         this._isShowZero = tools.isEmpty(isShowZero) ? false : isShowZero;
//         let countWrapper = d.query('sup', this._container);
//         if (countWrapper && this._isShowZero) {
//             if (this._count === 0) {
//                 countWrapper.style.display = 'inline-block';
//             }
//         } else if(countWrapper && this._count === 0){
//             countWrapper.style.display = 'none';
//         }
//     }
//
//     get isShowZero() {
//         return this._isShowZero;
//     }
//
//     /*
//     *  不展示数字，只有一个小红点
//     *  类型：boolean
//     *  默认值：false
//     * */
//     private _isDot: boolean;
//     set isDot(isDot: boolean) {
//         this._isDot = tools.isEmpty(isDot) ? false : isDot;
//         let sup = d.query('sup', this._container);
//         if (this._isDot && sup) {
//             sup.classList.remove('badge-count');
//             sup.classList.add('badge-dot');
//         } else if (sup) {
//             sup.classList.remove('badge-dot');
//             sup.classList.add('badge-count');
//         }
//     }
//
//     get isDot() {
//         return this._isDot;
//     }
//
//     /*
//     * 徽标背景颜色
//     * 默认：green
//     * green|red|gray|blue|yellow
//     * */
//     private _color;
//     set color(color: string) {
//         color = tools.isEmpty(color) ? 'red' : color;
//         let sup = d.query('sup', this._container);
//         if (!sup) {
//             return;
//         }
//         if (this._color) {
//             sup.classList.remove(this._color);
//         }
//         switch (color) {
//             case 'green':
//                 sup.classList.add('badge-green');
//                 break;
//             case 'red':
//                 sup.classList.add('badge-red');
//                 break;
//             case 'gray':
//                 sup.classList.add('badge-gray');
//                 break;
//             case 'yellow':
//                 sup.classList.add('badge-yellow');
//                 break;
//             case 'blue':
//                 sup.classList.add('badge-blue');
//                 break;
//         }
//         this._color = color;
//     }
//
//     get color() {
//         return this._color;
//     }
//
//     /*
//     * 徽标出现位置
//     * 默认值：rightTop:右上 | center: 居中
//     * */
//     private _position;
//     set position(position: string) {
//         position = tools.isEmpty(position) ? 'rightTop' : position;
//         let sup = d.query('sup', this._container);
//         switch (position) {
//             case 'rightTop':
//                 sup.classList.add('right-top');
//                 break;
//             case 'center':
//                 sup.classList.add('center');
//                 break;
//         }
//         this._position = position;
//     }
//
//     get position() {
//         return this._position;
//     }
//
//
//
//     // set container(container) {
//     //     //如果container存在，则将container装载到徽标容器
//     //     if (container) {
//     //
//     //     }
//     //     this._container = container;
//     // }
//     constructor(private badge?: IBadge) {
//         super(badge);
//         this.init(badge);
//     }
// }

/// <amd-module name="Avatar"/>
// import d = G.d;
// import tools = G.tools;
// import {Component, IComponentPara} from "../../Component";
//
// interface IAvatar extends IComponentPara{
//     container: HTMLElement;
//     shape?: string;
//     size?: string;
//     url?: string;
//     type?: string;
//     content?: string;
//     color?: string;
//     bgColor?: string;
//     tip?: string;
// }
//
// /**
//  * 头像组件对象
//  */
// export class Avatar extends Component implements IAvatar {
//     protected wrapperInit(): HTMLElement {
//         return d.create(`<span class="avatar"></span>`);
//     }
//
//     private init(avatar: IAvatar) {
//         // this.wrapper = d.create(`<span class="avatar"></span>`);
//         // this.container = avatar.container;
//         this._content = avatar.content;
//         this.type = avatar.type;
//         this.size = avatar.size;
//         this.content = avatar.content;
//         this.url = avatar.url;
//         this.shape = avatar.shape;
//         this.color = avatar.color;
//         this.bgColor = avatar.bgColor;
//         this.container.appendChild(this.wrapper);
//     }
//
//     /**
//      * 头像文本
//      * 类型：string
//      * 默认值：type为icon时则为avatar|type为text时则为User
//      */
//     private _content: string;
//     set content(content: string) {
//         let iconWrapper = d.query('i', this.wrapper);
//         switch (this._type) {
//             case 'icon':
//                 content = tools.isEmpty(content) ? 'avatar' : content;
//                 //不存在则创建i标签作为图标容器
//                 if (!iconWrapper) {
//                     this.wrapper.innerHTML = '';
//                     iconWrapper = d.create(`<i class="avatar-icon iconfont icon-${content}" style="float:none"></i>`);
//                     this.wrapper.appendChild(iconWrapper);
//                 }
//                 //存在则删除原来的样式
//                 else {
//                     iconWrapper.classList.remove(`icon-${this._content}`);
//                     iconWrapper.classList.add(`icon-${content}`);
//                 }
//                 break;
//             case 'text':
//                 this.wrapper.innerHTML = '';
//                 content = tools.isEmpty(content) ? 'USER' : content;
//                 if (iconWrapper) {
//                     d.remove(iconWrapper);
//                 }
//                 let textSpan = d.create(`<span class="avatar-text" style="display:inline-block;">${content}</span>`),
//                     textLen = content.replace(/[^\x00-\xff]/gi, "--").length - 1;
//
//                 this.wrapper.appendChild(textSpan);
//                 //由于size和content相互依赖（size中的长度依赖于content，content字体缩小的情况又依赖于size）,【待斟酌。。。】
//                 //对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。
//                 switch (this._size) {
//                     case 'large':
//                         if (textLen > 3) {
//                             textSpan.style.transform = `scale(${1 - 0.06 * textLen})`;
//                         }
//                         break;
//                     case 'small':
//                         textSpan.style.transform = `scale(${1 - 0.125 * textLen})`;
//                         break;
//                     default:
//                         if (textLen > 2) {
//                             textSpan.style.transform = `scale(${1 - 0.07 * textLen})`;
//                         }
//                         break;
//                 }
//                 break;
//             case 'img':
//                 this.wrapper.innerHTML = '';
//                 let imgDiv = d.create(`<img />`);
//                 this.wrapper.appendChild(imgDiv);
//         }
//         this._content = content;
//     }
//
//     get content() {
//         return this._content;
//     }
//
//     /*
//     * 图片类头像的资源地址
//     * 类型：string;
//     * 默认值：空
//     * */
//     private _url: string;
//     set url(url: string) {
//         url = tools.isEmpty(url) ? 'default' : url;
//         let img = <HTMLElement> this.wrapper.firstChild;
//         if (this._type === 'img' && url && img) {
//             img.setAttribute('src', url);
//         }
//         this._url = url;
//     }
//
//     get url() {
//         return this._url;
//     }
//
//     /*
//   * 头像类型
//   * 类型：string;
//   * 默认值：icon |img|text
//   *
//   * */
//     private _type: string;
//     set type(type: string) {
//         type = tools.isEmpty(type) ? 'icon' : type;
//         this._type = type;
//         let iconDom = d.query('i', this.wrapper),
//             imgDom = d.query('img', this.wrapper);
//         switch (type) {
//             case 'icon':
//                 this.wrapper.innerHTML = '';
//                 if (imgDom) {
//                     d.remove(imgDom);
//                     imgDom = null;
//                 }
//                 this.content = this._content;
//                 break;
//             case 'img':
//                 this.wrapper.innerHTML = '';
//                 if (iconDom) {
//                     d.remove(iconDom);
//                     iconDom = null;
//                 }
//                 break;
//             case 'text':
//                 this.wrapper.innerHTML = '';
//                 if (imgDom) {
//                     d.remove(imgDom);
//                     imgDom = null;
//                 }
//                 if (iconDom) {
//                     d.remove(iconDom);
//                     iconDom = null;
//                 }
//                 this.content = this._content;
//                 break;
//         }
//     }
//
//     get type() {
//         return this._type;
//     }
//
//
//     /**
//      * 头像形状
//      * 类型：string;
//      * 默认值：circle:圆形|square:正方形
//      */
//     private _shape: string;
//     set shape(shape: string) {
//         shape = tools.isEmpty(shape) ? 'circle' : shape;
//         switch (shape) {
//             case 'circle':
//                 this.wrapper.classList.remove('avatar-square');
//                 this.wrapper.classList.add('avatar-circle');
//                 break;
//             case 'square':
//                 this.wrapper.classList.remove('avatar-circle');
//                 this.wrapper.classList.add('avatar-square');
//                 break;
//         }
//         this._shape = shape;
//     }
//
//     get shape() {
//         return this._shape;
//     }
//
//     /*
//     * 头像尺寸
//     * 类型:string;
//     * 默认值：default |small|large
//     * */
//     private _size: string;
//     set size(size: string) {
//         //若已经初始化过头像尺寸，则删除之前添加的样式
//         if (this._size) {
//             this.wrapper.classList.remove(`avatar-${this._size}`);
//         }
//         if (size) {
//             this.wrapper.classList.add(`avatar-${size}`);
//             this._size = size;
//         }
//         if (this.type === 'text') {
//             let textSpan = d.query(`.avatar-text`, this.wrapper),
//                 textLen = textSpan.innerHTML.replace(/[^\x00-\xff]/gi, "--").length - 1;
//             //对于字符型的头像，当字符串较长时，字体大小可以根据头像宽度自动调整。
//             switch (size) {
//                 case 'large':
//                     if (textLen > 3) {
//                         textSpan.style.transform = `scale(${1 - 0.06 * textLen})`;
//                     }
//                     break;
//                 case 'small':
//                     textSpan.style.transform = `scale(${1 - 0.125 * textLen})`;
//                     break;
//             }
//         }
//         this._size = size;
//     }
//
//     get size() {
//         return this._size;
//     }
//
//     /*
//     * 头像默认背景颜色
//     * 类型：string
//     * 默认： #CCCCCC;
//     * */
//     private _bgColor: string;
//     set bgColor(bgColor: string) {
//         this._bgColor = tools.isEmpty(bgColor) ? '#CCCCCC' : bgColor;
//         this.wrapper.style.backgroundColor = this._bgColor;
//     }
//
//     get bgColor() {
//         return this._bgColor;
//     }
//
//     /*
//     * 头像默认字体颜色
//     * 类型：string
//     * 默认： #FFFFFF;
//     * */
//     private _color: string;
//     set color(color: string) {
//         this._color = tools.isEmpty(color) ? '#FFFFFF' : color;
//         this.wrapper.style.color =  this._color;
//     }
//
//     get color() {
//         return this._color;
//     }
//     constructor(private avatar: IAvatar) {
//         super(avatar);
//         this.init(avatar);
//     }
//
//
// }

define("Toast", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Toast"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    /**
     * 提醒Toast组件对象
     */
    var Toast = /** @class */ (function (_super) {
        __extends(Toast, _super);
        function Toast(para) {
            if (para === void 0) { para = {}; }
            var _this = 
            // debugger;
            _super.call(this, Object.assign(para, { isMb: false })) || this;
            _this.init(para);
            return _this;
        }
        Toast.prototype.wrapperInit = function () {
            return h("div", { className: "toast" });
        };
        Toast.prototype.init = function (toast) {
            this.type = toast.type;
            this.position = toast.position;
            this.content = toast.content;
            // this.container = toast.container;
            this.isClose = toast.isClose;
            this._duration = tools.isEmpty(toast.duration) ? 3 : toast.duration;
            this.isShow = toast.isShow;
        };
        Object.defineProperty(Toast.prototype, "isClose", {
            get: function () {
                return this._isClose;
            },
            set: function (isClose) {
                var _this = this;
                this._isClose = tools.isEmpty(isClose) ? false : isClose;
                var close = d.query('.toast-close', this.wrapper);
                if (!close && this._isClose) {
                    close = h("i", { className: "toast-close", "aria-hidden": "true" }, "x");
                    d.on(close, 'click', function () {
                        _this.isShow = false;
                    });
                    this.wrapper.appendChild(close);
                }
                else {
                    d.remove(close);
                    close = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                if (this._type && this._type !== type) {
                    this.wrapper.classList.remove("toast-" + this._type);
                }
                this._type = tools.isEmpty(type) ? 'simple' : type;
                if (this._type === 'simple' || this.type === 'bar') {
                    this.wrapper.classList.add("toast-" + this._type);
                }
                this._type = type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                this._content = tools.isEmpty(content) ? '成功' : content;
                var span = d.query('span', this.wrapper);
                if (!span) {
                    span = h("span", null);
                    this.wrapper.appendChild(span);
                }
                span.innerText = this._content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                var _this = this;
                this._isShow = tools.isEmpty(isShow) ? true : isShow;
                if (this._isShow) {
                    this.wrapper.classList.add('toast-in');
                    this.wrapper.style.display = 'block';
                }
                else {
                    if (this._onClose) {
                        this._onClose();
                    }
                    this.wrapper.classList.remove('toast-in');
                    this.wrapper.classList.add('toast-out');
                    setTimeout(function () {
                        if (_this.wrapper) {
                            _this.wrapper.classList.remove('toast-out');
                            _this.wrapper.style.display = 'none';
                        }
                    }, 0);
                }
                if (this._duration !== 0) {
                    var self_1 = this;
                    //默认3秒后销毁
                    setTimeout(function () {
                        self_1.destroy();
                    }, self_1._duration * 1000);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                if (this._position && this._position !== position) {
                    this.wrapper.classList.remove("toast-" + this._position);
                }
                this._position = tools.isEmpty(position) ? (tools.isMb ? 'mobile' : 'top') : position;
                this.wrapper.classList.add("toast-" + this._position);
                this._type = position;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toast.prototype, "onClose", {
            get: function () {
                return this._onClose;
            },
            set: function (callback) {
                this._onClose = callback;
            },
            enumerable: true,
            configurable: true
        });
        return Toast;
    }(Component));
    exports.Toast = Toast;
});

define("Modal", ["require", "exports", "ModalHeader", "ModalFooter", "Button", "Drag", "InputBox"], function (require, exports, ModalHeader_1, ModalFooter_1, Button_1, drag_1, InputBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Modal"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    var allModalArr = [];
    /**
     * 模态框
     */
    var Modal = /** @class */ (function (_super) {
        __extends(Modal, _super);
        // protected _className: string;
        // set className(className: string) {
        //     this._className = tools.isEmpty(className) ? 'modal-default' : className;
        //     this.wrapper.classList.add(this._className);
        //     //如果为移动端模态框（即包含类modal-mobile，在body包含ios-top的情况下添加样式ios-top-header）
        //     if (this.wrapper.classList.contains('modal-mobile') && document.body.classList.contains('ios-top')) {
        //         this.wrapper.classList.add('ios-top-header');
        //     }
        // }
        //
        // get className() {
        //     return this._className;
        // }
        function Modal(para) {
            if (para === void 0) { para = {}; }
            var _this = _super.call(this, para) || this;
            _this.escKeyDown = function (e) {
                e.stopPropagation();
                var keyCode = e.keyCode || e.which || e.charCode;
                if (keyCode === 27) {
                    _this.isShow = false;
                }
            };
            _this._zIndex = 1001;
            _this._headWrapper = null;
            // private get header() {
            //     return this._header;
            // }
            _this._bodyWrapper = null;
            _this.init(para);
            return _this;
        }
        Object.defineProperty(Modal.prototype, "modalHeader", {
            get: function () {
                return this._modalHeader;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "modalFooter", {
            get: function () {
                return this._modalFooter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal, "count", {
            get: function () {
                return allModalArr.length;
            },
            enumerable: true,
            configurable: true
        });
        Modal.prototype.wrapperInit = function (para) {
            var isMb = tools.isUndefined(para.isMb) ? tools.isMb : !!para.isMb, defaultClass = typeof para.className === 'string' ? para.className : 'modal-default', className = "modal-wrapper " + defaultClass + " " + (isMb ? ' modal-mobile' : '');
            return h("div", { tabIndex: parseInt(tools.getGuid('')), className: className });
        };
        Object.defineProperty(Modal.prototype, "escKey", {
            get: function () {
                return this._isEsc;
            },
            set: function (isEsc) {
                if (tools.isMb) {
                    return;
                }
                if (isEsc && !this._isEsc) {
                    d.on(this.wrapper, 'keydown', this.escKeyDown);
                }
                else if (!isEsc && this._isEsc) {
                    d.off(this.wrapper, 'keydown', this.escKeyDown);
                }
                this._isEsc = isEsc;
            },
            enumerable: true,
            configurable: true
        });
        Modal.prototype.init = function (modal) {
            // this.container = modal.container;
            this.container.classList.add('modal-box');
            // this._wrapper = d.create(`<div class="modal-wrapper"></div>`);
            this._isAdaptiveCenter = tools.isEmpty(modal.isAdaptiveCenter) ? false : modal.isAdaptiveCenter;
            this._isAnimate = this.isAdaptiveCenter ? false : (tools.isEmpty(modal.isAnimate) ? true : modal.isAnimate);
            // this.className = modal.className;
            // this.container.appendChild(this._wrapper);
            this.header = modal.header;
            this.body = modal.body;
            this.footer = modal.footer;
            this.width = modal.width;
            this._isOnceDestroy = modal.isOnceDestroy;
            this.isBackground = modal.isBackground;
            this.position = modal.position;
            this.fullPosition = modal.fullPosition;
            this.isShow = modal.isShow;
            this.height = modal.height;
            this.isDrag = modal.isDrag;
            this.size = modal.size;
            this.opacity = modal.opacity;
            this.onOk = modal.onOk;
            this.onCancel = modal.onCancel;
            this.onClose = modal.onClose;
            this.onLarge = modal.onLarge;
            this.top = modal.top;
            this.zIndex = modal.zIndex || 1001;
            if (modal.keyDownHandle) {
                d.on(this.wrapper, 'keydown', modal.keyDownHandle);
            }
            this.escKey = tools.isEmpty(modal.escKey) ? true : modal.escKey;
            allModalArr.push(this);
        };
        Object.defineProperty(Modal.prototype, "zIndex", {
            get: function () {
                return this._zIndex;
            },
            set: function (zIndex) {
                if (typeof zIndex === 'number') {
                    this._zIndex = zIndex;
                    this.wrapper && (this.wrapper.style.zIndex = zIndex + '');
                    this.modalScreen && (this.modalScreen.style.zIndex = zIndex - 1 + '');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "headWrapper", {
            get: function () {
                if (this._headWrapper === null) {
                    this._headWrapper = this._headWrapper ? this._headWrapper : h("div", { className: 'head-wrapper' });
                    this.wrapper.appendChild(this._headWrapper);
                }
                return this._headWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "header", {
            set: function (header) {
                var _this = this;
                // 头部容器
                // if(this._headWrapper){
                //     this._headWrapper.remove();
                //     this._headWrapper = null;
                // }
                if (!header) {
                    return;
                }
                this._modalHeader = new ModalHeader_1.ModalHeader(Object.assign({
                    container: this.headWrapper,
                    dragEl: this.wrapper,
                    isClose: true,
                }, typeof header === 'string' ? { title: header } : header));
                // 为头部关闭按钮绑定事件
                var close = this._modalHeader.modalCloseEl;
                close && d.on(close, 'click', function () {
                    _this.isShow = false;
                });
                this._header = header;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "bodyWrapper", {
            get: function () {
                if (!this._bodyWrapper) {
                    this._bodyWrapper = h("div", { className: "modal-body" + (tools.isMb ? ' modal-body-mobile' : '') });
                    tools.isNotEmpty(this.headWrapper) ? d.after(this.headWrapper, this._bodyWrapper) : d.prepend(this.wrapper, this._bodyWrapper);
                }
                return this._bodyWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "body", {
            get: function () {
                return this._body;
            },
            set: function (body) {
                if (!body) {
                    return;
                }
                //生成身体元素，仅一次
                var bodyWrapper = this.bodyWrapper;
                //删除掉原来挂载的身体
                if (this._body) {
                    bodyWrapper.removeChild(this._body);
                    this._body = null;
                }
                d.append(bodyWrapper, body);
                this._body = body;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "footer", {
            get: function () {
                return this._footer;
            },
            set: function (footer) {
                if (footer === undefined) {
                    return;
                }
                //生成尾部元素，仅一次
                if (!this._footWrapper) {
                    this._footWrapper = h("div", { className: "foot-wrapper" });
                    this.wrapper.appendChild(this._footWrapper);
                }
                //删除掉原来挂载的尾部
                if (this._footer) {
                    d.remove(this._footWrapper);
                }
                // if (footer === undefined) {
                this._modalFooter = new ModalFooter_1.ModalFooter(footer);
                // }
                this._footer = footer;
                //挂载新的尾部
                this._footWrapper.appendChild(this._modalFooter.wrapper);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "height", {
            get: function () {
                return this.wrapper.style.height;
            },
            /**
             * 模态框高度
             * 类型：string
             * 默认值：auto
             */
            // private _height?: string;
            set: function (height) {
                // this._height = tools.isEmpty(height) ? '' : height;
                this.wrapper.style.height = height;
                var otherHeight = this.headWrapper ? this.headWrapper.offsetHeight : 0;
                otherHeight = otherHeight + (this._footWrapper ? this._footWrapper.offsetHeight : 0);
                this.bodyWrapper.style.height = "calc(100% - " + otherHeight + "px)";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "width", {
            get: function () {
                return this.wrapper.style.width;
            },
            /**
             * 模态框宽度
             * 类型：string
             * 默认值：auto
             */
            // private _width?: string;
            set: function (width) {
                // this._width = tools.isEmpty(width) ? '' : width;
                this.wrapper.style.width = width;
                //设置模态框最大高度，超出部分滚动条...
                // this.wrapper.classList.add('width-out-scroll');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                //移动端默认为center,PC端默认为default
                this._position = tools.isEmpty(position) ? 'default' : position;
                var elWidth, elHeight, paWidth = parseInt(getComputedStyle(document.body)['width']), paHeight = parseInt(getComputedStyle(document.body)['height']), wrapper = this.wrapper, computedStyle = getComputedStyle(wrapper);
                //避免模态框显示为display:none时无法获取元素宽高
                if (computedStyle.display === 'none' && (this._position === 'center' || this._position === 'default')) {
                    wrapper.style.display = 'block';
                    elWidth = parseInt(computedStyle.width);
                    elHeight = parseInt(computedStyle.height);
                    wrapper.style.display = 'none';
                }
                else {
                    elWidth = parseInt(computedStyle.width);
                    elHeight = parseInt(computedStyle.height);
                }
                //让移动端父元素高度为当前移动端屏幕高度（居中时）
                if (tools.isMb && this._position === 'center') {
                    paWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth || screen.height;
                    paHeight = window.innerHeight | document.documentElement.clientHeight || document.body.clientHeight || screen.height;
                }
                // debugger;
                var isAdaptiveCenter = this.isAdaptiveCenter;
                switch (this._position) {
                    //左右居中，距离顶部40px;
                    case 'default':
                        if (isAdaptiveCenter) {
                            wrapper.style.left = '50%';
                            wrapper.style.transform = 'translateX(-50%)';
                        }
                        else {
                            wrapper.style.left = (paWidth - elWidth) / 2 + 'px';
                        }
                        // wrapper.style.marginLeft = '-' + (elWidth / 2) + 'px';
                        wrapper.style.top = (tools.isMb ? 0 : 40) + "px";
                        // wrapper.style.minWidth = elWidth + 'px';
                        break;
                    //左右上下居中
                    case 'center':
                        if (isAdaptiveCenter) {
                            wrapper.style.left = '50%';
                            wrapper.style.top = '50%';
                            wrapper.style.transform = 'translateX(-50%) translateY(-50%)';
                        }
                        else {
                            wrapper.style.left = (paWidth - elWidth) / 2 + 'px';
                            wrapper.style.top = (paHeight - elHeight) / 2 + 'px';
                        }
                        // wrapper.style.marginLeft = '-' + (elWidth / 2) + 'px';
                        // wrapper.style.minWidth = elWidth + 'px';
                        break;
                    //上下铺满,左边占最多160px
                    case 'left':
                        wrapper.style.left = '0';
                        wrapper.style.top = '0';
                        wrapper.style.bottom = '0';
                        wrapper.style.right = 'auto';
                        wrapper.style.borderRadius = '0';
                        wrapper.style.minWidth = 160 + 'px';
                        if (!this.isDrag && !tools.isMb) {
                            this.isDrag = true;
                        }
                        break;
                    //上下铺满,右边占最多160px
                    case 'right':
                        wrapper.style.right = '0';
                        wrapper.style.top = '0';
                        wrapper.style.bottom = '0';
                        wrapper.style.left = 'auto';
                        wrapper.style.borderRadius = '0';
                        wrapper.style.minWidth = 160 + 'px';
                        if (!this.isDrag && !tools.isMb) {
                            this.isDrag = true;
                        }
                        break;
                    //左右铺满，置顶占最大140px
                    case 'up':
                        wrapper.style.right = '0';
                        wrapper.style.left = '0';
                        wrapper.style.top = '0';
                        wrapper.style.bottom = 'auto';
                        wrapper.style.borderRadius = '0';
                        if (!this.isDrag && !tools.isMb) {
                            this.isDrag = true;
                        }
                        break;
                    //左右铺满，底部占最大140px
                    case 'down':
                        wrapper.style.right = '0';
                        wrapper.style.left = '0';
                        wrapper.style.bottom = '0';
                        wrapper.style.top = 'auto';
                        wrapper.style.borderRadius = '0';
                        if (!this.isDrag && !tools.isMb) {
                            this.isDrag = true;
                        }
                        break;
                    //上下左右铺满
                    case 'full':
                        wrapper.style.right = '0';
                        wrapper.style.left = '0';
                        wrapper.style.bottom = '0';
                        wrapper.style.top = '0';
                        wrapper.style.borderRadius = '0';
                        break;
                }
                //模态框的出现方式依赖于position，因而position改变必须置于isShow之前\
                if (!this.isShow) {
                    this.isShow = true;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "isAdaptiveCenter", {
            get: function () {
                return this._isAdaptiveCenter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                var _this = this;
                this._isShow = tools.isEmpty(isShow) ? true : isShow;
                if (this._isShow) {
                    this.wrapper.focus();
                    this.wrapper.style.display = 'block';
                    //在模态框动画加载出来前，禁用模态框的鼠标事件
                    this.wrapper.style.pointerEvents = 'none';
                    if (this.modalScreen) {
                        this.modalScreen.style.pointerEvents = 'none';
                    }
                    setTimeout(function () {
                        if (_this.wrapper) {
                            _this.wrapper.style.pointerEvents = 'auto';
                        }
                        if (_this.modalScreen) {
                            _this.modalScreen.style.pointerEvents = 'auto';
                        }
                    }, 300);
                    if (this._isAnimate) {
                        d.classAdd(this.wrapper, "modal-animate-" + (this._position || 'default') + " animate-in");
                        // this.wrapper.classList.add('modal-animate-full');
                        // switch (this._position) {
                        //     //设置浮动框出现动画
                        //     case 'full' :
                        //         this.wrapper.classList.add('modal-animate-full');
                        //         break;
                        //     case 'up':
                        //         this.wrapper.classList.add('modal-animate-up');
                        //         break;
                        //     case 'right':
                        //         this.wrapper.classList.add('modal-animate-right');
                        //         break;
                        //     case 'down':
                        //         this.wrapper.classList.add('modal-animate-down');
                        //         break;
                        //     case 'left':
                        //         this.wrapper.classList.add('modal-animate-left');
                        //         break;
                        //     case 'center':
                        //         this.wrapper.classList.add('modal-animate-center');
                        //         break;
                        //     default:
                        //         this.wrapper.classList.add('modal-animate-default');
                        //         break;
                        // }
                        // this.wrapper.classList.add('animate-in');
                    }
                    //设置遮罩层出现动画
                    if (this._isBackground) {
                        this.modalScreen.style.display = 'block';
                        this._container.classList.add('overflow-hidden');
                        this.modalScreen.classList.add('lock-screen');
                        this.modalScreen.classList.remove('lock-active-out');
                        this.modalScreen.classList.add('lock-active-in');
                    }
                }
                else {
                    this.wrapper.blur();
                    if (this._onClose) {
                        this._onClose();
                    }
                    //若_isOnceDestroy为真，即创建后立即销毁，则直接调用destroy()后返回；
                    if (this._isOnceDestroy) {
                        this.destroy();
                        return;
                    }
                    if (this.wrapper) {
                        this.wrapper.style.display = 'none';
                        if (this._isAnimate) {
                            this.wrapper.classList.remove('animate-in');
                        }
                        this.wrapper.style['display'] = 'none';
                    }
                    if (this._isBackground) {
                        this.modalScreen && (this.modalScreen.classList.remove('lock-active-in'),
                            this.modalScreen.classList.add('lock-active-out'),
                            //     d.once(this.modalScreen, 'animationend', () => {
                            //         this.modalScreen.style.display = 'none';
                            //         this.modalScreen.classList.remove('lock-screen');
                            this.modalScreen.style.display = 'none',
                            this.modalScreen.classList.remove('lock-screen'));
                        this._container && this._container.classList.remove('overflow-hidden');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "isDrag", {
            get: function () {
                return this._isDrag;
            },
            set: function (isDrag) {
                var elWidth = parseInt(getComputedStyle(this.wrapper)['width']), elHeight = parseInt(getComputedStyle(this.wrapper)['height']), minWidth = isNaN(elWidth) || elWidth > 160 ? 160 : elWidth, minHeight = isNaN(elHeight) || elHeight > 140 ? 140 : elHeight;
                //默认false
                this._isDrag = tools.isEmpty(isDrag) ? false : isDrag;
                if (this._isDrag) {
                    //关闭头部拖拽
                    this._modalHeader && (this._modalHeader.isDrag = false);
                    var pos = '';
                    switch (this._position) {
                        case 'left':
                            pos = 'right';
                            // this.wrapper.style.position = 'absolute';
                            // this.container.style.position = 'relative';
                            break;
                        case 'right':
                            pos = 'left';
                            // this.wrapper.style.position = 'absolute';
                            // this.container.style.position = 'relative';
                            break;
                        case 'up':
                            pos = 'bottom';
                            // this.wrapper.style.position = 'absolute';
                            // this.container.style.position = 'relative';
                            break;
                        case 'down':
                            pos = 'top';
                    }
                    this.wrapper.style.position = 'absolute';
                    this.container.style.position = 'relative';
                    this.drag = new drag_1.Drag({
                        dom: this.wrapper,
                        head: this.wrapper,
                        scale: {
                            position: pos,
                            minWidth: minWidth,
                            minHeight: minHeight
                        },
                        container: this.container
                    });
                }
                else if (this.drag) {
                    this.drag.scaleEventOff();
                    this.drag = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "isBackground", {
            get: function () {
                return this._isBackground;
            },
            set: function (isBackground) {
                var _this = this;
                this._isBackground = tools.isEmpty(isBackground) ? true : isBackground;
                //初始化遮罩层
                if (!this.modalScreen && this._isBackground) {
                    this.modalScreen = h("div", { className: "modal-screen lock-screen" });
                    this._container.appendChild(this.modalScreen);
                }
                else {
                    d.remove(this.modalScreen);
                    this.modalScreen = null;
                }
                //为遮罩层设置点击后的关闭事件，如果没有遮罩层，则不关闭
                if (this._isBackground) {
                    d.on(this.modalScreen, 'click', function () {
                        _this.isShow = false;
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "top", {
            get: function () {
                return this._top;
            },
            set: function (top) {
                if (tools.isEmpty(top)) {
                    return;
                }
                this.wrapper.style.top = top + 'px';
                this._top = top;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (size) {
                this._size = tools.isEmpty(size) ? '' : size;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "opacity", {
            get: function () {
                return this._opacity;
            },
            set: function (opacity) {
                this._opacity = tools.isEmpty(opacity) ? 100 : opacity;
                this.wrapper.style.opacity = this._opacity / 100 + '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "onOk", {
            get: function () {
                return this._onOk;
            },
            set: function (callback) {
                if (!this._modalFooter || !this._modalFooter.rightPanel || !(this._modalFooter.rightPanel instanceof InputBox_1.InputBox) || !this._modalFooter.rightPanel.getItem('okBtn')) {
                    return;
                }
                if (callback) {
                    var okBtn = this._modalFooter.rightPanel.getItem('okBtn');
                    okBtn.onClick = callback;
                }
                // else if (this._modalFooter.rightBtns.okBtn.onClick) {
                //     return;
                // } else {
                //     this._modalFooter.rightBtns.okBtn.onClick = () => {
                //         this.isShow = false;
                //     };
                // }
                this._onOk = callback;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "onCancel", {
            get: function () {
                return this._onCancel;
            },
            set: function (callback) {
                var _this = this;
                if (!this._modalFooter || !this._modalFooter.rightPanel || !(this._modalFooter.rightPanel instanceof InputBox_1.InputBox) || !this._modalFooter.rightPanel.getItem('cancelBtn')) {
                    return;
                }
                var cancelBtn = this._modalFooter.rightPanel.getItem('cancelBtn');
                if (callback) {
                    cancelBtn.onClick = callback;
                }
                else {
                    cancelBtn.onClick = function () {
                        _this.isShow = false;
                    };
                }
                this._onCancel = callback;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "onClose", {
            get: function () {
                return this._onClose;
            },
            set: function (callback) {
                this._onClose = callback;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Modal.prototype, "onLarge", {
            get: function () {
                return this._onLarge;
            },
            set: function (callback) {
                var _this = this;
                var modalEnlarge = d.query(".modal-enlarge", this.wrapper);
                if (modalEnlarge) {
                    d.on(modalEnlarge, 'click', function () {
                        var className = 'full-screen';
                        if (_this.fullPosition) {
                            className = 'full-screen-fixed';
                        }
                        d.classToggle(_this.wrapper, className);
                        if (callback) {
                            callback();
                        }
                    });
                }
                this._onLarge = callback;
            },
            enumerable: true,
            configurable: true
        });
        /**
         *静态方式创建alert框，使用后立即销毁
         */
        Modal.alert = function (msg, title, onClick) {
            if (msg === void 0) { msg = ''; }
            //将msg转为json字符串
            if (msg instanceof Object || Array.isArray(msg)) {
                msg = JSON.stringify(msg);
                //去掉json字符串头尾的引号
                if (msg[0] && msg[0] === '"' && msg[msg.length - 1] && msg[msg.length - 1] === '"') {
                    msg = msg.slice(1, msg.length - 1);
                }
            }
            // msg = tools.isEmpty(msg) ? '空' : msg;
            var inputBox = new InputBox_1.InputBox({}), okBtn = new Button_1.Button({ content: '确定', type: 'default', key: 'okBtn' });
            if (onClick) {
                okBtn.onClick = function () { return onClick(); };
            }
            inputBox.addItem(okBtn);
            var m = new Modal({
                isOnceDestroy: true,
                header: !title ? '提示' : tools.str.htmlEncode(title),
                width: '270px',
                position: 'center',
                className: 'modal-prompt',
                body: document.createTextNode(msg),
                isMb: false,
                footer: {
                    rightPanel: inputBox
                }
            });
            m.modalScreen.style.zIndex = '1001';
            m.onOk = function () {
                m.isShow = false;
                onClick && onClick();
            };
            return m;
        };
        /**
         *静态方式创建confirm框，使用后立即销毁
         */
        Modal.confirm = function (confirm) {
            var leftContent, rightContent, msg;
            if (!confirm || !confirm.msg || tools.isEmpty(confirm.msg)) {
                msg = '成功';
            }
            else {
                //将msg转为json字符串
                if (confirm.msg instanceof Object || Array.isArray(confirm.msg)) {
                    msg = JSON.stringify(confirm.msg);
                    //去掉json字符串头尾的引号
                    if (msg[0] && msg[0] === '"' && msg[msg.length - 1] && msg[msg.length - 1] === '"') {
                        msg = msg.slice(1, msg.length - 1);
                    }
                }
                else {
                    msg = confirm.msg;
                }
            }
            if (!confirm || !confirm.btns) {
                leftContent = '取消';
                rightContent = '确定';
            }
            else {
                leftContent = tools.isEmpty(confirm.btns[0]) ? '取消' : confirm.btns[0];
                rightContent = tools.isEmpty(confirm.btns[1]) ? '确定' : confirm.btns[1];
            }
            var inputBox = new InputBox_1.InputBox();
            inputBox.addItem(new Button_1.Button({
                content: leftContent,
                onClick: function (index) {
                    if (confirm && confirm.callback && typeof confirm.callback === 'function') {
                        confirm.callback(false);
                    }
                    m.isShow = false;
                }
            }));
            inputBox.addItem(new Button_1.Button({
                content: rightContent,
                onClick: function (index) {
                    if (confirm && confirm.callback && typeof confirm.callback === 'function') {
                        confirm.callback(true);
                    }
                    m.isShow = false;
                }
            }));
            var m = new Modal({
                isOnceDestroy: true,
                isMb: false,
                width: '270px',
                position: 'center',
                header: (!confirm || !confirm.title) ? '提示' : tools.str.htmlEncode(confirm.title),
                className: 'modal-prompt',
                body: document.createTextNode(msg),
                footer: {
                    rightPanel: inputBox
                }
            });
            m.modalScreen.style.zIndex = '1001';
        };
        //记录上次创建的toast，在下一次构造新toast销毁之...(解决toast延迟销毁3s，下一次构造时未能及时销毁的问题)
        // private static toastModal :Modal;
        /*
         *静态方式创建toast框，使用后立即销毁
         * */
        Modal.toast = function (msg) {
            //将msg转为json字符串
            if (msg instanceof Object || Array.isArray(msg)) {
                msg = JSON.stringify(msg);
                //去掉json字符串头尾的引号
                if (msg[0] && msg[0] === '"' && msg[msg.length - 1] && msg[msg.length - 1] === '"') {
                    msg = msg.slice(1, msg.length - 1);
                }
            }
            msg = tools.isEmpty(msg) ? '成功' : msg;
            // if(Modal.toastModal) {
            //     Modal.toastModal.destroy();
            // }
            var m = new Modal({
                isMb: false,
                isBackground: false,
                body: h("div", { style: "padding: 4px 15px;" }, msg),
                className: 'modal-toast'
            });
            // Modal.toastModal = m;
            //非移动端的toast从顶部往下掉落，移动端的toast出现于底部且有最大高度
            if (tools.isMb) {
                d.classAdd(m.wrapper, 'toast-mobile');
            }
            else {
                d.classRemove(m.wrapper, 'modal-animate-default');
                d.classAdd(m.wrapper, 'from-top');
            }
            // 3秒后销毁
            setTimeout(function () {
                m.destroy();
            }, 3000);
        };
        /**
         * 销毁组件
         */
        Modal.prototype.destroy = function (cb) {
            var _this = this;
            // if (this._isAnimate) {
            //     this.wrapper.classList.remove('animate-in');
            // }
            this._container && this._container.classList.remove('overflow-hidden');
            if (this._isBackground && this.modalScreen) {
                this.modalScreen.classList.remove('lock-active-in');
                this.modalScreen.classList.add('lock-active-out');
                d.once(this.modalScreen, 'animationend', function () {
                    _this.modalScreen.classList.remove('lock-screen');
                });
                d.remove(this.modalScreen);
                this.modalScreen = null;
            }
            // this.remove();
            if (typeof cb === 'function') {
                cb();
            }
            _super.prototype.destroy.call(this);
            allModalArr = allModalArr.filter(function (km) { return km !== _this; });
            var last = allModalArr[allModalArr.length - 1];
            last && last.wrapper.focus();
        };
        return Modal;
    }(Component));
    exports.Modal = Modal;
});

define("ModalFooter", ["require", "exports", "InputBox", "Button"], function (require, exports, InputBox_1, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="ModalFooter"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    /**
     * 模态框尾部
     */
    var ModalFooter = /** @class */ (function (_super) {
        __extends(ModalFooter, _super);
        function ModalFooter(modalFooter) {
            var _this = _super.call(this, modalFooter) || this;
            _this.modalFooter = modalFooter;
            if (tools.isEmpty(modalFooter))
                modalFooter = {};
            _this.init(modalFooter);
            return _this;
        }
        ModalFooter.prototype.wrapperInit = function () {
            return h("div", { className: "modal-footer" });
        };
        ModalFooter.prototype.init = function (modalFooter) {
            var leftInputBox = this.createPanel(modalFooter && modalFooter.leftPanel), rightInputBox = this.createPanel(modalFooter && modalFooter.rightPanel);
            this.leftPanel = leftInputBox ? leftInputBox : void 0;
            this.rightPanel = rightInputBox ? rightInputBox : void 0;
        };
        ModalFooter.prototype.createPanel = function (panel) {
            var newPanel;
            if (Array.isArray(panel)) {
                newPanel = new InputBox_1.InputBox({});
                panel.forEach(function (button) {
                    newPanel.addItem(new Button_1.Button(button));
                });
            }
            else {
                newPanel = panel;
            }
            return newPanel;
        };
        Object.defineProperty(ModalFooter.prototype, "leftPanel", {
            get: function () {
                return this._leftPanel;
            },
            set: function (leftPanel) {
                if (tools.isEmpty(leftPanel)) {
                    return;
                }
                var leftComsWrapper = d.query('.left-plane', this.wrapper);
                if (!leftComsWrapper) {
                    leftComsWrapper = h("div", { className: "left-plane", style: "display: inline-block;" });
                    this.wrapper.appendChild(leftComsWrapper);
                    console.log(this.wrapper);
                }
                else {
                    d.remove(leftComsWrapper);
                    leftComsWrapper = h("div", { className: "left-plane", style: "display: inline-block;" });
                    this.wrapper.appendChild(leftComsWrapper);
                }
                if (leftPanel instanceof InputBox_1.InputBox) {
                    leftPanel.container = leftComsWrapper;
                    leftPanel.compactWidth = 8;
                }
                else {
                    leftComsWrapper.appendChild(leftPanel);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalFooter.prototype, "rightPanel", {
            get: function () {
                return this._rightPanel;
            },
            set: function (rightPanel) {
                var rightPanelWrapper = d.query('.right-plane', this.wrapper);
                if (!rightPanelWrapper) {
                    rightPanelWrapper = h("div", { className: "right-plane", style: "display: inline-block;float: right;" });
                    this.wrapper.appendChild(rightPanelWrapper);
                }
                else {
                    d.remove(rightPanelWrapper);
                    rightPanelWrapper = h("div", { className: "right-plane", style: "display: inline-block;float: right;" });
                    this.wrapper.appendChild(rightPanelWrapper);
                }
                if (tools.isEmpty(rightPanel)) {
                    rightPanel = new InputBox_1.InputBox({
                        compactWidth: 8
                    });
                    var cancelBtn = new Button_1.Button({ content: '取消', type: 'default', key: 'cancelBtn' }), okBtn = new Button_1.Button({ content: '确认', type: 'primary', key: 'okBtn' });
                    rightPanel.addItem(cancelBtn);
                    rightPanel.addItem(okBtn);
                    rightPanel.container = rightPanelWrapper;
                }
                else if (rightPanel instanceof InputBox_1.InputBox) {
                    rightPanel.container = rightPanelWrapper;
                    rightPanel.compactWidth = 8;
                }
                else {
                    rightPanelWrapper.appendChild(rightPanel);
                }
                this._rightPanel = rightPanel;
            },
            enumerable: true,
            configurable: true
        });
        return ModalFooter;
    }(Component));
    exports.ModalFooter = ModalFooter;
});

define("ModalHeader", ["require", "exports", "Drag", "InputBox"], function (require, exports, drag_1, InputBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="ModalHeader"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    /**
     * 模态框头部
     */
    var ModalHeader = /** @class */ (function (_super) {
        __extends(ModalHeader, _super);
        /**
         * 头部颜色 ----
         * 类型：string
         * 默认值：蓝色背景 + 白色字体
         * 除指定白色时字体显示为黑色外，指定其他颜色字体都为白色
         */
        // private _color?: string;
        // set color(color: string) {
        //     let modalTitle = d.query('.modal-title', this.wrapper),
        //         modalClose = (<HTMLElement> this.wrapper.querySelector('.close')),
        //         modalEnlarge = (<HTMLElement> this.wrapper.querySelector('.modal-enlarge'));
        //
        //     color = tools.isEmpty(color) ? 'white' : color;
        //
        //     if (color === 'white' || color === '#fff' || color === '#ffffff' || color === 'rgb(255, 255, 255)') {
        //         this.wrapper.style.backgroundColor = '#fff';
        //         if (modalClose) {
        //             modalClose.style.color = '#000';
        //         }
        //         if (modalTitle) {
        //             modalTitle.style.color = '#000';
        //         }
        //         if (modalEnlarge) {
        //             modalEnlarge.style.color = '#000';
        //         }
        //     } else {
        //         this.wrapper.style.backgroundColor = color;
        //         modalTitle.style.color = '#fff';
        //         if (modalClose) {
        //             modalClose.style.color = '#fff';
        //             modalClose.style.opacity = '1';
        //         }
        //         if (modalEnlarge) {
        //             modalEnlarge.style.color = '#fff';
        //             modalEnlarge.style.opacity = '1';
        //         }
        //     }
        //     this._color = color;
        // }
        //
        // get color() {
        //     return this._color;
        // }
        /**
         * 标题图标
         * 类型：string
         * 默认值：空
        //  */
        // private _icon?: string;
        // set icon(icon: string) {
        //     this._icon = tools.isEmpty(icon) ? '' : icon;
        // }
        //
        // get icon() {
        //     return this._icon;
        // }
        function ModalHeader(modalHeader) {
            var _this = _super.call(this, modalHeader) || this;
            _this.modalHeader = modalHeader;
            if (tools.isEmpty(modalHeader)) {
                modalHeader = {};
            }
            var defaultPara = {
                title: '',
                color: '',
                isClose: true,
                isDrag: true,
                isFullScreen: false,
            };
            _this.init(tools.obj.merge(defaultPara, modalHeader));
            return _this;
        }
        ModalHeader.prototype.wrapperInit = function () {
            return h("div", { className: "modal-header" });
        };
        ModalHeader.prototype.init = function (modalHeader) {
            // if(this.wrapper){
            //     d.remove(this.wrapper);
            // }
            // this.wrapper = d.create(`<div class="modal-header"></div>`);
            // d.append(modalHeader.container, this.wrapper);
            this.drag = null;
            this._dragEl = modalHeader.dragEl;
            // this.container = modalHeader.container;
            this.title = modalHeader.title;
            this.isDrag = modalHeader.isDrag;
            this.isClose = modalHeader.isClose; //增加...
            this.isFullScreen = modalHeader.isFullScreen; //增加
            this.rightPanel = modalHeader.rightPanel;
            // this.color = modalHeader.color;
            // this.icon = modalHeader.icon;
        };
        Object.defineProperty(ModalHeader.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                this._title = tools.isEmpty(title) ? '提示' : tools.str.toEmpty(title);
                var modalTitle = d.query('.modal-title', this.wrapper);
                if (!modalTitle) {
                    modalTitle = h("h1", { className: "modal-title" });
                    this.wrapper.appendChild(modalTitle);
                }
                modalTitle.innerHTML = this._title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalHeader.prototype, "isDrag", {
            get: function () {
                return this._isDrag;
            },
            set: function (isDrag) {
                //移动端不支持拖拽和拖拉
                if (tools.isMb) {
                    return;
                }
                this._isDrag = tools.isEmpty(isDrag) ? true : isDrag;
                if (this._isDrag) {
                    this.drag = new drag_1.Drag({ dom: this._dragEl, container: this._dragEl.parentElement, head: this.wrapper });
                }
                if (this.drag && !this._isDrag) {
                    this.drag.pullEventOff();
                    this.drag = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalHeader.prototype, "modalCloseEl", {
            get: function () {
                return this._modalCloseEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalHeader.prototype, "isClose", {
            get: function () {
                return this._isClose;
            },
            set: function (isClose) {
                this._isClose = isClose;
                this._modalCloseEl = d.query('.close', this.wrapper);
                if (!this._modalCloseEl && this._isClose) {
                    this._modalCloseEl = h("span", { className: "close" }, "\u00D7");
                    this.wrapper.appendChild(this._modalCloseEl);
                }
                else {
                    d.remove(this._modalCloseEl);
                    this._modalCloseEl = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalHeader.prototype, "rightPanel", {
            get: function () {
                return this._rightPanel;
            },
            set: function (rightPanel) {
                if (tools.isEmpty(rightPanel)) {
                    return;
                }
                var rightPanelWrapper = d.query('.header-btn-right', this.wrapper);
                if (!rightPanelWrapper) {
                    rightPanelWrapper = h("div", { className: "header-btn-right", style: "display: inline-block;float: right;" });
                    this.wrapper.appendChild(rightPanelWrapper);
                }
                else {
                    d.remove(rightPanelWrapper);
                    rightPanelWrapper = h("div", { className: "header-btn-right", style: "display: inline-block;float: right;" });
                    this.wrapper.appendChild(rightPanelWrapper);
                }
                if (rightPanel instanceof InputBox_1.InputBox) {
                    rightPanel.container = rightPanelWrapper;
                    rightPanel.compactWidth = 8;
                }
                else {
                    rightPanelWrapper.appendChild(rightPanel);
                }
                this._rightPanel = rightPanel;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ModalHeader.prototype, "isFullScreen", {
            get: function () {
                return this._isFullScreen;
            },
            set: function (isFullScreen) {
                // 全屏时关闭拖拽
                if (this.drag && isFullScreen) {
                    this.drag.pullEventOff();
                    this.drag = null;
                }
                this._isFullScreen = tools.isEmpty(isFullScreen) ? false : isFullScreen;
                var modalEnlarge = d.query('.modal-enlarge', this.wrapper);
                if (!modalEnlarge && this._isFullScreen) {
                    var modalEnlarge_1 = h("span", { "data-fullscreen": "enlarge", className: "iconfont icon-maximize modal-enlarge" });
                    this.wrapper.appendChild(modalEnlarge_1);
                }
                else {
                    d.remove(modalEnlarge);
                    modalEnlarge = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        return ModalHeader;
    }(Component));
    exports.ModalHeader = ModalHeader;
});

define("Notify", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var Notify = /** @class */ (function () {
        function Notify(para) {
            this.para = para;
            // super(para);
            var defaultPara = {
                title: "标题",
                container: document.body,
                // link : '#',
                position: 'bottomRight',
                content: '内容',
                duration: 5000,
                icon: '',
                isNoHide: false,
                background: 'white'
            };
            para = Object.assign(defaultPara, para);
            this.init(para);
        }
        Notify.prototype.init = function (para) {
            var _this = this;
            var mainCon = d.query('.notify', this.para.container);
            if (mainCon) {
                this.mainContainter = mainCon;
            }
            else {
                this.mainContainter = h("div", { className: "notify" });
                para.container.appendChild(this.mainContainter);
            }
            this._wrapper = h("a", { className: "notifyItem" });
            this.initClose();
            this.icon = para.icon;
            this.title = para.title;
            this.content = para.content;
            this.position = para.position;
            this.isNoHide = para.isNoHide;
            this.duration = para.duration;
            this.background = para.background;
            // this.link = para.link;
            this.onClick = para.onClick;
            this.mainContainter.appendChild(this._wrapper);
            setTimeout(function () {
                _this._wrapper.style.opacity = '1';
            }, 50);
        };
        Object.defineProperty(Notify.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                if (this._title) {
                    var titleSpan = d.query('span', this._wrapper);
                    titleSpan.innerHTML = title;
                }
                else {
                    this._wrapper.appendChild(h("span", { className: "title" }, title));
                }
                this._title = title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                this._position = position;
                if (position === 'topLeft') {
                    this.mainContainter.style.top = '20px';
                    this.mainContainter.style.left = '40px';
                }
                else if (position === 'topRight') {
                    this.mainContainter.style.top = '20px';
                    this.mainContainter.style.right = '40px';
                }
                else if (position === 'bottomLeft') {
                    this.mainContainter.style.bottom = '20px';
                    this.mainContainter.style.left = '40px';
                }
                else {
                    this.mainContainter.style.bottom = '20px';
                    this.mainContainter.style.right = '40px';
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (this._content) {
                    var contentP = d.query('p', this._wrapper);
                    contentP.innerHTML = content;
                }
                else {
                    this._wrapper.appendChild(h("p", { className: "content" }, content));
                }
                this._content = content;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "isNoHide", {
            get: function () {
                return this._isNoHide;
            },
            set: function (isNoHide) {
                this._isNoHide = isNoHide;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "duration", {
            get: function () {
                return this._duration;
            },
            set: function (duration) {
                var _this = this;
                this._duration = duration;
                setTimeout(function () {
                    if (_this._wrapper && !_this.isNoHide) {
                        _this._wrapper.style.opacity = '0';
                        var par_1 = _this._wrapper.parentElement;
                        setTimeout(function () {
                            _this._wrapper && _this._wrapper.remove();
                            if (par_1.children.length === 0) {
                                par_1.remove();
                            }
                        }, 2000);
                    }
                }, duration);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (icon) {
                if (this._icon) {
                    var myIcon = d.query('.myIcon', this._wrapper);
                    myIcon.classList.remove('icon-' + this._icon);
                    myIcon.classList.add('icon-' + icon);
                }
                else {
                    if (icon !== "") {
                        this._wrapper.appendChild(h("i", { className: "iconfont icon-" + icon + " myIcon" }));
                        this._wrapper.style.paddingLeft = "50px";
                    }
                }
                this._icon = icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "background", {
            get: function () {
                return this._background;
            },
            set: function (background) {
                this._background = background;
                this._wrapper.style.background = background;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Notify.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (onClick) {
                if (this._onClick) {
                    d.off(this._wrapper, 'click', this._onClick);
                }
                if (onClick) {
                    d.on(this._wrapper, 'click', onClick);
                    this._onClick = onClick;
                }
            },
            enumerable: true,
            configurable: true
        });
        Notify.prototype.initClose = function () {
            var _this = this;
            var i = h("i", { className: "iconfont icon-close close" });
            this._wrapper.appendChild(i);
            d.on(i, 'click', function (e) {
                e.stopPropagation();
                e.preventDefault();
                var par = _this._wrapper.parentElement;
                d.remove(_this._wrapper);
                _this._wrapper = null;
                if (par.children.length === 0) {
                    par.remove();
                }
            });
        };
        return Notify;
    }());
    exports.Notify = Notify;
});

define("Datetime", ["require", "exports", "TextInput"], function (require, exports, text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Datetime"/>
    var tools = G.tools;
    var Datetime = /** @class */ (function (_super) {
        __extends(Datetime, _super);
        function Datetime(p) {
            var _this = this;
            var icons = p.isClean ? ['iconfont icon-calendar', p.cleanIcon] : ['iconfont icon-calendar'];
            var timePara = tools.obj.merge(p, {
                icons: icons,
                iconHandle: function (index) {
                    if (index === 0) {
                        _this.com && _this.com.toggle();
                    }
                    else if (index === 1) {
                        _this.input.value = '';
                    }
                },
                placeholder: p.placeholder || '请选择有效时间'
            });
            _this = _super.call(this, timePara) || this;
            _this.para = timePara;
            require(['flatpickr'], function () {
                _this.initDatetime();
            });
            return _this;
        }
        Datetime.prototype.format = function (str) {
            if (!this.com) {
                return;
            }
            var conf = Datetime.format2Conf(str);
            for (var option in conf) {
                this.com.set(option, conf[option]);
            }
        };
        Datetime.prototype.initDatetime = function () {
            // this.iconGroup.firstElementChild.setAttribute('data-toggle', '');
            this.input.dataset.input = '';
            // this.para.format.replace()
            /*判断日期类型*/
            // let type = getDateTypeByFormat(this.para.format),
            //      hasTime = false,
            //      hasData = false;
            // if(type === 'datetime'||type === 'time') hasTime = true;
            // if(type === 'time') hasData = true;
            var mode = this.para.isRange === true ? 'range' : 'single';
            this.com = flatpickr(this.wrapper, Object.assign(Datetime.format2Conf(this.para.format), {
                wrap: true,
                time_24hr: true,
                locale: Datetime.getLocal(),
                clickOpens: false,
                defaultHour: this.para.defaultHour ? this.para.defaultHour : 0,
                defaultMinute: this.para.defaultMinute ? this.para.defaultMinute : 0,
                defaultSeconds: this.para.defaultSeconds ? this.para.defaultSeconds : 0,
                mode: mode,
                onClose: this.para.onClose,
                maxDate: this.para.maxDate,
                minDate: this.para.minDate
            }));
            this.set(this._value);
        };
        Datetime.format2Conf = function (format) {
            var type = getDateTypeByFormat(format);
            function displayFormatGet(format) {
                return format.replace(/y+/, 'Y')
                    .replace(/m+/, 'i')
                    .replace(/M+/, 'm')
                    .replace(/d+/, 'd')
                    .replace(/H+/, 'H')
                    .replace(/s+/, 'S');
            }
            var enableTime = type === 'datetime' || type === 'time';
            return {
                dateFormat: format ? displayFormatGet(format) : null,
                enableTime: enableTime,
                enableSeconds: enableTime,
                noCalendar: type === 'time',
            };
        };
        Datetime.getLocal = function () {
            return {
                weekdays: {
                    shorthand: ["周日", "周一", "周二", "周三", "周四", "周五", "周六"],
                    longhand: ["星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六"]
                },
                months: {
                    shorthand: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"],
                    longhand: ["一月", "二月", "三月", "四月", "五月", "六月", "七月", "八月", "九月", "十月", "十一月", "十二月"]
                },
                rangeSeparator: " 至 ",
                weekAbbreviation: "周",
                scrollTitle: "滚动切换",
                toggleTitle: "点击切换 12/24 小时时制"
            };
        };
        Datetime.prototype.set = function (str) {
            if (str) {
                this.com && this.com.setDate(str);
                this._value = str;
            }
            typeof this.onSet === 'function' && this.onSet(str);
        };
        Datetime.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.com && this.com.destroy();
            this.com = null;
        };
        return Datetime;
    }(text_1.TextInput));
    exports.Datetime = Datetime;
    /**
     * 通过 displayFormat 得出日期选择控件的类型
     * @param displayFormat
     * @return {string} - 'date', 'time', 'datetime'
     */
    function getDateTypeByFormat(displayFormat) {
        var i, dfLen, hasDate = '', hasTime = '';
        if (!displayFormat) {
            return 'datetime';
        }
        // 判断pick控件的显示类型
        for (i = 0, dfLen = displayFormat.length; i < dfLen; i++) {
            // 如果包含Y M d 则说明需要日期
            if (hasDate === '' && ['y', 'M', 'd'].indexOf(displayFormat[i]) !== -1) {
                hasDate = 'date';
            }
            // 如果包含H m s则说明需要时间
            if (hasTime === '' && ['H', 'm', 's'].indexOf(displayFormat[i]) !== -1) {
                hasTime = 'time';
            }
            //若日期和时间都已包含，则不需要再判断
            if (hasDate !== '' && hasTime !== '') {
                break;
            }
        }
        return hasDate + hasTime;
    }
    exports.getDateTypeByFormat = getDateTypeByFormat;
});

define("DatetimeMb", ["require", "exports", "TextInput", "Datetime", "Picker"], function (require, exports, text_1, datetime_1, picker_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var DatetimeMb = /** @class */ (function (_super) {
        __extends(DatetimeMb, _super);
        function DatetimeMb(p) {
            var _this = this;
            var timePara = Object.assign({}, p, {
                icons: ['iconfont icon-calendar'],
                iconHandle: function () {
                    _this.initPicker();
                    _this.setSelectedValue(_this.input.value);
                },
            });
            _this = _super.call(this, timePara) || this;
            _this._format = p.format;
            return _this;
        }
        DatetimeMb.initDatePicker = function () {
            var pickers = [], yearPicker, mouthPicker, dayPicker;
            var changeDayData = function (mouth, year) {
                dayPicker && (dayPicker.optionData = DatetimeMb.datetimeData.getDayData(mouth, year));
            };
            yearPicker = h(picker_1.Picker, { name: "year", title: "\u5E74", isMulti: false, optionData: DatetimeMb.datetimeData.getYearData() });
            mouthPicker = h(picker_1.Picker, { name: "mouth", title: "\u6708", isMulti: false, optionData: DatetimeMb.datetimeData.getMouthData() });
            dayPicker = h(picker_1.Picker, { name: "day", title: "\u65E5", isMulti: false, optionData: DatetimeMb.datetimeData.getDayData(mouthPicker.value.value, yearPicker.value.value) });
            yearPicker.onChange = function () {
                return changeDayData(mouthPicker.value.value, yearPicker.value.value);
            };
            mouthPicker.onChange = function () {
                return changeDayData(mouthPicker.value.value, yearPicker.value.value);
            };
            pickers.push(yearPicker);
            pickers.push(mouthPicker);
            pickers.push(dayPicker);
            return pickers;
        };
        DatetimeMb.initTimePicker = function () {
            var pickers = [];
            pickers.push(h(picker_1.Picker, { name: "hour", title: "\u65F6", isMulti: false, optionData: DatetimeMb.datetimeData.getHourData() }));
            pickers.push(h(picker_1.Picker, { name: "minute", title: "\u5206", isMulti: false, optionData: DatetimeMb.datetimeData.getMinuteData() }));
            pickers.push(h(picker_1.Picker, { name: "second", title: "\u79D2", isMulti: false, optionData: DatetimeMb.datetimeData.getSecondData() }));
            return pickers;
        };
        DatetimeMb.prototype.initPicker = function () {
            var _this = this;
            this.input.blur();
            this.type = datetime_1.getDateTypeByFormat(this._format);
            var pickers = [];
            switch (this.type) {
                case 'time':
                    pickers = DatetimeMb.initTimePicker();
                    break;
                case 'date':
                    pickers = DatetimeMb.initDatePicker();
                    break;
                case 'datetime':
                    pickers = DatetimeMb.initDatePicker().concat(DatetimeMb.initTimePicker());
                    break;
            }
            this.pickerList = h(picker_1.PickerList, { className: "data-time-picker", isOnceDestroy: true, isWatchMsg: true, onSet: function (a, values) {
                    var valStr = '';
                    switch (_this.type) {
                        case 'date':
                            valStr = values.year.text + "-" + values.mouth.text + "-" + values.day.text;
                            break;
                        case 'time':
                            valStr = values.hour.text + ":" + values.minute.text + ":" + values.second.text;
                            break;
                        case 'datetime':
                            valStr = values.year.text + "-" + values.mouth.text + "-" + values.day.text + " " + values.hour.text + ":" + values.minute.text + ":" + values.second.text;
                            break;
                    }
                    _this.set(valStr);
                } }, pickers);
        };
        DatetimeMb.prototype.setSelectedValue = function (str) {
            if (this.pickerList) {
                var date = new Date();
                if (tools.isNotEmpty(str)) {
                    if (this.type === 'time') {
                        str = '2018-01-01 ' + str;
                    }
                    if (tools.os.ios) {
                        str = str.replace(/-/g, "/");
                    }
                    date = new Date(str);
                }
                var year = this.pickerList.pickers['year'], mouth = this.pickerList.pickers['mouth'], day = this.pickerList.pickers['day'], hour = this.pickerList.pickers['hour'], minute = this.pickerList.pickers['minute'], second = this.pickerList.pickers['second'];
                year && year.setCurrentByValue(date.getFullYear());
                mouth && mouth.setCurrentByValue(date.getMonth() + 1);
                day && day.setCurrentByValue(date.getDate());
                hour && hour.setCurrentByValue(date.getHours());
                minute && minute.setCurrentByValue(date.getMinutes());
                second && second.setCurrentByValue(date.getSeconds());
            }
        };
        DatetimeMb.prototype.format = function (str) {
            this.pickerList && this.pickerList.destroy();
            this._format = str;
            this.initPicker();
            this.setSelectedValue(this.input.value);
        };
        DatetimeMb.prototype.set = function (str) {
            if (str instanceof Date) {
                _super.prototype.set.call(this, tools.date.format(str, this._format));
            }
            else {
                _super.prototype.set.call(this, str);
            }
            // this.com.setDate(str)
        };
        DatetimeMb.prototype.destroy = function () {
            this.pickerList && this.pickerList.destroy();
            _super.prototype.destroy.call(this);
        };
        DatetimeMb.datetimeData = (function () {
            var two = function (num) {
                return num < 10 ? '0' + num : num + '';
            };
            var getData = function (start, end) {
                var data = [];
                for (var i = start; i < end; i++) {
                    data.push({ text: two(i), value: i });
                }
                return data;
            };
            return {
                getYearData: function (startYear) {
                    if (startYear === void 0) { startYear = 1970; }
                    return getData(startYear, tools.date.today().getFullYear() + 5);
                },
                getMouthData: function () {
                    return getData(1, 13);
                },
                getDayData: function (mouth, year) {
                    var start = 1, end = 30, bigMouth = [1, 3, 5, 7, 8, 10, 12], isLeapYear = (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0; // 是否是闰年
                    if (mouth === 2) {
                        // 2月份
                        end = isLeapYear ? 29 : 28;
                    }
                    else if (bigMouth.indexOf(mouth) > -1) {
                        // 大月
                        end = 31;
                    }
                    return getData(start, end + 1);
                },
                getHourData: function () {
                    return getData(0, 24);
                },
                getMinuteData: function () {
                    return getData(0, 60);
                },
                getSecondData: function () {
                    return getData(0, 60);
                }
            };
        })();
        return DatetimeMb;
    }(text_1.TextInput));
    exports.DatetimeMb = DatetimeMb;
});
// export class DatetimeMb extends TextInput {
//     private com: any;
//     protected para: IDatetimePara;
//     protected type : string;
//
//     constructor(p: IDatetimePara) {
//
//         let timePara: IDatetimePara = tools.obj.merge(p, {
//             icons: ['iconfont icon-calendar'],
//             iconHandle : ()=> {
//                 //设置默认值
//                 if(this.input.value){
//                     this.com.setSelectedValue(this.input.value);
//                 }
//                 else{
//                     this.com.ui.h.picker.setSelectedValue(this.para.defaultHour ? this.para.defaultHour : 0);
//                     this.com.ui.i.picker.setSelectedValue(this.para.defaultMinute ?  this.para.defaultMinute : 0);
//                 }
//                 let valStr = '';
//                 this.com.show( (item : Mui_Date) => {
//                     switch (this.type) {
//                         case 'date' :
//                             valStr = `${item.y.value}-${item.m.value}-${item.d.value}`;
//                             break;
//                         case 'time' :
//                             valStr = `${item.h.value}:${item.i.value}:00`;
//                             break;
//                         case 'datetime' :
//                             valStr = `${item.y.value}-${item.m.value}-${item.d.value} ${item.h.value}:${item.i.value}:00`;
//                             break;
//                     }
//                     this.set(valStr);
//                     // this.com.dispose();
//                 });
//             }
//         });
//
//         super(timePara);
//
//         this.para = timePara;
//
//         this.initDatetime();
//     }
//
//
//     public format(str:string){
//         this.com.dispose();
//         this.para.format = str;
//         this.initDatetime();
//     }
//
//     private initDatetime(){
//         // this.iconGroup.firstElementChild.setAttribute('data-toggle', '');
//         this.input.dataset.input = '';
//         // this.para.format.replace()
//
//         // 判断日期类型
//         this.type = getDateTypeByFormat((this.para.format));
//
//         this.com = new mui.DtPicker({
//             beginYear: 1970,
//             type: this.type
//         });
//
//     }
//
//     public set(str){
//         if(str instanceof Date){
//             super.set(tools.date.format(str, this.para.format))
//         }else{
//             super.set(str);
//         }
//         // this.com.setDate(str)
//     }
// }

/// <amd-module name="BasicCheckBox"/>
define("BasicCheckBox", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var checkBoxEvent = (function () {
        var count = 0;
        function checkEvent(ev) {
            var el = d.closest(ev.target, '.select-box');
            if (el !== null && !el.classList.contains('disabled')) {
                var checkBox = d.data(el);
                var isRadio = checkBox.type === 'radio';
                var checked = checkBox.wrapper.querySelector('input').checked;
                if (checkBox.clickArea === 'all') {
                    ev.stopPropagation();
                    checkBox.checked = isRadio || !checked;
                    tools.isFunction(checkBox.onClick) && checkBox.onClick(checkBox.checked);
                }
                else if (checkBox.clickArea === 'box') {
                    var box = el.querySelector('.check-span');
                    if (d.closest(ev.target, '.check-span') === box) {
                        ev.stopPropagation();
                        checkBox.checked = isRadio || !checked;
                        tools.isFunction(checkBox.onClick) && checkBox.onClick(checkBox.checked);
                    }
                }
            }
        }
        return {
            plus: function () {
                count++;
                if (count === 1) {
                    document.body.addEventListener('click', checkEvent, true);
                    // d.on(document.body, 'click', '.new-select-box',checkEvent);
                }
            },
            minus: function () {
                count--;
                if (count === 0) {
                    document.body.removeEventListener('click', checkEvent, true);
                    // d.off(document.body, 'click', '.new-select-box',checkEvent);
                }
            },
        };
    })();
    var BasicCheckBox = /** @class */ (function (_super) {
        __extends(BasicCheckBox, _super);
        function BasicCheckBox(para) {
            var _this = _super.call(this, para) || this;
            _this._size = 20;
            _this.keyHandle = function (e) {
                var keyCode = e.keyCode || e.which || e.charCode;
                if (tools.isNotEmpty(_this.tabIndexKey)) {
                    if (keyCode === _this.tabIndexKey) {
                        _this.set(!_this.get());
                    }
                }
                else if (keyCode === 13) {
                    _this.set(!_this.get());
                }
            };
            // this.container = para.container;
            _this.custom = para.custom;
            _this._value = para.value;
            _this.size = para.size;
            _this.onSet = para.onSet;
            _this.onClick = para.onClick;
            // if (para.className) {
            //     this._wrapper.classList.add(para.className)
            // }
            _this.clickArea = para.clickArea;
            // this.container.appendChild(this._wrapper);
            d.data(_this.wrapper, _this);
            checkBoxEvent.plus();
            return _this;
        }
        BasicCheckBox.prototype.wrapperInit = function (para) {
            this.guid = tools.getGuid();
            this._name = tools.isEmpty(para.name) ? this.guid : para.name;
            this._type = para.type;
            var wrapper = BasicCheckBox.initCom(this.guid, tools.str.toEmpty(para.text), para.type, this._name);
            this.input = wrapper.querySelector('input');
            this.checkSpan = wrapper.querySelector('.check-span');
            this.text = para.text;
            return wrapper;
        };
        BasicCheckBox.initCom = function (guid, text, type, name) {
            if (type === void 0) { type = 'checkbox'; }
            if (name === void 0) { name = guid; }
            return h("div", { id: guid, title: text, className: type + '-wrapper select-box' },
                h("input", { type: type, name: name }),
                h("span", { className: "check-span label-" + type }),
                text ? h("span", { className: "check-text" }, text) : null);
        };
        Object.defineProperty(BasicCheckBox.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (t) {
                this._text = t;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (value) {
                this._value = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "clickArea", {
            get: function () {
                return this._clickArea;
            },
            set: function (clickArea) {
                this._clickArea = clickArea || 'all';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "type", {
            get: function () {
                return this._type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (name) {
                this.input.name = name;
                this._name = name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "checked", {
            get: function () {
                return this.input.checked;
            },
            set: function (checked) {
                if (this.input.checked !== checked) {
                    this.input.checked = checked;
                    this.input.value = checked ? 'true' : 'false';
                    if (typeof this.onSet === 'function') {
                        this.onSet(checked);
                    }
                    var events = this.eventHandlers[BasicCheckBox.EVT_CHECK_BOX_CHANGE];
                    tools.isNotEmpty(events) && events.forEach(function (handler) {
                        handler && handler(checked);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (size) {
                if (this._size !== size) {
                    if (!tools.isEmpty(size) && typeof size === 'number') {
                        this._size = size;
                        this.checkSpan.style.height = size + 'px';
                        this.checkSpan.style.width = size + 'px';
                        this.checkSpan.style.lineHeight = size + 'px';
                        this.wrapper.style.fontSize = size / 10 * 6 + 'px';
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "custom", {
            get: function () {
                return this._custom;
            },
            set: function (obj) {
                this._custom = obj;
                if (tools.isNotEmpty(obj)) {
                    var el = h("style", null);
                    var style = '';
                    if (tools.isNotEmpty(obj.noCheck)) {
                        style += "\n             #" + this.guid + " input[type=checkbox]:not(:checked)+.check-span:not(.indeterminate):after{\n                  display: inline-block;\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  width: 100%;\n                  height: 100%;\n                  content:\"" + obj.noCheck + "\";\n                  color: #007AFF;\n                  text-align: center;\n                  font-weight: lighter;\n             }\n            ";
                    }
                    if (tools.isNotEmpty(obj.indeterminate)) {
                        style += "\n            #" + this.guid + " input[type=checkbox]+.check-span.indeterminate:after {\n                  position: absolute;\n                  top: 0;\n                  left: 0;\n                  background: transparent;\n                  content:\"" + obj.indeterminate + "\";\n                  width: 100%;\n                  height: 100%;\n                  text-align: center;\n                  font-weight: lighter;\n                  color: #007AFF;\n            }\n            ";
                    }
                    if (tools.isNotEmpty(obj.check)) {
                        style += "\n             #" + this.guid + " input[type=checkbox]:checked+.check-span:after{\n                  content:\"" + obj.check + "\";\n                  text-align: center;\n                  font-weight: lighter;\n             }\n            ";
                    }
                    el.innerHTML = style;
                    this.wrapper.insertBefore(el, this.wrapper.firstChild);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicCheckBox.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (e) {
                this._onClick = e;
            },
            enumerable: true,
            configurable: true
        });
        BasicCheckBox.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            checkBoxEvent.minus();
        };
        BasicCheckBox.prototype.get = function () {
            return this.checked;
        };
        BasicCheckBox.prototype.set = function (flag) {
            if (flag === void 0) { flag = 0; }
            this.checked = !!flag;
            // if (typeof this.onSet === 'function') {
            //     this.onSet(!!flag);
            // }
        };
        BasicCheckBox.EVT_CHECK_BOX_CHANGE = 'EVENT_SELECT_BOX_CHECKED';
        return BasicCheckBox;
    }(basic_1.FormCom));
    exports.BasicCheckBox = BasicCheckBox;
});

define("CheckBox", ["require", "exports", "BasicCheckBox"], function (require, exports, basicCheckBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="CheckBox"/>
    var tools = G.tools;
    var CheckBox = /** @class */ (function (_super) {
        __extends(CheckBox, _super);
        function CheckBox(para) {
            var _this = _super.call(this, Object.assign({}, para, { type: 'checkbox' })) || this;
            _this._checked = false;
            _this._status = 0;
            _this.status = para.status;
            return _this;
        }
        CheckBox.prototype.change = function (status) {
            var _this = this;
            this._checked = status === 1;
            this._status = tools.isEmpty(status) ? 0 : status;
            this.input.value = this._checked ? 'true' : 'false';
            if (status === 2) {
                this.input.checked = false;
                this.checkSpan.classList.add('indeterminate');
            }
            else {
                this.input.checked = !!status;
                this.checkSpan.classList.remove('indeterminate');
            }
            var events = this.eventHandlers[basicCheckBox_1.BasicCheckBox.EVT_CHECK_BOX_CHANGE];
            tools.isNotEmpty(events) && events.forEach(function (handler) {
                handler && handler(_this._checked);
            });
        };
        Object.defineProperty(CheckBox.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (checked) {
                this.change(checked ? 1 : 0);
                if (typeof this.onSet === 'function') {
                    this.onSet(checked);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckBox.prototype, "status", {
            get: function () {
                return this._status;
            },
            set: function (status) {
                if (this._status !== status) {
                    this.change(status);
                }
            },
            enumerable: true,
            configurable: true
        });
        return CheckBox;
    }(basicCheckBox_1.BasicCheckBox));
    exports.CheckBox = CheckBox;
});

/// <amd-module name="NewUploader"/>
define("NewUploader", ["require", "exports", "FormCom", "Modal", "Loading"], function (require, exports, basic_1, Modal_1, loading_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var NewUploader = /** @class */ (function (_super) {
        __extends(NewUploader, _super);
        function NewUploader(para) {
            var _this = _super.call(this, para) || this;
            _this.event = (function () {
                return {
                    on: function () {
                        d.on(_this.wrapper, 'click', function () {
                            _this.input.click();
                        });
                        d.on(_this.input, 'change', function () {
                            if (_this.isMulti && (_this.input.files.length > _this.maxTotal)) {
                                Modal_1.Modal.alert('超过一次性最大上传数量：' + _this.maxTotal);
                                return;
                            }
                            var files = _this.isMulti ? _this.input.files : [_this.input.files[0]];
                            _this.temporaryFile = [];
                            if (files !== null) {
                                for (var i = 0; i < files.length; i++) {
                                    var file = files[i];
                                    _this.setFile(file);
                                }
                                if (_this.isAutoUpload === true) {
                                    _this.upload().then(function (res) {
                                        typeof _this.successHandler === 'function' && _this.successHandler(res);
                                    }).catch(function (error) {
                                        typeof _this.failure === 'function' && _this.failure(error);
                                    });
                                }
                            }
                            _this.input.value = '';
                        });
                    }
                };
            })();
            _this.accept = [];
            _this.isChangeText = tools.isEmpty(para.isChangeText) ? true : para.isChangeText;
            _this.input = d.query('input', _this.wrapper);
            _this.isMulti = _this.input.multiple;
            _this.maxTotal = tools.isEmpty(para.maxTotal) ? 5 : para.maxTotal;
            _this.span = d.query('.uploader-box', _this.wrapper);
            _this.text = para.text || '点击上传';
            _this.url = para.url;
            _this.size = para.fileSingleSizeLimit;
            _this.beforeSendFile = para.beforeSendFile;
            _this.formData = para.formData;
            _this.setAccept(para.accept);
            _this.event.on();
            _this.isAutoUpload = para.isAutoUpload;
            _this.successHandler = para.successHandler;
            _this.failure = para.failure;
            return _this;
        }
        NewUploader.prototype.wrapperInit = function (para) {
            var isMulti = para.isMulti || false;
            return h("div", { className: "uploader-wrapper" },
                h("input", { multiple: isMulti, type: "file" }),
                h("span", { className: "uploader-box" }, para.text || '点击上传'));
        };
        NewUploader.prototype.setFile = function (file) {
            if (file) {
                // if(this.accept.length > 1){
                //     if(this.accept.indexOf(file.type) === -1){
                //         Modal.alert('文件格式错误');
                //         return ;
                //     }
                // }
                if (this.size && (file.size > this.size)) {
                    Modal_1.Modal.alert('文件大小超过' + (this.size / 1024 / 1024).toFixed(2) + 'M');
                    return;
                }
                if (this.isMulti) {
                    if (!Array.isArray(this.files)) {
                        this.files = [];
                    }
                    this.files.push(file);
                    this.temporaryFile.push(file);
                }
                else {
                    this.files = [file];
                    this.temporaryFile = [file];
                }
                this.isChangeText && (this.span.innerText = file.name);
            }
            else {
                if (!this.isMulti) {
                    this.files = [];
                    this.temporaryFile = [];
                }
                this.span.innerText = this.text;
            }
        };
        NewUploader.prototype.upload = function () {
            var _this = this;
            var promises = [], loading = new loading_1.Loading({
                msg: '上传中...',
            });
            loading.show();
            this.temporaryFile.forEach(function (file) {
                promises.push(new Promise(function (resolve, reject) {
                    _this.beforeSendFile(file).then(function (response) {
                        if (!response.ifExist) {
                            _this.innerUpload(file, function (res) {
                                resolve({
                                    data: res,
                                    file: file
                                });
                            }, function () {
                                reject();
                            });
                        }
                        else {
                            resolve({
                                data: response,
                                file: file
                            });
                        }
                    });
                }));
            });
            return new Promise(function (resolve, reject) {
                Promise.all(promises).then(function (res) {
                    resolve(res);
                }).catch(function (e) {
                    reject(e);
                }).finally(function () {
                    loading.hide();
                });
            });
        };
        NewUploader.prototype.innerUpload = function (file, success, error) {
            var _this = this;
            if (tools.isNotEmpty(file) && tools.isNotEmpty(this.url)) {
                var formData = new FormData();
                var data = this.formData ? this.formData() : null;
                if (data) {
                    for (var key in data) {
                        formData.append(key, data[key]);
                    }
                }
                formData.append('file', file, file.name);
                var result_1 = { success: false, uploading: false, progress: 0 };
                var xhr_1 = new XMLHttpRequest();
                xhr_1.open("post", this.url, true);
                xhr_1.addEventListener('error', function () {
                    typeof error === 'function' && error();
                });
                xhr_1.addEventListener('progress', function (evt) {
                    if (evt.lengthComputable) {
                        var percentComplete = Math.round(evt.loaded * 100 / evt.total);
                        result_1.uploading = true;
                        result_1.progress = percentComplete;
                    }
                    else {
                        result_1.uploading = false;
                        result_1.progress = 0;
                    }
                    var events = _this.eventHandlers[NewUploader.EVT_UPLOAD_PROGRESS];
                    tools.isNotEmpty(events) && events.forEach(function (handler) {
                        handler(result_1);
                    });
                });
                xhr_1.addEventListener("abort", function () { return Modal_1.Modal.alert("您取消了本次上传."); });
                xhr_1.addEventListener("load", function (ev) {
                    result_1.uploading = false;
                    result_1.success = true;
                    result_1.progress = 100;
                    var events = _this.eventHandlers[NewUploader.EVT_UPLOAD_PROGRESS];
                    tools.isNotEmpty(events) && events.forEach(function (handler) {
                        handler(result_1);
                    });
                });
                xhr_1.onreadystatechange = function () {
                    if (xhr_1.readyState == 4 && xhr_1.status == 200) {
                        typeof success === 'function' && success(xhr_1.responseText);
                    }
                };
                xhr_1.send(formData);
            }
        };
        NewUploader.prototype.setAccept = function (accept) {
            if (tools.isNotEmpty(accept)) {
                var result_2 = [];
                if (tools.isNotEmpty(accept.extensions)) {
                    var exts = accept.extensions.split(/\s*,\s*/);
                    exts.forEach(function (ext) {
                        result_2.push('.' + ext);
                    });
                }
                else if (tools.isNotEmpty(accept.mimeTypes)) {
                    var mimeTypes_1 = accept.mimeTypes.split(/\s*,\s*/);
                    mimeTypes_1.forEach(function (mimeType) {
                        if (mimeType) {
                            result_2.push(mimeType);
                        }
                    });
                }
                this.accept = result_2;
                this.accept.length > 0 && (this.input.accept = this.accept.join(','));
            }
        };
        Object.defineProperty(NewUploader.prototype, "beforeSendFile", {
            get: function () {
                return this._beforeSendFile;
            },
            set: function (beforeSendFile) {
                this._beforeSendFile = beforeSendFile || (function () { return new Promise(function (resolve) { return resolve(); }); });
            },
            enumerable: true,
            configurable: true
        });
        NewUploader.prototype.delFile = function (flag) {
            if (Array.isArray(this.files)) {
                if (typeof flag === 'number') {
                    this.files.splice(flag, 1);
                }
                else {
                    var index = this.files.indexOf(flag);
                    this.files.splice(index, 1);
                }
            }
        };
        NewUploader.prototype.open = function () {
            this.input.click();
        };
        NewUploader.prototype.get = function () {
            return this.files;
        };
        NewUploader.prototype.set = function (files) {
            this.files = files;
        };
        Object.defineProperty(NewUploader.prototype, "value", {
            get: function () {
                return this.files;
            },
            enumerable: true,
            configurable: true
        });
        NewUploader.EVT_UPLOAD_PROGRESS = '__EVENT_UPLOAD_STATUS_PROGRESS__';
        return NewUploader;
    }(basic_1.FormCom));
    exports.NewUploader = NewUploader;
    var mimeTypes = {
        "dir": "application/x-director",
        "doc": "application/msword",
        "dot": "application/msword",
        "dv": "video/x-dv",
        "gif": "image/gif",
        "htm": "text/html",
        "html": "text/html",
        "htmls": "text/html",
        "ico": "image/x-icon",
        "jpe": "image/jpeg",
        "jpeg": "image/jpeg",
        "jpg": "image/jpeg",
        "mp3": "audio/mpeg",
        "mpa": "audio/mpeg",
        "mpe": "video/mpeg",
        "mpeg": "video/mpeg",
        "mpg": "video/mpeg",
        "mpga": "audio/mpeg",
        "mv": "video/x-sgi-movie",
        "pic": "image/pict",
        "pict": "image/pict",
        "pps": "application/vnd.ms-powerpoint",
        "ppt": "application/vnd.ms-powerpoint",
        "ppz": "application/vnd.ms-powerpoint",
        // "psd": "image/vnd.adobe.photoshop",
        "pptx": "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "swf": "application/x-shockwave-flash",
        "txt": "text/plain",
        "viv": "video/vivo",
        "vivo": "video/vivo",
        "xml": "application/xml",
        "xls": "application/vnd.ms-excel",
    };
});

define("RichText", ["require", "exports", "FormCom", "DropDown"], function (require, exports, basic_1, dropdown_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var RichText = /** @class */ (function (_super) {
        __extends(RichText, _super);
        function RichText(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            var div = d.create('<div class="summernote"></div>');
            _this.para.container.appendChild(div);
            _this.com = $(div);
            require(['summernote'], function () {
                _this.com.summernote({
                    lang: 'zh-CN',
                    height: 300,
                    minHeight: null,
                    maxHeight: null,
                    focus: false,
                    toolbar: [
                        ['style', ['bold', 'italic', 'underline', 'clear']],
                        ['font', ['strikethrough', 'superscript', 'subscript']],
                        ['fontsize', ['fontsize']],
                        ['color', ['color']],
                        ['para', ['ul', 'ol', 'paragraph']],
                        ['height', ['height']]
                    ]
                });
                console.log(_this.para.container);
                _this.set(_this._value);
                _this.initCom(para);
            });
            return _this;
            // this.para.dom.contentEditable = 'true';
        }
        RichText.prototype.initCom = function (para) {
        };
        RichText.prototype.get = function () {
            return this.com.summernote ? this.com.summernote('code') : this._value;
        };
        RichText.prototype.set = function (html) {
            this.com.summernote && this.com.summernote('code', html);
            this._value = html;
        };
        RichText.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.com.summernote('reset');
            this.com.summernote('destroy');
        };
        Object.defineProperty(RichText.prototype, "value", {
            get: function () {
                return this.com.summernote ? this.com.summernote('code') : this._value;
            },
            set: function (html) {
                this.com.summernote && this.com.summernote('code', html);
                this._value = html;
            },
            enumerable: true,
            configurable: true
        });
        RichText.prototype.wrapperInit = function (para) {
            return h("div", { class: "summernote" });
        };
        return RichText;
    }(basic_1.FormCom));
    exports.RichText = RichText;
    var RichText1 = /** @class */ (function (_super) {
        __extends(RichText1, _super);
        function RichText1(para) {
            var _this = _super.call(this, para) || this;
            _this.colorCreate = false;
            _this.methods = (function () {
                var bold = function () {
                    document.execCommand('bold', false, null);
                }, italic = function () {
                    document.execCommand('italic', false, null);
                }, underline = function () {
                    document.execCommand('underline', false, null);
                }, strikeThrough = function () {
                    document.execCommand('strikeThrough', false, null);
                }, undo = function () {
                    document.execCommand('undo', false, null);
                }, redo = function () {
                    document.execCommand('redo', false, null);
                }, fontsize = function (e) {
                    var fontSize = e.target.dataset.role;
                    document.execCommand("fontSize", false, fontSize);
                }, ul = function () {
                    document.execCommand("insertUnorderedList", false, null);
                    console.log(ul);
                }, ol = function () {
                    document.execCommand("insertOrderedList", false, null);
                }, paragraph = function () {
                    //document.execCommand("insertParagraph", false, null);
                    document.execCommand('indent');
                }, justifyLeft = function () {
                    document.execCommand('justifyLeft');
                }, justifyCenter = function () {
                    document.execCommand('justifyCenter');
                }, justifyRight = function () {
                    document.execCommand('justifyRight');
                }, color = function () {
                    event.stopPropagation();
                    var colorDom = d.query('.rfichIcon-group>.app-color>.selectColor', _this.wrapper);
                    colorDom.style.display = "block";
                };
                return {
                    bold: bold,
                    italic: italic,
                    underline: underline,
                    redo: redo,
                    undo: undo,
                    strikeThrough: strikeThrough,
                    fontsize: fontsize,
                    ul: ul,
                    ol: ol,
                    paragraph: paragraph,
                    justifyLeft: justifyLeft,
                    justifyCenter: justifyCenter,
                    justifyRight: justifyRight,
                    color: color
                };
            })();
            _this.methodsTwo = (function () {
                var font = function (res) {
                    document.execCommand("fontname", false, res + "");
                }, fontsize = function (res) {
                    document.execCommand("fontSize", false, parseInt(res) + "px");
                };
                // TrebuchetMS = ()=>{
                //     document.execCommand("fontname", false, "Trebuchet MS");
                // },
                // Regular = () =>{
                //     document.execCommand("fontname", false, "楷体");
                // }
                return { font: font, fontsize: fontsize };
            })();
            _this.bindIconEvent();
            //this.bindIconUl();
            _this.dropDonwInit(para.icon);
            _this.width = para.width;
            _this.height = para.height;
            return _this;
        }
        Object.defineProperty(RichText1.prototype, "value", {
            get: function () {
                return this._value;
            },
            set: function (val) {
            },
            enumerable: true,
            configurable: true
        });
        RichText1.prototype.wrapperInit = function (para) {
            //如果para为空 就全部加载，否则传什么参数 配置什么参数
            var allIcon;
            if (G.tools.isEmpty(para.icon)) {
                allIcon = [
                    ['style', ['bold', 'italic', 'underline', 'strikeThrough']],
                    ['font', ['Arial,Helvetica', 'Georgia', 'Sans-serif', '楷体']],
                    ['fontsize', ['1', '2', '3', '4', '5', '6', '7']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['array', ['justifyLeft', 'justifyCenter', 'justifyRight', 'undo', 'redo']],
                ];
            }
            else {
                allIcon = para.icon;
            }
            return h("div", { className: "richText-content" },
                h("div", { className: "editparent" }, allIcon.map(function (value) {
                    // value = value[1];
                    var Icon = value[1];
                    if (value[0] === 'font' || value[0] === 'fontsize') {
                        return h("div", { class: "richIcon-ul appcommon " + "app-" + value[0], "data-role": value[0] });
                    }
                    else {
                        return h("div", { className: "rfichIcon-group" }, Array.isArray(Icon) ? Icon.map(function (val) {
                            return h("a", { "data-role": val, href: "#", class: "appcommon " + "app-" + val });
                        }) : value);
                    }
                })),
                h("div", { contentEditable: true, className: "edit-div" },
                    h("h1", null, "\u8BF7\u60A8\u7F16\u8F91")));
        };
        //绑定事件
        RichText1.prototype.bindIconEvent = function () {
            var dom = d.queryAll('.rfichIcon-group>a', this.wrapper), icon = this.methods;
            for (var _i = 0, dom_1 = dom; _i < dom_1.length; _i++) {
                var i = dom_1[_i];
                d.on(i, 'click', function (e) {
                    if (icon[this.dataset.role]) {
                        icon[this.dataset.role]();
                    }
                    else {
                        alert('未添加功能');
                    }
                });
            }
            var dragDiv = document.createDocumentFragment(), colorDom = d.query('.rfichIcon-group>.app-color', this.wrapper);
            if (!this.colorCreate) {
                dragDiv = h("div", { className: "selectColor" },
                    h("div", { "data-value": "#E33737", className: "font-color ", style: "background:#E33737" }),
                    h("div", { "data-value": "#e28b41", className: "font-color", style: "background:#e28b41" }),
                    h("div", { "data-value": "#c8a732", className: "font-color ", style: "background:#c8a732" }),
                    h("div", { "data-value": "#209361", className: "font-color ", style: "background:#209361" }),
                    h("div", { "data-value": "#418caf", className: "font-color ", style: "background:#418caf" }),
                    h("div", { "data-value": "#aa8773", className: "font-color ", style: "background:#aa8773" }),
                    h("div", { "data-value": "#999999", className: "font-color ", style: "background:#999999" }),
                    h("div", { "data-value": "#333333", className: "font-color ", style: "background:#333333" }));
                d.append(colorDom, dragDiv);
                this.colorCreate = true;
            }
            var color = d.query('.selectColor', colorDom);
            //绑定事件
            var colorSelet = d.queryAll('.font-color', color);
            var _loop_1 = function (i) {
                var val = i.dataset.value;
                d.on(i, 'click', function () {
                    event.stopPropagation();
                    color.style.display = "none";
                    document.execCommand("forecolor", false, val);
                    console.log(color);
                });
            };
            for (var _a = 0, colorSelet_1 = colorSelet; _a < colorSelet_1.length; _a++) {
                var i = colorSelet_1[_a];
                _loop_1(i);
            }
        };
        //下拉框弹出初始化
        RichText1.prototype.dropDonwInit = function (icon) {
            var _this = this;
            var list = d.queryAll('.richIcon-ul', this.wrapper);
            if (G.tools.isEmpty(list)) {
                return;
            }
            if (G.tools.isEmpty(icon)) {
                icon = [
                    ['style', ['bold', 'italic', 'underline', 'strikeThrough']],
                    ['font', ['Arial,Helvetica', 'Georgia', 'Sans-serif', '楷体']],
                    ['fontsize', ['1', '2', '3', '4', '5', '6', '7']],
                    ['color', ['color']],
                    ['para', ['ul', 'ol', 'paragraph']],
                    ['array', ['justifyLeft', 'justifyCenter', 'justifyRight', 'undo', 'redo']],
                ];
            }
            var _loop_2 = function (i, node) {
                var data = list[i].innerText, that = this_1;
                icon.forEach(function (index) {
                    var dataRole = list[i].dataset.role;
                    if (dataRole === index[0]) {
                        node = new dropdown_1.DropDown({
                            el: list[i],
                            inline: false,
                            className: "color",
                            multi: null,
                            data: index[1],
                            onSelect: function (item, index) {
                                that.methodsTwo[dataRole] && that.methodsTwo[dataRole](item.value);
                                node.hideList();
                            }
                        });
                    }
                });
                d.on(list[i], 'click', function (e) {
                    node.showList();
                    event.stopPropagation();
                    if (_this.colorCreate) {
                        var colorDom = d.query('.rfichIcon-group>.app-color', _this.wrapper);
                        var color = d.query('.selectColor', colorDom);
                        color.style.display = "none";
                        _this.colorCreate = false;
                    }
                });
                d.on(document, 'click', function () {
                    event.stopPropagation();
                    node.hideList();
                    var colorDom = d.query('.rfichIcon-group>.app-color', _this.wrapper);
                    var color = d.query('.selectColor', colorDom);
                    color.style.display = "none";
                });
                out_node_1 = node;
            };
            var this_1 = this, out_node_1;
            for (var i = 0, node = void 0; i < list.length; i++) {
                _loop_2(i, node);
                node = out_node_1;
            }
        };
        RichText1.paletteDraw = function (fun) {
            //为父元素做点击事件
            return h("div", null);
        };
        Object.defineProperty(RichText1.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (val) {
                this.wrapper.style.width = val + "px";
                val = this._width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RichText1.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (val) {
                this.wrapper.style.height = val + "px";
                val = this._height;
            },
            enumerable: true,
            configurable: true
        });
        RichText1.prototype.get = function () {
            var edit = d.query('.edit-div', this.wrapper);
            console.log(edit);
            return edit.innerText;
        };
        RichText1.prototype.set = function () {
            var any = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                any[_i] = arguments[_i];
            }
        };
        return RichText1;
    }(basic_1.FormCom));
    exports.RichText1 = RichText1;
});

define("RichTextMb", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RichTextMb = /** @class */ (function (_super) {
        __extends(RichTextMb, _super);
        function RichTextMb(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            return _this;
        }
        RichTextMb.prototype.get = function () {
            return this.wrapper ? this.wrapper.innerHTML : '';
        };
        RichTextMb.prototype.set = function (html) {
            this.wrapper && (this.wrapper.innerHTML = html);
        };
        Object.defineProperty(RichTextMb.prototype, "value", {
            get: function () {
                return this.get();
            },
            set: function (html) {
                this.wrapper && (this.wrapper.innerHTML = html);
            },
            enumerable: true,
            configurable: true
        });
        RichTextMb.prototype.wrapperInit = function (para) {
            return h("div", { className: "rich-text-base", contentEditable: "true" });
        };
        return RichTextMb;
    }(basic_1.FormCom));
    exports.RichTextMb = RichTextMb;
});

define("NumInput", ["require", "exports", "TextInput"], function (require, exports, text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var NumInput = /** @class */ (function (_super) {
        __extends(NumInput, _super);
        function NumInput(p) {
            var _this = _super.call(this, Object.assign({}, {
                step: 1,
                max: null,
                min: null
            }, p, {
                icons: ['iconfont icon-jiahao', 'iconfont icon-jianhao'],
                iconHandle: function (index) {
                    _this.iconHandle(index);
                }
            })) || this;
            _this.iconHandle = function (index) {
                var p = _this.para;
                if (index === 0) {
                    _this.num = p.step || 1;
                }
                else if (index === 1) {
                    _this.num = -p.step || -1;
                }
                _this.set(_this.get() + _this.num);
                /*溢出判断*/
                _this.isOverflow(p.max, p.min, _this);
                if (_this.para.callback && typeof _this.para.callback() === 'function') {
                    _this.para.callback();
                }
            };
            _this.keyHandle = function (e) {
                var keyCode = e.keyCode || e.which || e.charCode;
                switch (keyCode) {
                    case 38: // Up
                        _this.iconHandle(0);
                        break;
                    case 40: // Down
                        _this.iconHandle(1);
                        break;
                }
            };
            var self = _this;
            // 设置默认值
            if (tools.isNotEmpty(p.defaultNum)) {
                _this.set(p.defaultNum);
            }
            // 监听按键输入
            self.on('keyup', function (e) {
                this.value = this.value.replace(/\D+/, '');
                self.isOverflow(p.max, p.min, self);
                if (self.para.callback && typeof self.para.callback() === 'function') {
                    self.para.callback();
                }
            });
            return _this;
            // let scrollFunc =  (e : WheelEvent) => {
            //     if(e.deltaY > 0){ // 下滚
            //         this.iconHandle(1);
            //     }else{
            //         this.iconHandle(0);
            //     }
            // };
            // self.on('DOMMouseScroll', scrollFunc);
            // this.input.onmousewheel = scrollFunc
        }
        NumInput.prototype.get = function () {
            return parseInt(this.input.value);
        };
        NumInput.prototype.set = function (str) {
            this.input.value = tools.str.toEmpty(str);
            if (this.para.callback && typeof this.para.callback() === 'function') {
                this.para.callback();
            }
        };
        /**
         *
         * @param max
         * @param min
         * @param self
         */
        NumInput.prototype.isOverflow = function (max, min, self) {
            if (typeof max === 'number' && self.get() > max) {
                self.set(max);
            }
            if (typeof min === 'number' && self.get() < min) {
                self.set(min);
            }
        };
        return NumInput;
    }(text_1.TextInput));
    exports.NumInput = NumInput;
});

/// <amd-module name="RadioBox"/>
define("RadioBox", ["require", "exports", "BasicCheckBox"], function (require, exports, basicCheckBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var RadioBox = /** @class */ (function (_super) {
        __extends(RadioBox, _super);
        function RadioBox(para) {
            return _super.call(this, Object.assign({}, para, { type: 'radio' })) || this;
        }
        return RadioBox;
    }(basicCheckBox_1.BasicCheckBox));
    exports.RadioBox = RadioBox;
});

define("RichTextModal", ["require", "exports", "RichText", "Modal", "TextInput", "RichTextMb"], function (require, exports, richText_1, Modal_1, text_1, richTextMb_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var RichTextModal = /** @class */ (function (_super) {
        __extends(RichTextModal, _super);
        function RichTextModal(para) {
            var _this = _super.call(this, Object.assign({}, para, {
                readonly: true,
                icons: ['iconfont icon-arrow-down'],
                iconHandle: function () {
                    if (_this.modal === null) {
                        _this.initRichText();
                    }
                }
            })) || this;
            _this._value = '';
            _this.onClose = para.onClose;
            _this.initRichText();
            return _this;
        }
        RichTextModal.prototype.initRichText = function () {
            var _this = this;
            var body = h("div", { className: "rich-text-modal-body" });
            this.modal = new Modal_1.Modal({
                container: document.body,
                header: '编辑',
                body: body,
                isOnceDestroy: true,
                isAdaptiveCenter: true,
                className: 'rich-text-modal',
                width: '750px',
                height: '425px',
                onClose: function () {
                    _this.input.value = tools.str.removeHtmlTags(_this.richText.get());
                    _this._value = _this.richText.get();
                    typeof _this.onSet === 'function' && _this.onSet(_this.get());
                    _this.modal = null;
                }
            });
            this.richText = new (tools.isMb ? richTextMb_1.RichTextMb : richText_1.RichText)({ container: body });
            this.richText.set(this._value);
        };
        Object.defineProperty(RichTextModal.prototype, "onClose", {
            get: function () {
                return this._onClose;
            },
            set: function (onClose) {
                this._onClose = onClose;
            },
            enumerable: true,
            configurable: true
        });
        RichTextModal.prototype.get = function () {
            return this.richText.get();
        };
        RichTextModal.prototype.set = function (str) {
            this._value = str;
            this.input.value = tools.str.removeHtmlTags(str);
            this.richText.set(str);
        };
        RichTextModal.prototype.destroy = function () {
            this.richText.destroy();
            _super.prototype.destroy.call(this);
        };
        return RichTextModal;
    }(text_1.TextInput));
    exports.RichTextModal = RichTextModal;
});

/// <amd-module name="SelectBox"/>
define("SelectBox", ["require", "exports", "CheckBox", "FormCom", "RadioBox", "BasicCheckBox"], function (require, exports, checkBox_1, basic_1, radioBox_1, basicCheckBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var SelectBox = /** @class */ (function (_super) {
        __extends(SelectBox, _super);
        function SelectBox(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            _this.keyHandle = function (e) {
                var index = _this.getChecked()[0], keyCode = e.keyCode || e.which || e.charCode, num = index === 0 ? 1 : 0, key = _this.para.tabIndexKey || 13;
                if (keyCode === key) {
                    _this.set([num]);
                    _this.para.select.callback && _this.para.select.callback(num);
                }
            };
            // this._wrapper = para.container;
            _this.selectArr = [];
            _this.guidName = tools.getGuid();
            _this.type = _this.para.select && _this.para.select.multi ? 'checkbox' : 'radio';
            if (Array.isArray(para.data)) {
                _this.addByList();
            }
            // this.tabIndex = para.tabIndex;
            _this.initEvent();
            return _this;
        }
        SelectBox.prototype.getChecked = function () {
            var inputs = d.queryAll('input', this.wrapper), arr = [];
            Array.isArray(inputs) && inputs.forEach(function (input) {
                if (input.checked) {
                    arr.push(parseInt(input.parentElement.dataset.index));
                }
            });
            return arr;
        };
        //显示选项框
        SelectBox.prototype.show = function () {
            this.para.container.style.display = 'inline-block';
        };
        //隐藏选项框
        SelectBox.prototype.hide = function () {
            this.para.container.style.display = 'none';
        };
        SelectBox.prototype.initEvent = function () {
            //添加事件
            var self = this;
            self.lastRadioBox = null;
            //如果单选框不允许多次选中，默认第一个单选框为选中状态，则lastRadioBox为第一个单选框
            if (!self.para.select.isRadioNotchecked && self.type === 'radio') {
                var radioInput = self.para.container.querySelector('input');
                if (radioInput) {
                    self.lastRadioBox = radioInput;
                }
            }
            // d.on(this.para.container, 'click', '.check-span', function (e: Event) {
            //     if(self.para.select && self.para.select.isStopPropatation) {
            //         e.stopPropagation();
            //     }
            //     self.checked((<HTMLElement>this).parentElement.querySelector('input'));
            //     if (self.para.select && self.para.select.callback) {
            //         ////临时用于权限模块，通过选项框的title值来记录数据
            //         if(self.para.noteDataByTitle) {
            //             if(self.para.data[this.parentElement.dataset.index]) {
            //                 this.parentElement.title = self.para.data[this.parentElement.dataset.index].value;
            //             }
            //         }
            //         self.para.select.callback(parseInt(this.parentElement.dataset.index),this.parentElement);
            //     }
            // })
        };
        SelectBox.prototype.clickHandler = function (input) {
            this.checked(input);
            if (input instanceof basicCheckBox_1.BasicCheckBox) {
                input = input.wrapper.querySelector('input');
            }
            if (this.para.select && this.para.select.callback) {
                ////临时用于权限模块，通过选项框的title值来记录数据
                if (this.para.noteDataByTitle) {
                    if (this.para.data[input.parentElement.dataset.index]) {
                        input.parentElement.title = this.para.data[input.parentElement.dataset.index].value;
                    }
                }
                this.para.select.callback(parseInt(input.parentElement.dataset.index), input.parentElement);
            }
        };
        SelectBox.prototype.checked = function (input) {
            var self = this;
            if (input instanceof basicCheckBox_1.BasicCheckBox) {
                var inputEl = input.wrapper.querySelector('input');
                var index = parseInt(inputEl.parentElement.dataset.index);
                if (input.type === 'checkbox') {
                    if (input.checked) {
                        self.selectArr.push(index);
                    }
                    else {
                        var i = self.selectArr.indexOf(index);
                        if (i > -1) {
                            self.selectArr.splice(i, 1);
                        }
                    }
                }
                else {
                    if (self.lastRadioBox !== inputEl) {
                        self.selectArr[0] = index;
                        inputEl.value = 'true';
                        inputEl.checked = true;
                    }
                    else {
                        if (self.para.select.isRadioNotchecked) {
                            if (input.checked) {
                                self.selectArr[0] = index;
                            }
                            else {
                                self.selectArr = [];
                            }
                        }
                        else {
                            self.selectArr = [];
                            return;
                        }
                    }
                    self.lastRadioBox = inputEl;
                }
            }
            else {
                var index = parseInt(input.parentElement.dataset.index);
                //多选框两种情况
                if (input.type === 'checkbox') {
                    if (input.value === 'true') {
                        input.checked = false;
                        input.value = 'false';
                        var i = self.selectArr.indexOf(index);
                        if (i > -1) {
                            self.selectArr.splice(i, 1);
                        }
                    }
                    else {
                        self.selectArr.push(index);
                        input.checked = true;
                        input.value = 'true';
                    }
                }
                //单选框的两种情况,this.value记录每次是否点击,value === false 这次没有点击
                else {
                    if (self.lastRadioBox !== input) {
                        self.selectArr[0] = index;
                        // if (self.para.select.isRadioNotchecked) {
                        input.value = 'true';
                        input.checked = true;
                        // }
                    }
                    else {
                        if (self.para.select.isRadioNotchecked) {
                            if (!(input.value === 'true')) {
                                self.selectArr[0] = index;
                                input.value = 'true';
                                input.checked = true;
                            }
                            else {
                                self.selectArr = [];
                                input.value = 'false';
                                input.checked = false;
                            }
                        }
                        else {
                            input.checked = true;
                            self.selectArr = [];
                            return;
                        }
                    }
                    self.lastRadioBox = input;
                }
            }
            //
            // if (self.para.select && self.para.select.callback) {
            //     self.para.select.callback(index);
            // }
        };
        /*
         * 为data[](ListItem)中的每个元素创建对应的selectBox.
         * */
        SelectBox.prototype.addByList = function () {
            var _this = this;
            Array.isArray(this.para.data) && this.para.data.forEach(function (obj, i) {
                var self = _this;
                var Construct = _this.type === 'radio' ? radioBox_1.RadioBox : checkBox_1.CheckBox, checkBox = new Construct({
                    text: obj.text ? obj.text : '',
                    name: _this.guidName,
                    onSet: function (e) {
                        _this.clickHandler(checkBox);
                    }
                }), selectBox = checkBox.wrapper, 
                // selectBox = CheckBox.initCom(this.guidName, obj.text ? obj.text : '', this.type),
                input = selectBox.querySelector('input'), span = selectBox.querySelector('span');
                //如果单选框不允许多次选中，则默认第一个单选框为选中状态
                if (!_this.para.select.isRadioNotchecked && i === 0 && _this.type === 'radio') {
                    _this.selectArr[0] = i;
                    input.checked = true;
                }
                selectBox.dataset.index = i.toString();
                input.value = obj.value ? obj.value.toString() : '';
                _this.para.container.appendChild(selectBox);
            });
        };
        /*
         * 为单个dom对象添加selectBox
         * */
        SelectBox.prototype.addByItem = function (el) {
            var _this = this;
            var checkBox = new checkBox_1.CheckBox({
                name: this.guidName,
                onSet: function (e) {
                    _this.clickHandler(checkBox);
                }
            }), selectBox = checkBox.wrapper;
            selectBox.dataset.index = el.dataset.index;
            el.appendChild(selectBox);
        };
        /*
         * 设置selectBox为禁用状态
         * 传入参数:要被禁用的selectbox的下标数组
         * */
        SelectBox.prototype.setDisabled = function (indexs) {
            var _this = this;
            Array.isArray(indexs) && indexs.forEach(function (i) {
                var selectBox = _this.para.container.childNodes[i];
                selectBox.classList.add('disabled');
            });
        };
        /*
         * 取消selectBox为禁用状态
         * */
        SelectBox.prototype.unsetDisabled = function (indexs) {
            var _this = this;
            Array.isArray(indexs) && indexs.forEach(function (i) {
                var selectBox = _this.para.container.childNodes[i];
                selectBox.classList.remove('disabled');
            });
        };
        /*
         * 获取当前选中的selectBox
         * */
        SelectBox.prototype.get = function () {
            return this.selectArr;
        };
        SelectBox.prototype.getSelect = function () {
            var _this = this;
            var selected = [];
            this.get().forEach(function (n) {
                _this.para.data.forEach(function (d, i) {
                    if (i === n) {
                        selected.push(d);
                    }
                });
            });
            return selected;
        };
        //不保留状态，空数组默认全清
        SelectBox.prototype.set = function (index) {
            this.unsetSelectedAll();
            this.selected(index, true);
        };
        //全选
        SelectBox.prototype.setAll = function () {
            this.selectAll(true);
        };
        //添加选中状态
        SelectBox.prototype.addSelected = function (index) {
            this.selected(index, true);
        };
        // 取消选中
        SelectBox.prototype.unSet = function (index) {
            this.selected(index);
        };
        /**
         * 勾选
         * @param index 只能传下标
         * @param set true为set，false为unset
         */
        SelectBox.prototype.selected = function (index, set) {
            var self = this, spans = d.queryAll('span.check-span', self.para.container), isSelected = false, selectNum = self.get();
            index.forEach(function (i) {
                selectNum.forEach(function (n) {
                    if (i === n) {
                        isSelected = true;
                    }
                });
                if (set) {
                    if (!isSelected) {
                        self.checked(d.query('input', spans[i].parentElement));
                    }
                }
                else {
                    if (isSelected) {
                        self.checked(d.query('input', spans[i].parentElement));
                    }
                }
                isSelected = false;
            });
        };
        //全清
        SelectBox.prototype.unsetSelectedAll = function () {
            this.selectAll();
        };
        SelectBox.prototype.selectAll = function (set) {
            var data = d.queryAll('span.check-span', this.para.container), nums = [];
            data && data.forEach(function (n, i) {
                nums.push(i);
            });
            this.selected(nums, set);
        };
        Object.defineProperty(SelectBox.prototype, "value", {
            get: function () {
                return this.selectArr;
            },
            set: function (index) {
                this.unsetSelectedAll();
                this.selected(index, true);
            },
            enumerable: true,
            configurable: true
        });
        SelectBox.prototype.wrapperInit = function (para) {
            return undefined;
        };
        return SelectBox;
    }(basic_1.FormCom));
    exports.SelectBox = SelectBox;
});

define("SearchInput", ["require", "exports", "TextInput"], function (require, exports, text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var SearchInput = /** @class */ (function (_super) {
        __extends(SearchInput, _super);
        function SearchInput(p) {
            var _this = _super.call(this, Object.assign({}, p, {
                icons: ['iconfont icon-sousuo'],
                iconHandle: function () {
                    _this.search();
                }
            })) || this;
            return _this;
        }
        SearchInput.prototype.wrapperInit = function (para) {
            var _this = this;
            var wrapper = _super.prototype.wrapperInit.call(this, para);
            d.classAdd(wrapper, 'search-input');
            //回车搜索
            d.on(this.input, 'keypress', function (e) {
                if (e.charCode === 13) {
                    _this.search();
                }
            });
            return wrapper;
        };
        SearchInput.prototype.search = function () {
            var recentValue = this.input.value, ajax = this.para.ajax;
            if (ajax && ajax.url && ajax.fun) {
                //用ajax获取数据
                ajax.fun(ajax.url, ajax.data, recentValue, function (d) {
                });
            }
        };
        return SearchInput;
    }(text_1.TextInput));
    exports.SearchInput = SearchInput;
});

define("SelectInput", ["require", "exports", "TextInput", "DropDown"], function (require, exports, text_1, dropdown_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="SelectInput"/>
    var tools = G.tools;
    var d = G.d;
    var SelectInput = /** @class */ (function (_super) {
        __extends(SelectInput, _super);
        function SelectInput(para) {
            var _this = _super.call(this, tools.obj.merge(para, {
                icons: tools.isNotEmpty(para.arrowIcon) ? [(tools.isNotEmpty(para.arrowIconPre) ? para.arrowIconPre : 'iconfont') + ' ' + para.arrowIcon] : ['iconfont icon-arrow-down'],
                iconHandle: para.clickType !== 0 ? function () {
                    _this.toggle();
                } : null
            })) || this;
            _this.keyHandle = function (e) {
                var data = _this.getData();
                if (Array.isArray(data)) {
                    var index = _this.dropdown.selectedIndex, length_1 = _this.getData().length;
                    if (e.keyCode === 38) {
                        index--;
                    }
                    else if (e.keyCode === 40) {
                        index++;
                    }
                    if (index < 0) {
                        index = 0;
                    }
                    if (index >= length_1 - 1) {
                        index = length_1 - 1;
                    }
                    _this.set(data[index].value);
                }
            };
            _this.tabIndex = para.tabIndex;
            _this.ajaxFun(para);
            _this.para = para;
            // clickType为0时
            if (para.clickType === 0) {
                _this.input.style.cursor = 'pointer';
                d.on(_this.wrapper, 'click', function (e) {
                    e.stopPropagation();
                    _this.toggle();
                });
            }
            var dropPara = {
                el: document.body,
                data: para.data,
                ajax: para.ajax,
                multi: para.multi,
                className: para.dropClassName
            };
            _this.para.multi ? (dropPara['onMultiSelect'] = function (selected, index) {
                var splitCode = _this.para.multiSplit ? _this.para.multiSplit : ',';
                var innerVal = '';
                if (Array.isArray(selected) && selected[0]) {
                    innerVal += selected[0].text;
                    for (var i = 1; i < selected.length; i++) {
                        innerVal += "" + splitCode + selected[i].text;
                    }
                    _this.input.value = innerVal;
                }
                else {
                    _this.input.value = '';
                    _this.defaultVal = '';
                }
                _this.para.onSet && _this.para.onSet(selected, index);
            }) : (dropPara['onSelect'] = function (item, index) {
                _this.input.value = _this.para.useInputVal ? item.value.toString() : item.text;
                _this.para.onSet && _this.para.onSet(item, index);
            });
            _this.dropdown = new dropdown_1.DropDown(dropPara);
            return _this;
        }
        SelectInput.prototype.toggle = function () {
            this.dropdown.toggle(this.wrapper);
        };
        SelectInput.prototype.ajaxFun = function (para) {
            var _this = this;
            if (para.ajax) {
                var fun_1 = para.ajax.fun;
                para.ajax.fun = function (url, value, callback) {
                    fun_1(url, value === '' ? _super.prototype.get.call(_this) : value, callback);
                };
            }
        };
        SelectInput.prototype.getData = function () {
            return this.para.data;
        };
        SelectInput.prototype.set = function (value) {
            this.value = value;
            // super.set(value);
        };
        SelectInput.prototype.get = function () {
            return this.value;
        };
        Object.defineProperty(SelectInput.prototype, "value", {
            get: function () {
                if (this.para.multi) {
                    // let seleArr = this.dropdown.get();
                    // let cacheData = this.data;
                    // let result = '';
                    // if(seleArr.length > 1){
                    //     result = cacheData[seleArr[0]]['value'];
                    //     for(let j = 1,len = seleArr.length;j < len;j++){
                    //         result += ','+cacheData[seleArr[j]]['value'];
                    //     }
                    // }
                    // return result;
                    var result = this.dropdown.get();
                    if (this.para.useInputVal) {
                        return _super.prototype.get.call(this);
                    }
                    else {
                        var value = tools.isEmpty(result) ? this.defaultVal : result.map(function (d) { return d.value; }).join(',');
                        return value;
                    }
                }
                else {
                    var selected = this.dropdown.get();
                    if (this.para.useInputVal) {
                        return _super.prototype.get.call(this);
                    }
                    else {
                        return selected === null ? this.defaultVal : selected.value;
                    }
                }
            },
            set: function (data) {
                if (typeof data === 'object') {
                    var value = data.value, text = data.text;
                    if (!this.dropdown.select(value)) {
                        this.defaultVal = value;
                        _super.prototype.set.call(this, text);
                        typeof this.onSet === 'function' && this.onSet(value);
                    }
                }
                else {
                    if (!this.dropdown.select(data)) {
                        this.defaultVal = data;
                        _super.prototype.set.call(this, data);
                        typeof this.onSet === 'function' && this.onSet(data);
                    }
                }
                // super.set(value);
            },
            enumerable: true,
            configurable: true
        });
        SelectInput.prototype.getText = function () {
            return this.input.value;
        };
        SelectInput.prototype.showItems = function (indexes) {
            this.dropdown.showItems(indexes);
        };
        SelectInput.prototype.setPara = function (para) {
            this.ajaxFun(para);
            this.dropdown.setPara(para);
        };
        SelectInput.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.dropdown.destroy();
        };
        return SelectInput;
    }(text_1.TextInput));
    exports.SelectInput = SelectInput;
});

define("SelectInputMb", ["require", "exports", "TextInput", "Spinner", "Picker"], function (require, exports, text_1, spinner_1, picker_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var SelectInputMb = /** @class */ (function (_super) {
        __extends(SelectInputMb, _super);
        function SelectInputMb(para) {
            var _this = _super.call(this, Object.assign({}, para, {
                icons: ['iconfont icon-arrow-down'],
                iconHandle: para.clickType !== 0 ? function () { _this.showList(); } : null
            })) || this;
            _this.para = para;
            _this.data = [];
            _this.pickers = [];
            _this.showIndexes = [];
            _this.pickList = h(picker_1.PickerList, { isBackground: false, isShow: false, isOnceDestroy: false, container: document.body, onSet: function (val) {
                    var value = val[0];
                    value = typeof value === 'string' || typeof value === 'number' ? value : value.value;
                    _this.set(value);
                } },
                h(picker_1.Picker, { optionData: para.data, isMulti: para.multi }));
            _this.pickers = _this.pickList.childs;
            _this.ajaxFun(para);
            _this.initData(para.data);
            // clickType为0时
            if (para.clickType === 0) {
                d.on(_this.wrapper, 'click', function () {
                    _this.showList();
                    var data = _this.pickers[0].optionData;
                    // if(this.hasSelectItem && this.hasSelectItem.length > 0){
                    //     for(let i = 0,l = this.hasSelectItem.length;i < l;i++){
                    //         for(let j = 0,len = child.length;j < len;j++){
                    //             let li = child[j];
                    //             if(li.innerText === this.hasSelectItem[i]['text']){
                    //                 let e = {
                    //                     target : li
                    //                 };
                    //             }
                    //         }
                    //     }
                    // }
                });
            }
            return _this;
        }
        SelectInputMb.prototype.initData = function (data) {
            if (Array.isArray(data)) {
                this.data = data.map(function (data) {
                    return typeof data === 'string' || typeof data === 'number'
                        ? { text: data + '', value: data } : data;
                });
                this.pickers[0] && (this.pickers[0].optionData = this.data);
            }
        };
        SelectInputMb.prototype.ajaxFun = function (para) {
            var _this = this;
            if (para.ajax) {
                var fun_1 = para.ajax.fun;
                this.para.ajax.fun = function (url, value, callback) {
                    fun_1(url, value === '' ? _super.prototype.get.call(_this) : value, callback);
                };
            }
        };
        SelectInputMb.prototype.showList = function () {
            var _this = this;
            var ajax = this.para.ajax, data = this.para.data;
            this.pickList.show();
            var showData = function (data) {
                _this.data = data.map(function (d) { return typeof d === 'object'
                    ? d : { text: d + '', value: d }; });
                var showData = _this.getShowData();
                _this.initData(showData);
            };
            if (ajax && ajax.fun) {
                var spinner_2 = new spinner_1.Spinner({
                    el: this.iconGroup,
                    type: spinner_1.Spinner.SHOW_TYPE.replace
                });
                spinner_2.show();
                // debugger;
                // 用ajax获取数据
                ajax.fun(ajax.url, _super.prototype.get.call(this), function (d) {
                    console.log(d);
                    if (Array.isArray(d)) {
                        showData(d);
                    }
                    spinner_2.hide();
                });
            }
            else if (Array.isArray(data)) {
                showData(data);
            }
        };
        SelectInputMb.prototype.setPara = function (para) {
            var data = para.data, ajax = para.ajax;
            if (data && data[0]) {
                this.para.data = data;
                this.initData(data);
                this.para.ajax = null;
            }
            else if (ajax) {
                this.para.ajax = tools.obj.merge(this.para.ajax, ajax);
                this.para.data = null;
            }
        };
        SelectInputMb.prototype.getShowData = function () {
            var _this = this;
            var showData = [];
            if (this.showIndexes[0]) {
                this.showIndexes.forEach(function (i) {
                    var d = _this.data[i];
                    if (d) {
                        showData.push(d);
                    }
                });
            }
            else {
                showData = this.data;
            }
            return showData;
        };
        SelectInputMb.prototype.showItems = function (indexes) {
            this.showIndexes = Array.isArray(indexes) ? indexes : [];
        };
        SelectInputMb.prototype.get = function () {
            var data = this.pickers[0].value;
            var result = "";
            if (this.para && this.para.multi && Array.isArray(data)) {
                if (data && data.length > 0) {
                    result += (typeof data[0] === 'string' || typeof data[0] === 'number')
                        ? data[0] : data[0].value;
                    for (var i = 1, l = data.length; i < l; i++) {
                        result += "," + data[i]['value'];
                    }
                }
            }
            else {
                var opt = data;
                // return this.para.useInputVal ? super.get() : selected.value;
                result = (this.para && this.para.useInputVal) ? _super.prototype.get.call(this) : opt ? opt.value : '';
            }
            return result;
        };
        SelectInputMb.prototype.getText = function () {
            return this.input.value;
        };
        SelectInputMb.prototype.set = function (value) {
            var index = -1;
            for (var d_1 = null, i = 0; d_1 = this.data[i]; i++) {
                if (d_1.value === value) {
                    if (this.pickers[0]) {
                        this.pickers[0].current !== i && (this.pickers[0].current = i);
                        index = i;
                        this.para.onSet && this.para.onSet(d_1, index);
                        break;
                    }
                }
            }
            this.input.value = tools.str.toEmpty(index === -1 ? value : this.data[index][this.para.useInputVal ? 'value' : 'text']);
        };
        SelectInputMb.prototype.destroy = function () {
            this.pickList && this.pickList.hide(true);
            _super.prototype.destroy.call(this);
        };
        return SelectInputMb;
    }(text_1.TextInput));
    exports.SelectInputMb = SelectInputMb;
});
//
// export class SelectInputMb extends TextInput{
//     onSet: (val) => void;
//
//     data : ListItem[];
//     private selectedIndex: number;
//     private showIndexes : number[];
//     private hasSelectItem : obj[] = [];
//
//     protected para : ISelectInputPara;
//     constructor(p : ISelectInputPara){
//
//         super(Object.assign(p, {
//             icons : ['iconfont icon-arrow-down'],
//             iconHandle : p.clickType !== 0 ? () => {this.showList()} : null
//         }));
//
//         Picker.init();
//
//         this.ajaxFun(p);
//         this.initData(p.data);
//         // clickType为0时
//         if(p.clickType === 0){
//             d.on(this.wrapper, 'click', () => {
//                 this.showList();
//                 if(this.hasSelectItem && this.hasSelectItem.length > 0){
//                     let child = Picker.ulGet().childNodes;
//                     for(let i = 0,l = this.hasSelectItem.length;i < l;i++){
//                         for(let j = 0,len = child.length;j < len;j++){
//                             let li = <HTMLLIElement>child[j];
//                             if(li.innerText === this.hasSelectItem[i]['text']){
//                                 let e = {
//                                     target : li
//                                 };
//                                 Picker.multiHandle(e);
//                             }
//                         }
//                     }
//                 }
//             })
//         }
//
//         this.para = p;
//         this.selectedIndex = -1;
//         this.showIndexes = [];
//
//         Picker.init();
//
//     }
//
//     private getShowData(){
//         let showData : ListItem[] = [];
//         if(this.showIndexes[0]){
//             this.showIndexes.forEach(i => {
//                 let d = this.data[i];
//                 if(d){
//                     showData.push(d)
//                 }
//             });
//         }else {
//             showData = this.data;
//         }
//
//         return showData;
//     }
//
//     /**
//      * 显示指定下标的item，每次重新显示，不与上次操作重叠，传入 空数组，或者null则完全隐藏
//      * @param {number[]} indexes
//      */
//     public showItems(indexes :number[]) {
//
//         this.showIndexes = Array.isArray(indexes) ? indexes : [];
//
//     }
//
//     /**
//      * 初始化数据
//      * @param {ListData} data
//      */
//     private initData(data : ListData) {
//         if (Array.isArray(data)) {
//             let options : ListItem[];
//             if(typeof data[0] === 'string' || typeof data[0] === 'number'){
//                 options =  data.map((d : string) => {
//                     return {
//                         text : d,
//                         value : d
//                     }
//                 });
//             }else{
//                 options = <ListItem[]>data;
//             }
//
//             this.data = options;
//
//             Picker.set(options);
//         }else{
//             this.data = [];
//         }
//     }
//
//     private ajaxFun(para : SelectDataPara){
//         if(para.ajax){
//             let fun = para.ajax.fun;
//             para.ajax.fun = (url, value, callback) => {
//                 fun(url, value === '' ? super.get() : value, callback )
//             }
//         }
//     }
//
//     public setPara(para : SelectDataPara){
//
//         let data = para.data,
//             ajax = para.ajax;
//
//         if( data && data[0] ){
//
//             this.para.data = data;
//
//             this.initData(data);
//
//             this.para.ajax = null;
//
//         }else if (ajax){
//
//             this.para.ajax = tools.obj.merge(this.para.ajax, ajax);
//
//             this.para.data = null;
//
//         }
//     }
//
//     private showList(){
//         let data = this.para.data,
//             ajax = this.para.ajax;
//
//         let showData = (data : ListData) => {
//             this.initData(data);
//
//             let showData = this.getShowData();
//
//             Picker.show(showData,  (option) => {
//                 this.hasSelectItem = Picker.get();
//                 let index: number = -1;
//                 for (let d:ListItem = null, i = 0; d = this.data[i]; i++){
//                     if (d.value === option[0].value){
//                         this.selectedIndex = index = i;
//                         break;
//                     }
//                 }
//                 super.set(this.para.useInputVal ? option[0].value.toString() : option[0].text);
//                 this.para.onSet && this.para.onSet(option[0], index);
//
//                 if(this.para.multi){
//                     let innerText = '';
//                     let splitCode = this.para.multiSplit ? this.para.multiSplit : ',';
//                     if(this.hasSelectItem && this.hasSelectItem.length > 0){
//                         innerText += this.hasSelectItem[0].value;
//                         for(let i = 1,l = this.hasSelectItem.length;i < l;i++){
//                             innerText += `${splitCode}${this.hasSelectItem[i]['value']}`;
//                         }
//                         this.input.value = innerText;
//                     }
//                 }
//             }, this.get());
//             this.getShowData();
//         };
//
//         if (ajax && ajax.fun) {
//             let spinner = new Spinner({
//                 el: <HTMLElement>this.iconGroup,
//                 type: Spinner.SHOW_TYPE.replace
//             });
//             spinner.show();
//             // debugger;
//             // 用ajax获取数据
//             ajax.fun(ajax.url, super.get(), d => {
//                 if (Array.isArray(d)) {
//                     showData(d);
//                 }
//                 spinner.hide();
//             });
//         } else if(Array.isArray(data)){
//             showData(data);
//         }
//
//     }
//
//     set (value){
//
//         let index : number = -1;
//         for (let d:ListItem = null, i = 0; d = this.data[i]; i++){
//             if (d.value === value){
//                 index = this.selectedIndex = i;
//                 this.para.onSet && this.para.onSet(d, index);
//                 break;
//             }
//         }
//         super.set(index === -1 ? value : this.data[index][this.para.useInputVal ? 'value' : 'text']);
//     }
//
//     getText(){
//         return this.input.value;
//     }
//     get (){
//         if(this.para && this.para.multi) {
//             let result = "";
//             if(this.hasSelectItem && this.hasSelectItem.length > 0){
//                 result += this.hasSelectItem[0].value;
//                 for(let i = 1,l = this.hasSelectItem.length;i < l;i++){
//                     result += `,${this.hasSelectItem[i]['value']}`;
//                 }
//                 return result;
//             }
//         }
//         else{
//             let opt = this.data[this.selectedIndex];
//             // return this.para.useInputVal ? super.get() : selected.value;
//             return (this.para && this.para.useInputVal) ?  super.get() : opt ? opt.value : '';
//         }
//     }
// }

define("SQLEditor", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var SQLEditor = /** @class */ (function (_super) {
        __extends(SQLEditor, _super);
        function SQLEditor(para) {
            var _this = _super.call(this, para) || this;
            _this.setSql = 'ace/mode/sql';
            _this.editorInit();
            _this.width = para.width;
            _this.height = para.height;
            return _this;
        }
        SQLEditor.prototype.wrapperInit = function () {
            return h("div", { className: "sql-editor" });
        };
        SQLEditor.prototype.editorInit = function () {
            var _this = this;
            require(['AceEditor'], function () {
                _this.sqlConfigInit();
                _this.editor = ace.edit(_this.wrapper);
                _this.editor.session.setMode(_this.setSql);
                _this.set(_this._value);
            });
        };
        Object.defineProperty(SQLEditor.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (num) {
                if ((typeof num === 'number' || typeof num === 'string') && this._width !== num) {
                    this.wrapper.style.width = typeof num === 'number' ? num + "px" : num;
                    this._width = num;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SQLEditor.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (num) {
                if ((typeof num === 'number' || typeof num === 'string') && this._height !== num) {
                    this.wrapper.style.height = typeof num === 'number' ? num + "px" : num;
                    this._height = num;
                }
            },
            enumerable: true,
            configurable: true
        });
        SQLEditor.prototype.sqlConfigInit = function () {
            ace.define("ace/mode/sql_highlight_rules", ["require", "exports", "module", "ace/lib/oop", "ace/mode/text_highlight_rules"], function (require, exports, module) {
                "use strict";
                var oop = require("../lib/oop");
                var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;
                var SqlHighlightRules = function () {
                    var keywords = ("select|insert|update|delete|from|where|and|or|group|by|order|limit|offset|having|as|case|" +
                        "when|else|end|type|left|right|join|on|outer|desc|asc|union|create|table|primary|key|if|" +
                        "foreign|not|references|default|null|inner|cross|natural|database|drop|grant");
                    var builtinConstants = ("true|false");
                    var builtinFunctions = ("avg|count|first|last|max|min|sum|ucase|lcase|mid|len|round|rank|now|format|" +
                        "coalesce|ifnull|isnull|nvl");
                    var dataTypes = ("int|numeric|decimal|date|varchar|char|bigint|float|double|bit|binary|text|set|timestamp|" +
                        "money|real|number|integer");
                    var keywordMapper = this.createKeywordMapper({
                        "support.function": builtinFunctions,
                        "keyword": keywords,
                        "constant.language": builtinConstants,
                        "storage.type": dataTypes
                    }, "identifier", true);
                    this.$rules = {
                        "start": [{
                                token: "comment",
                                regex: "--.*$"
                            }, {
                                token: "comment",
                                start: "/\\*",
                                end: "\\*/"
                            }, {
                                token: "string",
                                regex: '".*?"'
                            }, {
                                token: "string",
                                regex: "'.*?'"
                            }, {
                                token: "string",
                                regex: "`.*?`"
                            }, {
                                token: "constant.numeric",
                                regex: "[+-]?\\d+(?:(?:\\.\\d*)?(?:[eE][+-]?\\d+)?)?\\b"
                            }, {
                                token: keywordMapper,
                                regex: "[a-zA-Z_$][a-zA-Z0-9_$]*\\b"
                            }, {
                                token: "keyword.operator",
                                regex: "\\+|\\-|\\/|\\/\\/|%|<@>|@>|<@|&|\\^|~|<|>|<=|=>|==|!=|<>|="
                            }, {
                                token: "paren.lparen",
                                regex: "[\\(]"
                            }, {
                                token: "paren.rparen",
                                regex: "[\\)]"
                            }, {
                                token: "text",
                                regex: "\\s+"
                            }]
                    };
                    this.normalizeRules();
                };
                oop.inherits(SqlHighlightRules, TextHighlightRules);
                exports.SqlHighlightRules = SqlHighlightRules;
            });
            ace.define(this.setSql, ["require", "exports", "module", "ace/lib/oop", "ace/mode/text", "ace/mode/sql_highlight_rules"], function (require, exports, module) {
                "use strict";
                var oop = require("../lib/oop");
                var TextMode = require("./text").Mode;
                var SqlHighlightRules = require("./sql_highlight_rules").SqlHighlightRules;
                var Mode = function () {
                    this.HighlightRules = SqlHighlightRules;
                    this.$behaviour = this.$defaultBehaviour;
                };
                oop.inherits(Mode, TextMode);
                (function () {
                    this.lineCommentStart = "--";
                    this.$id = "ace/mode/sql";
                }).call(Mode.prototype);
                exports.Mode = Mode;
            });
        };
        SQLEditor.prototype.get = function () {
            return this.editor ? this.editor.getValue() : this._value;
        };
        SQLEditor.prototype.set = function (sql) {
            this.editor && this.editor.setValue(sql);
            this._value = sql;
        };
        Object.defineProperty(SQLEditor.prototype, "value", {
            get: function () {
                return this.editor ? this.editor.getValue() : this._value;
            },
            set: function (sql) {
                this.editor && this.editor.setValue(sql);
                this._value = sql;
            },
            enumerable: true,
            configurable: true
        });
        return SQLEditor;
    }(basic_1.FormCom));
    exports.SQLEditor = SQLEditor;
});

/// <amd-module name="BasicBoxGroup"/>
define("BasicBoxGroup", ["require", "exports", "ContainCom", "BasicCheckBox"], function (require, exports, ContainCom_1, basicCheckBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var BasicBoxGroup = /** @class */ (function (_super) {
        __extends(BasicBoxGroup, _super);
        function BasicBoxGroup(para) {
            var _this = _super.call(this, para) || this;
            _this._selectBoxes = _this.childs.filter(function (child) { return child instanceof basicCheckBox_1.BasicCheckBox; });
            _this.init(para);
            return _this;
        }
        BasicBoxGroup.prototype.wrapperInit = function (para) {
            return this._body = h("div", { className: "select-box-wrapper" });
        };
        BasicBoxGroup.prototype.init = function (para) {
            var _this = this;
            this.onSet = para.onSet;
            this._selectBoxes.forEach(function (selectBox) {
                selectBox.on(basicCheckBox_1.BasicCheckBox.EVT_CHECK_BOX_CHANGE, function (ev) {
                    _this.checkHandler(selectBox, ev);
                });
            });
            this.type = para.type;
            this.size = para.size;
        };
        BasicBoxGroup.prototype.checkHandler = function (target, checked) {
            tools.isFunction(this.onSet) && this.onSet({
                isChecked: checked,
                index: this._selectBoxes.indexOf(target),
                name: target.name
            });
        };
        Object.defineProperty(BasicBoxGroup.prototype, "selectBoxes", {
            get: function () {
                return this._selectBoxes.slice();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicBoxGroup.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                this._type = tools.isEmpty(type) ? 'default' : type;
                this.wrapper.classList.remove(BasicBoxGroup.BTN_CHECKBOX_CLASS);
                switch (this._type) {
                    case 'button':
                        this.wrapper.classList.add(BasicBoxGroup.BTN_CHECKBOX_CLASS);
                        break;
                    case 'tag':
                        this.wrapper.classList.add(BasicBoxGroup.TAG_CHECKBOX_CLASS);
                        break;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BasicBoxGroup.prototype, "size", {
            set: function (size) {
                size = tools.isEmpty(size) ? 'small' : size;
                this.wrapper.classList.add(size + '-select-box-wrapper');
            },
            enumerable: true,
            configurable: true
        });
        BasicBoxGroup.prototype.get = function () {
            return this._selectBoxes.map(function (selectBox) { return selectBox.checked; });
        };
        BasicBoxGroup.prototype.set = function (index, checked) {
            if (index in this._selectBoxes) {
                var selectBox = this._selectBoxes[index];
                selectBox && (selectBox.checked = checked);
            }
        };
        Object.defineProperty(BasicBoxGroup.prototype, "value", {
            get: function () {
                var result = [];
                this._selectBoxes.forEach(function (box) {
                    box.checked && result.push(box.value);
                });
                return result;
            },
            enumerable: true,
            configurable: true
        });
        BasicBoxGroup.prototype.add = function (selectBox) {
            var _this = this;
            this._selectBoxes.push(selectBox);
            d.append(this.wrapper, selectBox.wrapper);
            selectBox.on(basicCheckBox_1.BasicCheckBox.EVT_CHECK_BOX_CHANGE, function (ev) {
                _this.checkHandler(selectBox, ev);
            });
        };
        BasicBoxGroup.prototype.del = function (indexes) {
            var _this = this;
            tools.toArray(indexes).sort(function (a, b) {
                if (a > b) {
                    return -1;
                }
                else if (a < b) {
                    return 1;
                }
                else {
                    return 0;
                }
            }).forEach(function (index) {
                if (index in _this._selectBoxes) {
                    var selectBox = _this._selectBoxes.splice(index, 1)[0];
                    selectBox.destroy();
                }
            });
        };
        BasicBoxGroup.prototype.destroy = function () {
            this._selectBoxes.forEach(function (selectBox) { return selectBox.destroy(); });
            _super.prototype.destroy.call(this);
        };
        BasicBoxGroup.BTN_CHECKBOX_CLASS = 'selected-btn-box-wrapper';
        BasicBoxGroup.TAG_CHECKBOX_CLASS = 'selected-tag-wrapper';
        return BasicBoxGroup;
    }(ContainCom_1.ContainCom));
    exports.BasicBoxGroup = BasicBoxGroup;
    var RadioBoxGroup = /** @class */ (function (_super) {
        __extends(RadioBoxGroup, _super);
        function RadioBoxGroup(para) {
            var _this = _super.call(this, para) || this;
            _this.wrapper.classList.add('radio-box-wrapper');
            _this.name = para.name;
            return _this;
        }
        RadioBoxGroup.prototype.init = function (para) {
            this._selectBoxes[0] && (this._selectBoxes[0].checked = true);
            _super.prototype.init.call(this, para);
        };
        RadioBoxGroup.prototype.checkHandler = function (target, checked) {
            if (checked) {
                this._selectBoxes.forEach(function (box) {
                    if (box !== target) {
                        box.checked = false;
                    }
                });
                tools.isFunction(this.onSet) && this.onSet({
                    isChecked: checked,
                    index: this._selectBoxes.indexOf(target),
                    name: target.name
                });
            }
        };
        RadioBoxGroup.prototype.set = function (index) {
            _super.prototype.set.call(this, index, true);
        };
        Object.defineProperty(RadioBoxGroup.prototype, "name", {
            set: function (name) {
                if (tools.isNotEmpty(name)) {
                    this._selectBoxes.forEach(function (selectBox) { return selectBox.name = name; });
                }
            },
            enumerable: true,
            configurable: true
        });
        return RadioBoxGroup;
    }(BasicBoxGroup));
    exports.RadioBoxGroup = RadioBoxGroup;
    var CheckBoxGroup = /** @class */ (function (_super) {
        __extends(CheckBoxGroup, _super);
        function CheckBoxGroup(para) {
            var _this = _super.call(this, para) || this;
            _this.wrapper.classList.add('check-box-wrapper');
            return _this;
        }
        CheckBoxGroup.prototype.set = function (indexes, checked) {
            var _this = this;
            tools.toArray(indexes).forEach(function (index) {
                if (index in _this._selectBoxes) {
                    var selectBox = _this._selectBoxes[index];
                    selectBox && (selectBox.checked = checked);
                }
            });
        };
        CheckBoxGroup.prototype.setAll = function (checked) {
            this._selectBoxes.forEach(function (selectBox) { return selectBox.checked = checked; });
        };
        return CheckBoxGroup;
    }(BasicBoxGroup));
    exports.CheckBoxGroup = CheckBoxGroup;
});

/// <amd-module name="NewTagsInput"/>
define("NewTagsInput", ["require", "exports", "FormCom", "Modal"], function (require, exports, basic_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var NewTagsInput = /** @class */ (function (_super) {
        __extends(NewTagsInput, _super);
        function NewTagsInput(para) {
            var _this = _super.call(this, para) || this;
            _this.focusEvent = (function () {
                var handler = null;
                return {
                    on: function () {
                        d.on(_this.wrapper, 'click', handler = function () {
                            _this.input.focus();
                        });
                    },
                    off: function () {
                        d.off(_this.wrapper, 'click', handler);
                    }
                };
            })();
            _this.delEvent = (function () {
                var self = _this, handler;
                return {
                    on: function () {
                        d.on(_this.wrapper, 'click', '.tag-wrapper .remove', handler = function (e) {
                            e.preventDefault();
                            var label = d.closest(e.target, '.tag-wrapper'), data = d.data(label);
                            if (data) {
                                var index = self.items.indexOf(data);
                                if (index > -1) {
                                    self.delItem(index);
                                }
                            }
                        });
                    },
                    off: function () {
                        d.on(_this.wrapper, 'click', '.tag-wrapper .remove', handler);
                    }
                };
            })();
            _this.keyEvent = (function () {
                var isCreate = false, result, keyUpHandler, keyDownHandler;
                return {
                    on: function () {
                        d.on(_this.input, 'keydown', keyDownHandler = function (e) {
                            isCreate = false;
                            if (e.keyCode === 8 && _this.input.value === '') {
                                e.preventDefault();
                                _this.items.length > 0 && _this.delItem(_this.items.length - 1);
                                return false;
                            }
                            _this.input.size = _this.input.value.length + 1;
                            if (_this.confirmKeys.indexOf(e.key) > -1 || _this.confirmKeys.indexOf(e.keyCode) > -1) {
                                isCreate = true;
                                e.preventDefault();
                                // if(this.addItem(result)){
                                //     this.input.value = '';
                                //     this.input.size = 1;
                                //     isCreate = true;
                                // }else{
                                //     Modal.toast('长度超过限制，或已存在该标记！');
                                //     this.input.focus();
                                // }
                            }
                        });
                        d.on(_this.input, 'keyup', keyUpHandler = function (e) {
                            var _a;
                            // console.log(this.input.value);
                            if (isCreate) {
                                var value = _this.input.value.replace(/,/g, ''), result_1 = (_a = {},
                                    _a[_this.itemText] = value,
                                    _a[_this.itemValue] = value,
                                    _a);
                                if (value === '') {
                                    _this.input.value = '';
                                    _this.input.size = 1;
                                }
                                else if (_this.addItem(result_1)) {
                                    _this.input.value = '';
                                    _this.input.size = 1;
                                }
                                else {
                                    var tip = (_this.maxChars === -1 ? '' : '标签最大长度' + _this.maxChars + '；') +
                                        (_this.maxTags === -1 ? '' : '最多拥有' + _this.maxTags + '个标签；');
                                    Modal_1.Modal.toast(tip);
                                    _this.input.focus();
                                }
                            }
                        });
                    },
                    off: function () {
                        d.off(_this.input, 'keydown', keyDownHandler);
                        d.off(_this.input, 'keyup', keyUpHandler);
                    }
                };
            })();
            _this.items = [];
            _this.labels = [];
            _this._separator = para.separator || ',';
            _this._itemText = para.itemText || 'text';
            _this._itemValue = para.itemValue || 'value';
            _this._confirmKeys = tools.isEmpty(para.confirmKeys) ? [13, 188] : para.confirmKeys;
            _this._maxTags = tools.isEmpty(para.maxTags) ? -1 : para.maxTags;
            _this._maxChars = tools.isEmpty(para.maxChars) ? -1 : para.maxChars;
            _this._allowDuplicates = para.allowDuplicates || false;
            _this.keyEvent.on();
            _this.focusEvent.on();
            _this.delEvent.on();
            return _this;
        }
        NewTagsInput.prototype.wrapperInit = function (para) {
            return h("div", { className: "tags-input-wrapper" },
                h("div", { className: "tag-wrapper tag-input-wrapper" }, this.input = h("input", { className: "tag-input", type: "text", size: "1" })));
        };
        Object.defineProperty(NewTagsInput.prototype, "itemValue", {
            get: function () {
                return this._itemValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "itemText", {
            get: function () {
                return this._itemText;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "confirmKeys", {
            get: function () {
                return this._confirmKeys;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "separator", {
            get: function () {
                return this._separator;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "maxTags", {
            get: function () {
                return this._maxTags;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "maxChars", {
            get: function () {
                return this._maxChars;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewTagsInput.prototype, "allowDuplicates", {
            get: function () {
                return this._allowDuplicates;
            },
            enumerable: true,
            configurable: true
        });
        NewTagsInput.prototype.addItem = function (obj) {
            var _this = this;
            if (this.maxTags !== -1 && this.items.length >= this.maxTags) {
                return false;
            }
            if (this.maxChars !== -1 && obj[this.itemText] && obj[this.itemText].length > this.maxChars) {
                return false;
            }
            if (!this.allowDuplicates) {
                var index_1 = -1, isRepeat = this.items.some(function (item, i) {
                    var flag = item[_this.itemText] === obj[_this.itemText];
                    flag && (index_1 = i);
                    return flag;
                });
                if (isRepeat) {
                    this.labels[index_1].style.opacity = "0";
                    setTimeout(function () {
                        _this.labels[index_1].style.opacity = "1";
                    }, 300);
                    return true;
                }
            }
            this.items.push(obj);
            var label = NewTagsInput.initTagLabel(obj[this.itemText]);
            d.data(label, obj);
            d.before(this.input.parentElement, label);
            this.labels.push(label);
            return true;
        };
        NewTagsInput.prototype.delItem = function (index) {
            this.items.splice(index, 1);
            var label = this.labels.splice(index, 1)[0];
            d.remove(label);
        };
        NewTagsInput.prototype.get = function () {
            return this.value;
        };
        NewTagsInput.prototype.set = function (str) {
            this.value = str;
        };
        Object.defineProperty(NewTagsInput.prototype, "value", {
            get: function () {
                var _this = this;
                return this.items
                    ? this.items.map(function (item) { return item[_this.itemValue]; }).join(this.separator)
                    : '';
            },
            set: function (str) {
                var _this = this;
                while (this.labels[0]) {
                    this.delItem(0);
                }
                var items = str.split(this.separator).filter(function (item) {
                    if (_this.maxChars === -1) {
                        return true;
                    }
                    else {
                        return item.length <= _this.maxChars;
                    }
                }).map(function (item) {
                    var _a;
                    return _a = {},
                        _a[_this.itemValue] = item,
                        _a[_this.itemText] = item,
                        _a;
                });
                items.forEach(function (item) {
                    _this.addItem(item);
                });
            },
            enumerable: true,
            configurable: true
        });
        NewTagsInput.initTagLabel = function (text) {
            return h("div", { className: "tag-wrapper tag-label-wrapper" },
                h("span", { className: "tag-text" }, text),
                h("a", { className: "remove" },
                    h("i", { className: "sec seclesson-guanbi" })));
        };
        NewTagsInput.prototype.destroy = function () {
            this.keyEvent.off();
            this.focusEvent.off();
            this.delEvent.off();
            d.remove(this.input);
            this.labels.forEach(function (label) {
                d.remove(label);
            });
            this.input = null;
            this.items = null;
            this.labels = null;
            _super.prototype.destroy.call(this);
        };
        return NewTagsInput;
    }(basic_1.FormCom));
    exports.NewTagsInput = NewTagsInput;
});

define("TagsInput", ["require", "exports", "tagsInput", "FormCom"], function (require, exports, tagsInput, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var TagsInput = /** @class */ (function (_super) {
        __extends(TagsInput, _super);
        function TagsInput(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            _this.event = {};
            _this.comInit();
            return _this;
        }
        TagsInput.prototype.wrapperInit = function () {
            return h("input", null);
        };
        TagsInput.prototype.comInit = function () {
            // let tagsDom = tagsInput.get(0);
            var _this = this;
            require(['tagsInput'], function () {
                _this.com = $(_this.wrapper);
                _this.com.tagsinput({
                    tagClass: '',
                    itemText: 'text',
                    itemValue: 'value',
                    maxTags: _this.para.multi ? undefined : 1
                    //    confirmKeys: [13, 44]
                    //	freeInput : false
                });
                _this.initEvent();
                _this.set(_this._value);
                for (var name_1 in _this.event) {
                    _this.on(name_1, _this.event[name_1]);
                }
                _this.event = {};
            });
        };
        TagsInput.prototype.get = function () {
            return this.com ? this.com.tagsinput('items') : this._value;
        };
        TagsInput.prototype.set = function (data) {
            var _this = this;
            if (!data) {
                return;
            }
            this._value = data;
            if (!this.com) {
                return;
            }
            if (!tools.isFunction(this.para.ajax)) {
                data.split(this.para.sepValue).forEach(function (v) {
                    _this.com.tagsinput('add', { value: v, text: v });
                });
                return;
            }
            this.para.ajax(data).then(function (items) {
                items.forEach(function (item) {
                    _this.com.tagsinput('add', item);
                });
                typeof _this.onSet === 'function' && _this.onSet(data);
                _this.com.tagsinput('input').val('');
                // typeof callback === 'function' && callback(response);
            });
        };
        TagsInput.prototype.on = function (name, callback) {
            if (this.com) {
                this.com.on(name, callback);
            }
            else {
                this.event[name] = callback;
            }
        };
        TagsInput.prototype.initEvent = function () {
            if (!this.para.ajax) {
                return;
            }
            var self = this;
            this.com.tagsinput('input').on('keypress blur', function (e) {
                if (e.charCode === 13 || e.type === 'blur') {
                    var input = this;
                    var inputValue = input.value.trim().toUpperCase();
                    if (inputValue.length === 0) {
                        return;
                    }
                    self.set(inputValue);
                }
            });
        };
        Object.defineProperty(TagsInput.prototype, "value", {
            get: function () {
                return this.com ? this.com.tagsinput('items') : this._value;
            },
            set: function (val) {
                this.set(val);
            },
            enumerable: true,
            configurable: true
        });
        return TagsInput;
    }(basic_1.FormCom));
    exports.TagsInput = TagsInput;
});

define("TextInput", ["require", "exports", "FormCom", "ShellAction"], function (require, exports, basic_1, ShellAction_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="TextInput"/>
    var tools = G.tools;
    var d = G.d;
    var Shell = G.Shell;
    var TextInput = /** @class */ (function (_super) {
        __extends(TextInput, _super);
        function TextInput(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            _this.keyHandle = function (e) { };
            _this.props = para;
            var defaultPara = {
                className: '',
                placeholder: '',
                readonly: false,
                disabled: false
            };
            _this.para = Object.assign(defaultPara, para);
            _this.isReadonly = !!_this.para.readonly;
            // this.initInput();
            // this.initIcons();
            if (typeof para.iconHandle === 'function') {
                _this.initIconEven();
            }
            d.on(_this.input, 'change', function () {
                // debugger;
                _this.set(_this.get());
            });
            return _this;
        }
        TextInput.prototype.tabIndexElGet = function () {
            return this.input;
        };
        // /**
        //  * 初始化输入框
        //  * @return {HTMLInputElement}
        //  */
        // private initInput() {
        //     let div = document.createElement('div');
        //     div.classList.add('text-input');
        //     this._wrapper = div;
        //
        //     let input = document.createElement('input');
        //     input.type = (typeof this.para.type === 'undefined') ?  'text' :this.para.type;
        //
        //     input.className = this.para.className;
        //     input.placeholder = this.para.placeholder;
        //     input.readOnly = this.para.readonly;
        //     input.disabled = this.para.disabled;
        //
        //     this.input = input;
        //
        //     div.appendChild(input);
        // }
        /**
         * 初始化输入框按钮图标
         */
        // private initIcons(){
        //     let icons = this.para.icons;
        //
        //     if(icons && icons[0]){
        //         let iconGroup = <div class="btn-group">
        //             {icons.map((icon, i) => <a class={`btn btn-sm icon ${icon}`} data-index={i}></a>)}
        //         </div>;
        //
        //         this.input.style.width = `calc(100% - ${icons.length * 20}px)`;
        //
        //         this.wrapper.appendChild(iconGroup);
        //
        //         // 事件绑定
        //         if(typeof this.para.iconHandle === 'function'){
        //            this.initIconEven(iconGroup);
        //         }
        //         // console.log(iconGroup)
        //         this.iconGroup = iconGroup;
        //     }
        // }
        TextInput.prototype.initIconEven = function () {
            var self = this, can2dScan = Shell.inventory.can2dScan;
            this.iconGroup && d.on(this.iconGroup, 'click', 'a[data-index]', function (e) {
                var index = parseInt(this.dataset.index);
                if (this.dataset.type === 'scan' && !can2dScan) {
                    //扫码
                    (ShellAction_1.ShellAction.get()).device().scan({
                        callback: function (even) {
                            self.set(JSON.parse(even.detail).data);
                        }
                    });
                }
                else {
                    self.props.iconHandle(index, this);
                }
                e.stopPropagation();
            });
        };
        Object.defineProperty(TextInput.prototype, "isScan", {
            get: function () {
                return this._isScan;
            },
            set: function (flag) {
                var _this = this;
                if (!flag && this._scanEl) {
                    d.remove(this._scanEl);
                    this._scanEl = null;
                }
                if (!this._scanEl && flag) {
                    if (!this.iconGroup) {
                        this.iconGroup = h("div", { className: "btn-group" });
                        this.wrapper.appendChild(this.iconGroup);
                        this.initIconEven();
                    }
                    this._scanEl = h("a", { "data-index": "-1", class: "btn btn-sm icon iconfont icon-richscan_icon", "data-type": "scan" });
                    d.append(this.iconGroup, this._scanEl);
                    var can2dScan = Shell.inventory.can2dScan;
                    if (can2dScan) {
                        Shell.inventory.openScan(function (res) {
                            if (res.success && res.data !== 'openSuponScan') {
                                _this.set(res.data);
                                if (tools.isFunction(_this.para.on2dScan)) {
                                    _this.para.on2dScan(res.data);
                                }
                            }
                        });
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 事件绑定
         * @param type - HTMLInputElement 原生事件
         * @param handle - 事件处理
         */
        TextInput.prototype.on = function (type, handle) {
            d.on(this.input, type, handle);
        };
        TextInput.prototype.get = function () {
            return this.input ? this.input.value : '';
        };
        TextInput.prototype.set = function (str) {
            this.input.value = tools.str.toEmpty(str);
            typeof this.onSet === 'function' && this.onSet(str);
        };
        TextInput.prototype.readonly = function (is) {
            if (typeof is === 'undefined') {
                return this.isReadonly;
            }
            else {
                this.input.readOnly = is;
                return is;
            }
        };
        TextInput.prototype.placeholder = function (str) {
            this.input.placeholder = str;
        };
        TextInput.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.input = null;
            this.para = null;
        };
        // wrapperGet(){
        //     return this._wrapper;
        // }
        TextInput.prototype.focus = function () {
            this.input.focus();
        };
        Object.defineProperty(TextInput.prototype, "value", {
            get: function () {
                return this.input.value;
            },
            set: function (str) {
                this.input.value = tools.str.toEmpty(str);
                typeof this.onSet === 'function' && this.onSet(str);
            },
            enumerable: true,
            configurable: true
        });
        TextInput.prototype.wrapperInit = function (para) {
            if (para === void 0) { para = {}; }
            var icons = para.icons, isNotEmptyIcons = tools.isNotEmptyArray(icons);
            return h("div", { className: "text-input" },
                this.input =
                    h("input", { type: typeof para.type === 'undefined' ? 'text' : para.type, placeholder: para.placeholder || '', readOnly: !!para.readonly, disabled: !!para.disabled, style: isNotEmptyIcons ? { width: "calc(100% - " + icons.length * 20 + "px)" } : null }),
                isNotEmptyIcons ?
                    (this.iconGroup = h("div", { className: "btn-group" }, icons.map(function (icon, i) { return h("a", { className: "btn btn-sm icon " + icon, "data-index": i }); })))
                    : null);
        };
        return TextInput;
    }(basic_1.FormCom));
    exports.TextInput = TextInput;
});

define("TextInput1", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var TextInput1 = /** @class */ (function (_super) {
        __extends(TextInput1, _super);
        function TextInput1(para) {
            var _this = _super.call(this, para) || this;
            _this.placeholder = para.placeholder;
            _this.type = para.type || 'text';
            _this.readonly = para.readonly;
            _this.label = para.label;
            _this.value = para.value;
            _this.labelWidth = para.labelWidth;
            _this.inputIcon = para.inputIcon;
            return _this;
            // this.wrapper = this.wrapperInit(this._wrapper);
        }
        TextInput1.prototype.wrapperInit = function (para) {
            var text = d.create({ tag: 'div', props: { className: 'text-input1' } });
            // d.append(text, this.labelEl);
            if (this.labelWidth) {
                text.appendChild(this.labelEl);
            }
            this.inputWrapper.appendChild(this.inputEl);
            text.appendChild(this.inputWrapper);
            return text;
        };
        Object.defineProperty(TextInput1.prototype, "inputIcon", {
            get: function () {
                return this._inputIcon;
            },
            set: function (str) {
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "inputWrapper", {
            get: function () {
                if (!this._inputWrapper) {
                    this._inputWrapper = h("div", { className: "input-wrapper" });
                }
                return this._inputWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "labelEl", {
            get: function () {
                if (!this._labelEl && this.labelWidth !== 0) {
                    // debugger;
                    this._labelEl = h("label", null);
                }
                return this._labelEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "label", {
            get: function () {
                return this._label;
            },
            set: function (str) {
                this._label = str;
                this.labelEl.innerHTML = str;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "labelWidth", {
            get: function () {
                return this._labelWidth;
            },
            set: function (value) {
                var parentWidth = this.wrapper.offsetWidth;
                var percent = 5 / parentWidth + 1.8 + '%';
                // let rightValue = parseInt(this.labelEl.style.width = 'calc()');
                if (typeof value === 'string') {
                    this._labelWidth = value;
                    this.labelEl.style.width = value;
                    this.inputWrapper.style.width = "calc(100% - " + value + ")";
                }
                else if (typeof value === 'number' && value >= 0) {
                    this._labelWidth = value + 'px';
                    this.labelEl.style.width = value + 'px';
                    this.inputWrapper.style.width = "calc(100% - " + value + "px)";
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "inputEl", {
            get: function () {
                if (!this._inputEL) {
                    this._inputEL = h("input", { type: "text" });
                }
                return this._inputEL;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (str) {
                var types = ['text', 'button', 'checkbox', 'password', 'radio', 'image', 'reset', 'file', 'submit', 'textarea'], type = types.indexOf(str) > -1 ? str : types[0];
                this.inputEl.type = this._type = type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "placeholder", {
            get: function () {
                return this._placeholder;
            },
            set: function (str) {
                if (str && typeof str === 'string') {
                    this._placeholder = str;
                    this.inputEl.placeholder = str;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "readonly", {
            get: function () {
                return this._readonly;
            },
            set: function (readValue) {
                this.inputEl.readOnly = readValue;
                this._readonly = readValue;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextInput1.prototype, "value", {
            get: function () {
                // return this.value;
                return this.inputEl.value;
            },
            set: function (val) {
                // this.value = val;
                // this.inputEl.innerHTML = val;\
                if (tools.isNotEmpty(val)) {
                    this.inputEl.value = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        TextInput1.prototype.rightIconAdd = function (icon) {
        };
        TextInput1.prototype.rightIconDel = function (index) {
        };
        TextInput1.prototype.get = function () {
        };
        TextInput1.prototype.set = function () {
            var any = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                any[_i] = arguments[_i];
            }
        };
        return TextInput1;
    }(basic_1.FormCom));
    exports.TextInput1 = TextInput1;
    var TextAreaInput = /** @class */ (function (_super) {
        __extends(TextAreaInput, _super);
        function TextAreaInput(para) {
            var _this = _super.call(this, para) || this;
            _this.value = para.value;
            return _this;
        }
        TextAreaInput.prototype.wrapperInit = function (para) {
            this.textarea = h("textarea", { className: "textarea-input", placeholder: para.placeholder });
            return this.textarea;
        };
        Object.defineProperty(TextAreaInput.prototype, "value", {
            get: function () {
                // return this.value;
                return this.textarea.value;
            },
            set: function (val) {
                // this.value = val;
                // this.inputEl.innerHTML = val;\
                if (tools.isNotEmpty(val)) {
                    this.textarea.value = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TextAreaInput.prototype, "disabled", {
            set: function (disabled) {
                this.textarea.disabled = disabled;
                this.wrapper.classList.toggle('disabled', disabled);
            },
            enumerable: true,
            configurable: true
        });
        TextAreaInput.prototype.get = function () {
            return this.value;
        };
        TextAreaInput.prototype.set = function (any) {
            this.value = any;
        };
        return TextAreaInput;
    }(basic_1.FormCom));
    exports.TextAreaInput = TextAreaInput;
});

define("Button", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Button"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    /**
     * 按钮组件对象
     */
    var Button = /** @class */ (function (_super) {
        __extends(Button, _super);
        function Button(button) {
            var _this = _super.call(this, button) || this;
            _this.button = button;
            if (tools.isEmpty(button)) {
                button = {};
            }
            _this.init(button);
            return _this;
        }
        Button.prototype.init = function (button) {
            // if(button.className){
            //     this.wrapper.classList.add(button.className);
            // }
            this.iconPre = button.iconPre || 'iconfont';
            this.isLoading = button.isLoading;
            this.key = button.key;
            this.icon = button.icon;
            this.content = button.content;
            this.isShow = button.isShow;
            this.onClick = button.onClick;
            this.isDisabled = button.isDisabled;
            this.type = button.type;
            this.color = button.color;
            this.size = button.size;
            this.dropDown = button.dropDown;
        };
        Button.prototype.wrapperInit = function () {
            return h("button", { type: "button", className: "btn" });
        };
        Object.defineProperty(Button.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (icon) {
                if (tools.isEmpty(icon) || (tools.isNotEmpty(icon) && this._icon === icon)) {
                    return;
                }
                //移除原有icon
                this.iconEl && this._iconEl.parentElement.removeChild(this._iconEl);
                var iconStr = this.iconPre === 'iconfont' ? "icon-" + icon : icon, className = this.iconPre + " button-icon " + iconStr;
                if (icon === 'spinner' && this._isLoading) {
                    className = 'spinner';
                }
                this._iconEl = h("i", { className: className });
                d.prepend(this.wrapper, this._iconEl);
                this._icon = icon;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "iconEl", {
            get: function () {
                if (!this._iconEl) {
                    this._iconEl = d.query('i', this.wrapper);
                }
                return this._iconEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (color) {
                if (tools.isEmpty(color)) {
                    return;
                }
                this.wrapper.classList.remove("button-" + this._color);
                this.wrapper.classList.add("button-" + color);
                this._color = color;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "type", {
            get: function () {
                return this._type;
            },
            set: function (type) {
                //若已经初始化过按钮类型，则删除之前添加的样式
                if (this._type) {
                    this.wrapper.classList.remove("button-type-" + this._type);
                }
                this._type = tools.isEmpty(type) ? 'default' : type;
                this.wrapper.classList.add("button-type-" + this._type);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                content = tools.isEmpty(content) ? (tools.isEmpty(this._icon) ? '操作' : '') : content;
                if (!tools.isEmpty(content)) {
                    var contentWrapper = d.query('span', this.wrapper);
                    //不存在则创建容器存放之(放在容器的第一个节点处)
                    if (!contentWrapper) {
                        contentWrapper = h("span", null, content);
                        this.wrapper.appendChild(contentWrapper);
                    }
                    //存在则替换原来的content
                    else {
                        contentWrapper.innerHTML = content;
                    }
                    this._content = content;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "dropDown", {
            get: function () {
                return this._dropDown;
            },
            set: function (dropDown) {
                if (!tools.isEmpty(dropDown)) {
                    var pos = h("span", { className: "iconfont icon-expanse iconPos" });
                    this.wrapper.classList.add('dropdown-toggle');
                    this.wrapper.appendChild(pos);
                    this.onClick = function () {
                        dropDown.toggle();
                    };
                }
                // else {
                //     let pos = d.query(`<span class="iconPos"></span>`,this.wrapper);
                //     if(pos) {
                //         d.remove(pos);
                //     }
                //     if(this._dropDown) {
                //         this.onClick = ()=>{};
                //     }
                // }
                this._dropDown = dropDown;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (size) {
                size = tools.isEmpty(size) ? 'middle' : size;
                //若已经初始化过按钮尺寸，则删除之前添加的样式
                if (this._size) {
                    this.wrapper.classList.remove("button-" + this._size);
                }
                if (size) {
                    this.wrapper.classList.add("button-" + size);
                    this._size = size;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isDisabled", {
            get: function () {
                return this._isDisabled;
            },
            set: function (isDisabled) {
                if (isDisabled)
                    this.wrapper.classList.add('disabled');
                else
                    this.wrapper.classList.remove('disabled');
                this._isDisabled = tools.isEmpty(isDisabled) ? false : isDisabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isLoading", {
            get: function () {
                return this._isLoading;
            },
            set: function (isLoading) {
                this._isLoading = tools.isEmpty(isLoading) ? false : isLoading;
                if (this._isLoading) {
                    this.icon = 'spinner';
                }
                else {
                    //移除原有icon
                    this.iconEl && d.remove(this._iconEl);
                    this._icon = null;
                    this._iconEl = null;
                }
                this._isLoading = isLoading;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                this._isShow = tools.isEmpty(isShow) ? true : isShow;
                d.classToggle(this.wrapper, 'hide', !this._isShow);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Button.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (callback) {
                if (!tools.isEmpty(callback)) {
                    d.off(this.wrapper, 'click', this._onClick);
                    this._onClick = function (e) {
                        e && e.stopPropagation();
                        callback.call(this, e);
                    };
                    d.on(this.wrapper, 'click', this._onClick);
                }
            },
            enumerable: true,
            configurable: true
        });
        Button.prototype.getDom = function () {
            return this.wrapper;
        };
        return Button;
    }(Component));
    exports.Button = Button;
});

define("InputBox", ["require", "exports", "Button", "DropDown"], function (require, exports, Button_1, dropdown_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="InputBox"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    /**
     * 组件集合对象
     */
    var InputBox = /** @class */ (function (_super) {
        __extends(InputBox, _super);
        function InputBox(inputBox) {
            if (inputBox === void 0) { inputBox = {}; }
            var _this = _super.call(this, inputBox) || this;
            _this.init(inputBox);
            return _this;
        }
        InputBox.prototype.wrapperInit = function () {
            return d.create("<div class=\"input-box\"></div>");
        };
        InputBox.prototype.init = function (inputBox) {
            // debugger;
            this.limitCount = inputBox.limitCount || 4;
            this.isVertical = !!inputBox.isVertical;
            this.wrapper.classList.add(this.isVertical ? 'input-box-vertical' : 'input-box-horizontal');
            this.children = inputBox.children;
            this._lastNotMoreIndex = -1;
            this.size = inputBox.size;
            this.compactWidth = inputBox.compactWidth;
            this.isResponsive = inputBox.isResponsive;
            this.moreBtn = inputBox.moreBtn;
            this.shape = inputBox.shape;
            // this.container = inputBox.container;
            // this.container.appendChild(this.wrapper);
            this.responsive();
        };
        Object.defineProperty(InputBox.prototype, "children", {
            get: function () {
                return this._children;
            },
            set: function (children) {
                this._children = tools.isEmpty(children) ? [] : children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputBox.prototype, "shape", {
            get: function () {
                return this._shape;
            },
            set: function (shape) {
                if (tools.isEmpty(shape)) {
                    return;
                }
                if (shape === 'circle') {
                    this.wrapper.classList.add('input-box-circle');
                }
                else {
                    this.wrapper.classList.remove('input-box-circle');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputBox.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (size) {
                if (this._size) {
                    this.wrapper.classList.remove("input-box-" + this._size);
                }
                size = tools.isEmpty(size) ? 'small' : size;
                switch (size) {
                    case 'small':
                        this.wrapper.classList.add('input-box-small');
                        break;
                    case 'middle':
                        this.wrapper.classList.add('input-box-middle');
                        break;
                    case 'large':
                        this.wrapper.classList.add('input-box-large');
                        break;
                }
                this._size = size;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputBox.prototype, "compactWidth", {
            get: function () {
                return this._compactWidth;
            },
            set: function (compactWidth) {
                if (compactWidth > 0) {
                    this.wrapper.classList.remove('compact');
                }
                else {
                    this.wrapper.classList.add('compact');
                }
                this.responsive();
                // compactWidth = tools.isEmpty(compactWidth) ? 0 : compactWidth;
                //
                // if (compactWidth > 0) {
                //     this.wrapper.classList.remove('not-compact');
                //     let count = 0;
                //     for (let d of this.children) {
                //         if (count === 0) {
                //             count++;
                //             continue;
                //         }
                //         if (count > this._lastNotMoreIndex && this._lastNotMoreIndex > 0) {
                //             break;
                //         }
                //         let comKey = Object.keys(d)[0],
                //             com = d[comKey],
                //             marginWidth = 0;
                //         if (com) {
                //             marginWidth = parseInt(getComputedStyle(com._wrapper)['margin-left']) > 0 ? parseInt(getComputedStyle(com._wrapper)['margin-left']) : 0;
                //             com._wrapper.style.marginLeft = compactWidth + 'px';
                //         }
                //         this.wrapper.style.width = parseInt(this.wrapper.style.width) + compactWidth - marginWidth + 'px';
                //         if (parseInt(this.wrapper.style.width) > this._maxWidth) {
                //             let guid = Object.keys(this.children[this._lastNotMoreIndex])[0],
                //                 lastCom = this.children[this._lastNotMoreIndex][guid],
                //                 lastMargin = 0;
                //             if (lastCom) {
                //                 lastMargin = parseInt(getComputedStyle(lastCom._wrapper)['margin-left']) > 0 ? parseInt(getComputedStyle(lastCom._wrapper)['margin-left']) : 0;
                //                 if (this._compactWidth && this._lastNotMoreIndex > -1) {
                //                     lastCom._wrapper.style.marginLeft = 0 + 'px';
                //                 }
                //                 //仅从dom结构上改变了组件，并未改变组件的container属性
                //                 if (this._dropDown) {
                //                     this._dropDown.getUlDom().insertBefore(lastCom._wrapper, this._dropDown.getUlDom().firstChild);
                //                 }
                //                 this.wrapper.style.width = parseInt(this.wrapper.style.width) - parseInt(getComputedStyle(lastCom._wrapper)['width']) + 5 + 'px';
                //                 this._lastNotMoreIndex -= 1;
                //             }
                //         }
                //         count++;
                //     }
                // }
                // else {
                //     this.wrapper.classList.add('not-compact');
                //     // if(this._compactWidth > 0) { }
                // }
                this._compactWidth = compactWidth;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputBox.prototype, "moreBtn", {
            get: function () {
                return this._moreBtn;
            },
            set: function (moreBtn) {
                if (this._isResponsive) {
                    this._moreBtn = moreBtn;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputBox.prototype, "isResponsive", {
            get: function () {
                return this._isResponsive;
            },
            set: function (isResponsive) {
                this._isResponsive = tools.isEmpty(isResponsive) ? false : isResponsive;
            },
            enumerable: true,
            configurable: true
        });
        // 【待改...】
        InputBox.prototype.responsive = function () {
            if (!this.isResponsive) {
                return;
            }
            //如果获取不到父容器宽度，则无响应式
            // let paWidth = parseInt(getComputedStyle(<HTMLElement>this._container)['width']);
            // console.log('paWidth:',paWidth);
            // if (paWidth < 1) {
            //     return;
            // }
            //如果当前组件集合宽度 > 父容器宽度
            // if (parseInt(this.wrapper.style.width) > paWidth && this.children.length > 0) {
            if (this.children.length > this.limitCount) {
                //判断是否有更多下拉列表
                tools.isEmpty(this._moreBtn) && (this._moreBtn = new Button_1.Button({
                    content: '更多',
                    size: this._size,
                }));
                //不存在更多下拉列表，则生成更多下拉列表
                if (!this._moreBtn || !this._moreBtn.dropDown) {
                    this.wrapper.appendChild(this.moreBtn.wrapper);
                    // this.wrapper.style.width = parseInt(this.wrapper.style.width) + parseInt(getComputedStyle(this._moreBtn.wrapper)['width']) + 'px';
                    // console.log('更多：',parseInt(getComputedStyle(this._moreBtn.wrapper)['width']));
                    var self_1 = this;
                    this.moreBtn.dropDown = new dropdown_1.DropDown({
                        el: self_1.moreBtn.wrapper,
                        inline: false,
                        data: [],
                        multi: null,
                        className: "input-box-morebtn"
                    });
                }
                //从组件集合末尾倒序调整
                var len = this.children.length;
                for (var i = len - 1; i >= this.limitCount - 1; i--) {
                    //当组件集合宽度超过限制的最大宽度时，将最后一个非更多下拉列表内的组件放置于更多下拉列表容器内（插入到其第一个子元素之前）
                    // if (parseInt(this.wrapper.style.width) > paWidth) {
                    var com = this.children[i];
                    if (com) {
                        if (this._compactWidth && i > -1) {
                            com.wrapper.style.marginLeft = 0 + 'px';
                        }
                        // this.wrapper.style.width = parseInt(this.wrapper.style.width) - parseInt(getComputedStyle(com.wrapper)['width']) + 5 + 'px';
                        //仅从dom结构上改变了组件，并未改变组件的container属性
                        if (this.moreBtn.dropDown) {
                            this.moreBtn.dropDown.getUlDom().appendChild(com.wrapper);
                        }
                        this._lastNotMoreIndex = i;
                    }
                    // }
                }
            }
            // setTimeout(() => {
            // debugger;
            var width = 10;
            for (var i = 0; i < this.limitCount; i++) {
                var child = this.wrapper.children[i];
                if (child) {
                    width += child.offsetWidth;
                }
            }
            this.wrapper.style.width = width + 'px';
            // }, 500);
        };
        /*
        *  将组件添加到组件集合
        *  参数：com:组件
        * */
        InputBox.prototype.addItem = function (com, position) {
            if (!com) {
                return;
            }
            if (typeof position === 'number') {
                position = Math.max(0, position);
                position = position >= this.children.length ? void 0 : position;
            }
            com.size = this._size;
            //将组件元素添加进组件集合容器（仅改变dom）,如果存在更多按钮下拉列表，则将组件插入到更多按钮之前。
            if (this._moreBtn && this._moreBtn.dropDown) {
                this.wrapper.insertBefore(com.wrapper, this.wrapper.lastChild);
            }
            else {
                if (typeof position === 'number') {
                    d.before(this.wrapper.children[position], com.wrapper);
                }
                else {
                    this.wrapper.appendChild(com.wrapper);
                }
            }
            //添加至组件集合children
            if (typeof position === 'number') {
                this.children.splice(position, 0, com);
            }
            else {
                this.children.push(com);
            }
            //水平
            // if (this.inputBox && !this.inputBox.isVertical && this.isResponsive) {
            if (!this.isVertical && this.isResponsive) {
                //第一个组件元素
                if (this.wrapper.children.length < 2) {
                    this.wrapper.style.width = com.wrapper.clientWidth + 2 + 'px';
                }
                else {
                    this.wrapper.style.width = parseInt(this.wrapper.style.width) + com.wrapper.clientWidth + 2 + 'px';
                }
                this.responsive();
            }
        };
        /*
        * 获取组件集合
        * 参数：number | string | void
        * number：按照组件集合的下标获取组件（下标由添加时决定,从0起）  |  string： 根据组件集合的键获取组件
        * */
        InputBox.prototype.getItem = function (item) {
            if (!this.children || !this.children[0]) {
                return null;
            }
            if (typeof item === 'number') {
                return this.children[item];
            }
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var d_1 = _a[_i];
                if (d_1.key === item) {
                    return d_1;
                }
            }
            return null;
        };
        /*
        * 删除组件集合
        * 参数：number | string
        * number：按照组件集合的下标删除组件（下标由添加时决定,从0起）  |  string： 根据组件集合的键删除组件
        * 返回值：返回被删除的组件，若未找到要删除的组件则返回null
        * */
        InputBox.prototype.delItem = function (item) {
            if (!this.children || !this.children[0]) {
                return null;
            }
            if (typeof item === 'number') {
                var curCom = this.children[item];
                if (curCom) {
                    this.children[item].remove();
                    this.children.splice(item, 1);
                }
                return curCom;
            }
            var index = 0;
            for (var _i = 0, _a = this.children; _i < _a.length; _i++) {
                var d_2 = _a[_i];
                if (d_2.key === item) {
                    var curCom = d_2;
                    if (d_2) {
                        this.children.splice(index, 1);
                        d_2.remove();
                    }
                    return curCom;
                }
                index++;
            }
            return null;
        };
        Object.defineProperty(InputBox.prototype, "isShow", {
            /*
            * 根据窗口变化改变限制的最大宽度
            * */
            // private resizeHandler() {
            //     /**/let timer = null;
            /*d.on(window, 'resize', () => {
                if (timer === null) {
                    timer = setTimeout(() => {
                        this.responsive();
                        timer = null;
                    }, 1000);
                }
            });*/
            // }
            set: function (flag) {
                d.hide(this.wrapper, !flag);
            },
            enumerable: true,
            configurable: true
        });
        return InputBox;
    }(Component));
    exports.InputBox = InputBox;
});

/// <amd-module name="ElementTreeNode"/>
define("ElementTreeNode", ["require", "exports", "TreeNodeBase"], function (require, exports, TreeNodeBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var ElementTreeNode = /** @class */ (function (_super) {
        __extends(ElementTreeNode, _super);
        function ElementTreeNode() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._onSelect = null;
            _this._onExpand = null;
            return _this;
        }
        ElementTreeNode.prototype.init = function (para) {
            _super.prototype.init.call(this, para);
            this.expandIconArr = para.expandIconArr;
            this.expandIconPre = para.expandIconPre;
            this.isVirtualSet(para.isVirtual === undefined ? !this.parent : para.isVirtual);
            this.isLeaf = para.isLeaf === undefined ? tools.isEmpty(para.children) : para.isLeaf; // 默认判断是否有子节点
            this.ajax = para.ajax;
            this.expand = para.expand; //如果该节点为虚拟节点,则默认将该节点展开
            // debugger;
            this.text = para.text;
            this.isAccordion = para.isAccordion;
            this.multiSelect = para.multiSelect === undefined ? this.inherit('_multiSelect') : para.multiSelect;
            this.selected = para.selected;
            this.icon = para.icon;
            this.disabled = para.disabled;
        };
        Object.defineProperty(ElementTreeNode.prototype, "expandIconArr", {
            get: function () {
                return this._expandIconArr;
            },
            set: function (arr) {
                this._expandIconArr = arr;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "expandIconPre", {
            get: function () {
                return this._expandIconPre;
            },
            set: function (pre) {
                this._expandIconPre = pre;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "ajax", {
            get: function () {
                return this.inherit('_ajax');
            },
            set: function (fun) {
                this._ajax = fun;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "textWrapper", {
            get: function () {
                return this.textEl && this.textEl.parentElement;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "expandIconEl", {
            get: function () {
                if (!this._expandIconEl) {
                    var pre = tools.isNotEmpty(this.expandIconPre) ? this.expandIconPre : 'iconfont';
                    this._expandIconEl = d.create("<i class=\"" + pre + " " + this.getCurrentExpandIcon() + " tree-open-icon\"></i>");
                    d.prepend(this.textWrapper, this._expandIconEl);
                }
                return this._expandIconEl;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.expandIconElShow = function () {
            this.expandIconEl.classList.remove('invisible');
        };
        ElementTreeNode.prototype.expandIconElHide = function () {
            this.expandIconEl.classList.add('invisible');
        };
        Object.defineProperty(ElementTreeNode.prototype, "isLeaf", {
            get: function () {
                return this._isLeaf || false;
            },
            set: function (flag) {
                // if(flag === undefined) {
                //     flag = tools.isEmpty(this.childrenGet());
                // }
                flag = !!flag;
                if (this._isLeaf === flag) {
                    return;
                }
                this._isLeaf = flag;
                if (flag) {
                    this.expandIconElHide();
                }
                else {
                    this.expandIconElShow();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "childrenEl", {
            get: function () {
                if (!this._childrenEl) {
                    this._childrenEl = d.query('[data-role="children"]', this.wrapper);
                }
                return this._childrenEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "textEl", {
            get: function () {
                if (!this._textEl) {
                    this._textEl = d.query('[data-role="text"]', this.wrapper);
                }
                return this._textEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "iconEl", {
            get: function () {
                if (!this._iconEl) {
                    this._iconEl = d.create('<i class="tree-icon" data-role="icon"></i>');
                    d.before(this.textEl, this._iconEl);
                    // = d.query('[data-role="icon"]', this.wrapper);
                }
                return this._iconEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "isVirtual", {
            get: function () {
                // debugger;
                // if (this._isVirtual === undefined) {
                //     this.isVirtualSet(!this.parentGet());
                // }
                return this._isVirtual;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.isVirtualSet = function (flag) {
            this.wrapper.classList.toggle('tree-virtual', flag);
            this._isVirtual = flag;
        };
        Object.defineProperty(ElementTreeNode.prototype, "container", {
            get: function () {
                return this._container;
            },
            set: function (el) {
                this._container = el;
                d.append(el, this.wrapper);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                this._disabled = !!disabled;
                this.wrapper.classList.toggle('disabled', this._disabled);
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.childrenAdd = function (para) {
            tools.toArray(para).forEach(function (p) {
                if (!(p instanceof ElementTreeNode) && tools.isNotEmpty(p)) {
                    p.isVirtual = false;
                }
            });
            return _super.prototype.childrenAdd.call(this, para);
        };
        ElementTreeNode.prototype.childrenRemove = function (tnode) {
            _super.prototype.childrenRemove.call(this, tnode);
            tools.toArray(tnode).forEach(function (node) {
                node.destroy();
            });
        };
        Object.defineProperty(ElementTreeNode.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                if (selected === this._selected) {
                    return;
                }
                if (!this.multiSelect && selected) {
                    var selectedNodes = this.getSelectedNodes(true);
                    Array.isArray(selectedNodes) && selectedNodes.forEach(function (node) {
                        node.wrapper.classList.remove('selected');
                        node._selected = false;
                    });
                }
                this._selected = !!selected;
                this.wrapper.classList.toggle('selected', this._selected);
                this.onSelect && this.onSelect(this);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "onSelect", {
            get: function () {
                return this.inherit('_onSelect');
            },
            set: function (handler) {
                this._onSelect = handler;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.expandIcon = function () {
            var iconArr = tools.isNotEmpty(this.expandIconArr) ? this.expandIconArr : ['icon-zhankaishousuo-shousuo', 'icon-zhankaishousuo-zhankai'];
            return iconArr;
        };
        Object.defineProperty(ElementTreeNode.prototype, "expand", {
            get: function () {
                return this._expand;
            },
            set: function (expand) {
                var _this = this;
                // console.trace();
                if (this.isLeaf || expand == this._expand) {
                    return;
                }
                //如果顶部菜单与子菜单的模式为纵向则需要修改当前打开按钮的样式 此处用expandIcon数量判断
                var expandIcon = this.expandIcon();
                if (expandIcon.length !== 1 && this.expandIconEl) {
                    this.expandIconEl.classList.add(expand ? expandIcon[1] : expandIcon[0]);
                    this.expandIconEl.classList.remove(expand ? expandIcon[0] : expandIcon[1]);
                }
                //如果为手风琴并且为打开状态，关闭同级节点,
                if (this.parent && this.parent.isAccordion && expand) {
                    var sibs = this.siblings;
                    sibs && sibs.forEach(function (node) {
                        node.expand && (node.expand = false);
                    });
                }
                this._expand = expand;
                setTimeout(function () {
                    // 当满足树的状态为打开 并且没有disabled类是动态加载数据，判断是否包含disabled目的是为了防止在加载过程中再次触发
                    var isAjax = _this.ajax && !_this.disabled && expand && tools.isEmpty(_this.children);
                    Promise.resolve((function () {
                        if (isAjax) {
                            _this.childrenEl.classList.add('hide');
                            return _this.doAjax().then(function () {
                                // 动画效果,所以延时
                                setTimeout(function () {
                                    _this.childrenEl.classList.remove('hide');
                                }, 50);
                            });
                        }
                    })()).then(function () {
                        _this.childrenEl.classList.toggle('hide', !_this._expand);
                        _this.onExpand && _this.onExpand(_this, _this._expand);
                    });
                }, 10);
                // this.childrenEl.classList.toggle('hide', !this._expand);
                //
                // setTimeout(() => {
                //     //当满足树的状态为打开 并且没有disabled类是动态加载数据，判断是否包含disabled目的是为了防止在加载过程中再次触发
                //     if (!this.disabled && expand && tools.isEmpty(this.children) && this.ajax) {
                //         this.childrenEl.classList.add('hide');
                //         this.doAjax().then(() => {
                //
                //             // 动画效果,所以延时
                //             setTimeout(() => {
                //                 this.childrenEl.classList.remove('hide');
                //             }, 50);
                //         }).catch(() => {
                //             this.expand = false;
                //         });
                //     }
                // }, 10);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "onExpand", {
            get: function () {
                return this.inherit('_onExpand');
            },
            set: function (handler) {
                this._onExpand = handler;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                this._text = tools.str.toEmpty(text);
                this.textEl.innerHTML = this._text;
                this.textWrapper.title = this._text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (icon) {
                var _a, _b;
                if (icon) {
                    if (typeof icon === 'string') {
                        (_a = this.iconEl.classList).add.apply(_a, icon.split(' '));
                        // !this._icon && this.iconEl.classList.add('tree-icon');
                        this._icon = icon;
                    }
                }
                else {
                    this._icon && (_b = this.iconEl.classList).remove.apply(_b, this._icon.split(' '));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "isAccordion", {
            get: function () {
                return this._isAccordion;
            },
            set: function (isAccordion) {
                this._isAccordion = !!isAccordion;
                if (this._isAccordion) {
                    var children = this.children, firstExpand_1 = false;
                    Array.isArray(children) && children.forEach(function (child) {
                        if (child.expand) {
                            if (!firstExpand_1) {
                                firstExpand_1 = true;
                            }
                            else {
                                child.expand = false;
                            }
                        }
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "multiSelect", {
            get: function () {
                return this._multiSelect;
            },
            set: function (multi) {
                this._multiSelect = !!multi;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ElementTreeNode.prototype, "onOpen", {
            get: function () {
                return this.inherit('_onOpen');
            },
            set: function (cb) {
                this._onOpen = cb;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.doAjax = function () {
            var _this = this;
            var _a;
            this.disabled = true;
            var openIcon = this.expandIconEl, spinnerIconName = ['tree-rotate-icon', 'icon-shuaxin'], currentExpandIcon = this.getCurrentExpandIcon();
            openIcon && openIcon.classList.remove(currentExpandIcon);
            openIcon && (_a = openIcon.classList).add.apply(_a, spinnerIconName);
            var callback = function (para) {
                var _a;
                // debugger;
                if (tools.isNotEmpty(para)) {
                    _this.childrenSet(para);
                }
                if (tools.isNotEmpty(_this.children)) {
                    openIcon && openIcon.classList.add(currentExpandIcon);
                }
                openIcon && (_a = openIcon.classList).remove.apply(_a, spinnerIconName);
                _this.disabled = false;
            };
            return new Promise(function (resolve, reject) {
                if (_this.ajax) {
                    _this.ajax(_this).then(function (para) {
                        // debugger;
                        callback(para);
                        resolve();
                    }).catch(function () {
                        callback(null);
                        reject();
                    });
                }
                else {
                    callback(null);
                    reject();
                }
            });
        };
        ElementTreeNode.prototype.refresh = function () {
            if (!this.ajax && this.isLeaf) {
                return;
            }
            this.expand = false;
            this.childrenRemove(this.children);
            this.expand = true;
        };
        Object.defineProperty(ElementTreeNode.prototype, "wrapper", {
            get: function () {
                if (!this._wrapper) {
                    this._wrapper = this.wrapperCreate();
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.wrapperCreate = function () {
            return d.create("<div class=\"element-tree-node\">\n                <div class=\"tree-text-wrapper\">\n                    <span data-role=\"text\" class=\"tree-text\"></span>\n                </div>\n                <div data-role=\"children\" class=\"tree-child-wrapper hide\"></div>\n            </div>");
        };
        ElementTreeNode.prototype.getSelectedNodes = function (fromRoot) {
            if (fromRoot === void 0) { fromRoot = false; }
            var root = fromRoot ? this.root : this;
            return root.find(function (node) {
                return node._selected;
            });
        };
        Object.defineProperty(ElementTreeNode.prototype, "isOnTop", {
            get: function () {
                var parent = this.parent;
                return (!!parent && parent.isVirtual) || !parent;
            },
            enumerable: true,
            configurable: true
        });
        ElementTreeNode.prototype.getCurrentExpandIcon = function () {
            // if(this.isLeaf){
            //     return '';
            // } else {
            var expandIcon = this.expandIcon();
            if (expandIcon[1]) {
                return expandIcon[this.expand ? 1 : 0];
            }
            else {
                return expandIcon[0];
            }
            // }
        };
        ElementTreeNode.prototype.inherit = function (name) {
            var node = this.backFind(function (node) {
                return tools.isNotEmpty(node[name]);
            });
            return node ? node[name] : null;
        };
        ElementTreeNode.prototype.destroy = function () {
            this.each(function (node) {
                d.remove(node._wrapper);
                node._wrapper = null;
                node.ajax = null;
                node.onOpen = null;
                node._childrenEl = null;
                node._container = null;
                node._textEl = null;
                node._expandIconEl = null;
                node._children = null;
                node._parent = null;
            });
        };
        return ElementTreeNode;
    }(TreeNodeBase_1.TreeNodeBase));
    exports.ElementTreeNode = ElementTreeNode;
});

define("Toggle", ["require", "exports", "FormCom"], function (require, exports, basic_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    // let checkBoxEvent = (() => {
    //     let count = 0;
    //     function checkEvent(ev) {
    //         let el = d.closest(ev.target, '.toggle-wrapper');
    //         if (el !== null && !el.classList.contains('disabled')) {
    //             let checkBox: NewToggle = d.data(el);
    //             ev.stopPropagation();
    //             checkBox.checked = !checkBox.checked;
    //             tools.isFunction(checkBox.onClick) && checkBox.onClick(checkBox.checked);
    //         }
    //     }
    //     return {
    //         plus() {
    //             count++;
    //             if (count === 1) {
    //                 document.body.addEventListener('click', checkEvent, true);
    //                 // d.on(document.body, 'click', '.new-select-box',checkEvent);
    //             }
    //         },
    //         minus() {
    //             count--;
    //             if (count === 0) {
    //                 document.body.removeEventListener('click', checkEvent, true);
    //                 // d.off(document.body, 'click', '.new-select-box',checkEvent);
    //             }
    //         },
    //     }
    // })();
    var Toggle = /** @class */ (function (_super) {
        __extends(Toggle, _super);
        function Toggle(para) {
            var _this = _super.call(this, para) || this;
            _this.event = (function () {
                var disX, isChange = false, self = _this;
                var start = function (ev) {
                    _this.wrapper.classList.add('toggle-dragging');
                    var add = Math.ceil(_this.ballWidth / 3);
                    if (_this.checked) {
                        _this.ball.style.transform = 'translate(' + (_this.offset - add) + 'px, 0)';
                    }
                    _this.currentWidth = (_this.ballWidth + add);
                    _this.ball.style.width = _this.currentWidth + 'px';
                    isChange = false;
                    disX = ev.targetTouches[0].clientX;
                    d.on(document, 'touchmove', move);
                    d.on(document, 'touchend', end);
                };
                var move = function (ev) {
                    var currentX = ev.targetTouches[0].clientX;
                    if (disX > currentX) {
                        isChange = true;
                        if (_this.checked) {
                            disX = currentX;
                        }
                        _this.checked = false;
                    }
                    else if (disX < currentX) {
                        if (!_this.checked) {
                            disX = currentX;
                        }
                        isChange = true;
                        _this.checked = true;
                    }
                };
                var end = function () {
                    _this.wrapper.classList.remove('toggle-dragging');
                    d.off(document, 'touchmove', move);
                    d.off(document, 'touchend', end);
                    if (!isChange) {
                        _this.checked = !_this.checked;
                    }
                    if (_this.checked) {
                        _this.ball.style.transform = 'translate(' + _this.offset + 'px, 0px)';
                    }
                    _this.currentWidth = _this.ballWidth;
                    _this.ball.style.width = _this.currentWidth + 'px';
                    tools.isFunction(_this.onClick) && _this.onClick(_this.checked);
                };
                return {
                    on: function () {
                        d.on(self.wrapper, 'touchstart', start);
                    },
                    off: function () {
                        d.off(self.wrapper, 'touchstart', start);
                    }
                };
            })();
            _this._checked = false;
            _this._disabled = false;
            _this._size = 30;
            _this.custom = para.custom;
            _this.checked = para.checked;
            _this.onClick = para.onClick;
            _this.onSet = para.onSet;
            _this.size = para.size;
            _this.event.on();
            return _this;
        }
        Toggle.prototype.wrapperInit = function () {
            var wrapper = h("div", { className: "toggle-wrapper" },
                h("input", { type: "checkbox", hidden: true }),
                h("span", { className: "toggle-text toggle-checked" }),
                h("span", { className: "toggle-text toggle-no-checked" }),
                this.ball = h("div", { className: "toggle-ball" }));
            d.data(wrapper, this);
            return wrapper;
        };
        Toggle.prototype.change = function () {
            var input = this.wrapper.querySelector('input'), check = this.wrapper.querySelector('.toggle-checked'), noCheck = this.wrapper.querySelector('.toggle-no-checked');
            input.checked = this.checked;
            if (this.checked) {
                this.ball.style.transform = 'translate(' + (this.currentWidth > this.ballWidth
                    ? this.offset - Math.ceil(this.ballWidth / 3) : this.offset) + 'px, 0px)';
                check.style.display = 'block';
                noCheck.style.display = 'none';
            }
            else {
                this.ball.style.transform = 'translate(0px, 0px)';
                check.style.display = 'none';
                noCheck.style.display = 'block';
            }
            this.wrapper.classList.toggle('toggle-active', this.checked);
        };
        Toggle.prototype.get = function () {
            return this.checked;
        };
        Toggle.prototype.set = function (flag) {
            if (flag === void 0) { flag = 0; }
            this.checked = !!flag;
            if (typeof this.onSet === 'function') {
                this.onSet(!!flag);
            }
        };
        Object.defineProperty(Toggle.prototype, "checked", {
            get: function () {
                return this._checked;
            },
            set: function (e) {
                if (this._checked !== e && tools.isNotEmpty(e)) {
                    this._checked = e;
                    this.change();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toggle.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (e) {
                if (this._disabled !== e && tools.isNotEmpty(e)) {
                    this._disabled = e;
                    this.wrapper.classList.toggle('disabled', this._disabled);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toggle.prototype, "custom", {
            get: function () {
                return this._custom;
            },
            set: function (obj) {
                if (tools.isNotEmpty(obj) && this.wrapper) {
                    this._custom = obj;
                    //debugger;
                    var check = this.wrapper.querySelector('.toggle-checked'), noCheck = this.wrapper.querySelector('.toggle-no-checked');
                    check.innerHTML = tools.str.toEmpty(this.custom.check);
                    noCheck.innerHTML = tools.str.toEmpty(this.custom.noCheck);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toggle.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (e) {
                this._onClick = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Toggle.prototype, "size", {
            get: function () {
                return this._size;
            },
            set: function (num) {
                if (num !== this._size && tools.isNotEmpty(num)) {
                    this._size = num;
                    this.wrapper.style.height = num + 'px';
                    this.wrapper.style.width = Math.round(num * 7 / 3) + 4 + 'px';
                    this.wrapper.style.borderRadius = Math.ceil(num / 2) + 'px';
                    this.wrapper.style.fontSize = Math.round(num * 2 / 5) + 'px';
                    this.ball.style.width = num - 2 + 'px';
                    this.ball.style.height = num - 2 + 'px';
                    this.ball.style.borderRadius = Math.ceil((num - 2) / 2) + 'px';
                    this.wrapper.style.lineHeight = this.size + 'px';
                }
                this.currentWidth = this._size - 2;
                this.ballWidth = this._size - 2;
                this.offset = this.wrapper.offsetWidth - this.ballWidth - 3;
                this.change();
            },
            enumerable: true,
            configurable: true
        });
        Toggle.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.event.off();
            this.ballWidth = null;
        };
        Object.defineProperty(Toggle.prototype, "value", {
            get: function () {
                return this.checked;
            },
            set: function (flag) {
                this.checked = !!flag;
                if (typeof this.onSet === 'function') {
                    this.onSet(!!flag);
                }
            },
            enumerable: true,
            configurable: true
        });
        return Toggle;
    }(basic_1.FormCom));
    exports.Toggle = Toggle;
});

/// <amd-module name="Uploader"/>
define("Uploader", ["require", "exports", "FormCom", "User", "TextInput"], function (require, exports, basic_1, User_1, text_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Ajax = G.Ajax;
    var d = G.d;
    var tools = G.tools;
    // TODO 使用完该控件需销毁，否则后续上传会多次
    var Uploader = /** @class */ (function (_super) {
        __extends(Uploader, _super);
        function Uploader(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            _this.guid = tools.getGuid();
            _this.fileName = '';
            _this.fileNameInput = null;
            _this.event = {};
            _this.initDom();
            require(['webUpLoader', 'md5'], function (WebUploader, md5) {
                _this.webUpLoader = WebUploader;
                _this.comInit(WebUploader, md5);
                for (var name_1 in _this.event) {
                    _this.on(name_1, _this.event[name_1]);
                }
                // 清理
                _this.event = {};
                setTimeout(function () {
                    // debugger;
                    var container = para.container, clickEl = d.query('.webuploader-element-invisible', container).parentElement;
                    clickEl.style.width = container.offsetWidth + 'px';
                    clickEl.style.height = container.offsetHeight + 'px';
                }, 200);
                _this.fileNameInput = new text_1.TextInput({
                    container: para.container,
                    placeholder: _this.para.text || '点击上传',
                    readonly: true,
                });
                _this.text = _this.value;
            });
            return _this;
        }
        Object.defineProperty(Uploader.prototype, "text", {
            get: function () {
                return this.fileNameInput.get();
            },
            set: function (str) {
                if (this.fileNameInput !== null) {
                    this.fileNameInput.set(str);
                }
            },
            enumerable: true,
            configurable: true
        });
        Uploader.prototype.initDom = function () {
            var dom = this.para.container;
            dom.classList.add('uploader-com');
        };
        Uploader.prototype.comInit = function (WebUploader, md5) {
            var userInfo = { userId: User_1.User.get().userid, md5: "" }; // 用户会话信息
            var chunkSize = 5000 * 1024; // 分块大小
            var uniqueFileName = ''; // 文件唯一标识符
            var md5Mark = null, para = this.para;
            var backEndUrl = this.para.uploadUrl; // "http://localhost:8080/RESTServer";
            var self = this;
            WebUploader.Uploader.register({
                name: this.guid,
                "before-send-file": "beforeSendFile",
                "before-send": "beforeSend",
                "after-send-file": "afterSendFile"
            }, {
                beforeSendFile: function (file) {
                    //秒传验证
                    var task = $.Deferred();
                    var start = new Date().getTime();
                    //拿到上传文件的唯一名称，用于断点续传
                    uniqueFileName = md5('' + file.name + file.type + file.lastModifiedDate + file.size);
                    (new WebUploader.Uploader()).md5File(file).progress(function (percentage) {
                        // console.log(percentage);
                    }).then(function (val) {
                        // console.log("总耗时: "+((new Date().getTime()) - start)/1000);
                        md5Mark = val;
                        userInfo.md5 = val;
                        var ajaxData = {
                            status: "md5Check",
                            md5: val.toUpperCase(),
                            nameField: para.nameField
                        };
                        if (para.thumbField) {
                            ajaxData.smallField = para.thumbField;
                        }
                        Ajax.fetch(backEndUrl, {
                            type: "POST",
                            traditional: true,
                            data: ajaxData
                            // , cache: false
                            ,
                            timeout: 1000 //todo 超时的话，只能认为该文件不曾上传过
                            ,
                            dataType: "json"
                        }).then(function (_a) {
                            var response = _a.response;
                            if (response.ifExist) { //若存在，这返回失败给WebUploader，表明该文件不需要上传
                                task.reject();
                                self.com.skipFile(file);
                                // file.path = data.path;
                                self.fileName = file.name;
                                self.para.onComplete(response, file);
                            }
                            else {
                                task.resolve();
                                //拿到上传文件的唯一名称，用于断点续传
                                //uniqueFileName = md5(''+userInfo.userId+file.name+file.type+file.lastModifiedDate+file.size);
                            }
                        }).catch(function () {
                            task.resolve();
                        });
                    });
                    return $.when(task);
                },
                beforeSend: function (block) {
                    //分片验证是否已传过，用于断点续传
                    var task = $.Deferred();
                    Ajax.fetch(backEndUrl, {
                        type: "POST",
                        traditional: true,
                        data: {
                            status: "chunkCheck",
                            name: uniqueFileName,
                            chunkIndex: block.chunk,
                            size: block.end - block.start
                        }
                        // , cache: false
                        ,
                        timeout: 1000 //todo 超时的话，只能认为该分片未上传过
                        ,
                        dataType: "json"
                    }).then(function (_a) {
                        var response = _a.response;
                        if (response.ifExist) { //若存在，返回失败给WebUploader，表明该分块不需要上传
                            task.reject();
                        }
                        else {
                            task.resolve();
                        }
                    }).catch(function () {
                        task.resolve();
                    });
                    return $.when(task);
                },
                afterSendFile: function (file) {
                    var chunksTotal = 0;
                    if ((chunksTotal = Math.ceil(file.size / chunkSize)) >= 1) {
                        //合并请求
                        var task_1 = $.Deferred(), ajaxData = {
                            status: "chunksMerge",
                            name: uniqueFileName,
                            chunks: chunksTotal,
                            md5: md5Mark.toUpperCase(),
                            file_name: file.name,
                            userid: userInfo.userId,
                            nameField: para.nameField
                        };
                        if (para.thumbField) {
                            ajaxData.smallField = para.thumbField;
                        }
                        Ajax.fetch(backEndUrl, {
                            type: "POST",
                            traditional: true,
                            data: ajaxData
                            // , cache: false
                            ,
                            dataType: "json"
                        }).then(function (_a) {
                            var response = _a.response;
                            //todo 检查响应是否正常
                            task_1.resolve();
                            self.fileName = file.name;
                            self.para.onComplete(response, file);
                        }).catch(function () {
                            task_1.reject();
                        });
                        return $.when(task_1);
                    }
                    else {
                        // console.log(file);
                        // self.fileName = file.name;
                        // self.para.onComplete();
                    }
                }
            });
            // console.log(this.para.container);
            this.com = WebUploader.create({
                swf: "Uploader.swf",
                server: backEndUrl // url
                ,
                pick: this.para.container // container
                ,
                resize: false
                // , dnd: "#theList"
                // , paste: document.body
                ,
                disableGlobalDnd: true,
                thumb: {
                    width: 100,
                    height: 100,
                    quality: 70,
                    allowMagnify: true,
                    crop: true
                    //, type: "image/jpeg"
                }
                //				, compress: {
                //					quality: 90
                //					, allowMagnify: false
                //					, crop: false
                //					, preserveHeaders: true
                //					, noCompressIfLarger: true
                //					,compressSize: 100000
                //				}
                ,
                compress: false,
                prepareNextFile: true,
                chunked: true,
                chunkSize: chunkSize,
                threads: true,
                formData: function () { return userInfo; } // formData
                ,
                fileNumLimit: 30 // fileNumLimit
                ,
                fileSingleSizeLimit: 4 * 1024 * 1024 //4m //
                ,
                duplicate: true // 验证文件是否可以重复
                ,
                accept: para.accept ? para.accept : null
            });
        };
        Uploader.prototype.upload = function () {
            this.com.upload();
        };
        Uploader.prototype.on = function (name, callback) {
            if (this.com) {
                this.com.on(name, callback);
            }
            else {
                this.event[name] = callback;
            }
        };
        Uploader.prototype.get = function () {
            return this.fileName;
        };
        Uploader.prototype.set = function (fileName) {
            this.fileName = fileName;
        };
        Uploader.prototype.error = function (isError, errorMsg) {
            _super.prototype.error.call(this, isError, errorMsg, this.para.container);
        };
        Uploader.prototype.destroy = function () {
            this.webUpLoader.Uploader.unRegister(this.guid);
            this.com && this.com.destroy();
            _super.prototype.destroy.call(this);
        };
        Object.defineProperty(Uploader.prototype, "value", {
            get: function () {
                return this.fileName;
            },
            set: function (fileName) {
                this.fileName = fileName;
            },
            enumerable: true,
            configurable: true
        });
        ;
        Uploader.prototype.wrapperInit = function () {
            return undefined;
        };
        return Uploader;
    }(basic_1.FormCom));
    exports.Uploader = Uploader;
});

define("Menu", ["require", "exports", "ElementTreeNode"], function (require, exports, ElementTreeNode_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Menu"/>
    var d = G.d;
    var tools = G.tools;
    /**
     * 菜单组件对象
     */
    var Menu = /** @class */ (function (_super) {
        __extends(Menu, _super);
        function Menu(para) {
            return _super.call(this, para) || this;
        }
        Menu.prototype.init = function (para) {
            _super.prototype.init.call(this, para);
            if (para.container) {
                this.container = para.container;
                para.width && (this.wrapper.style.width = para.width + "px");
            }
            // debugger;
            this.isHoverExpand = tools.isUndefined(para.isHoverExpand) ? this.inherit('isHoverExpand') : para.isHoverExpand;
            this.isOutline = tools.isUndefined(para.isOutline) ? this.inherit('_isOutline') : para.isOutline;
            this.isHorizontal = tools.isUndefined(para.isHorizontal) ? this.inherit('_isHorizontal') : para.isHorizontal;
            this.eventInit();
        };
        Menu.prototype.eventInit = function () {
            var _this = this;
            if (this.isVirtual) {
                return;
            }
            if (this.isHoverExpand) {
                d.on(this.wrapper, 'mouseenter', function (event) {
                    event.preventDefault();
                    _this.expand = true;
                });
                d.on(this.wrapper, 'mouseleave', function (event) {
                    event.stopPropagation();
                    if (_this.parent) {
                        _this.expand = false;
                    }
                });
                d.on(this.textWrapper, 'click', function (event) {
                    event.stopPropagation();
                    // this.expand = !this.expand;
                    if (_this.isLeaf && !_this.isOnTop) {
                        _this.parent.expand = !_this.parent.expand;
                    }
                    _this.selected = true;
                    _this.onOpen && _this.onOpen(_this);
                });
            }
            else {
                d.on(this.textWrapper, 'click', function (event) {
                    // console.log(d.data(this.wrapper));
                    event.stopPropagation();
                    _this.expand = !_this.expand;
                    //   (!this.children) && (this.selected = !this.selected);
                    _this.selected = true;
                    _this.onOpen && _this.onOpen(_this);
                });
            }
        };
        Object.defineProperty(Menu.prototype, "isOutline", {
            get: function () {
                return this._isOutline;
            },
            set: function (flag) {
                if (flag !== this._isOutline) {
                    this.parent && this.wrapper.classList.toggle('menu-node-outline', flag);
                    this._isOutline = !!flag;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Menu.prototype, "isHorizontal", {
            get: function () {
                return this._isHorizontal;
            },
            set: function (flag) {
                if (flag !== this._isHorizontal) {
                    this.wrapper.classList.toggle('menu-node-horizontal', flag);
                    this._isHorizontal = !!flag;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Menu.prototype, "expandIconEl", {
            get: function () {
                if (!this._expandIconEl) {
                    var pre = this.inherit('_expandIconPre'), p = tools.isNotEmpty(pre) ? pre : 'iconfont';
                    this._expandIconEl = d.create("<i class=\"" + p + " " + this.getCurrentExpandIcon() + " tree-open-icon\"></i>");
                    d.prepend(this.textWrapper, this._expandIconEl);
                }
                return this._expandIconEl;
            },
            enumerable: true,
            configurable: true
        });
        // 打开的按钮
        Menu.prototype.expandIcon = function () {
            var iconArr = this.inherit('_expandIconArr');
            iconArr = tools.isNotEmpty(iconArr) ? iconArr : ['icon-arrow-up'];
            return this.isHorizontal ? ['icon-arrow-up', 'icon-arrow-down'] : iconArr;
        };
        Menu.prototype.childrenAdd = function (tnode) {
            var _this = this;
            // debugger;
            var tnodes = _super.prototype.childrenAdd.call(this, tnode);
            tnodes.forEach(function (node) {
                node.each(function (menu) {
                    if (menu.isOutline) {
                        menu.textWrapper.style.position = 'relative';
                        var topDeep = 0;
                        var leftDeep = 0;
                        if (menu.deep - 2 > 0) {
                            leftDeep = menu.deep - 2;
                            topDeep = menu.deep - 2;
                        }
                        menu.textWrapper.style.left = leftDeep * 135 + 'px';
                        menu.textWrapper.style.top = -topDeep * 33 + 'px';
                    }
                    else {
                        if (!menu.isHorizontal) {
                            menu.textWrapper.style.paddingLeft = (menu.deep * 12) + 'px'; //如果子菜单模式为纵向  则需要计算间隔
                        }
                    }
                    node.container = _this.childrenEl;
                });
            });
            return tnodes;
        };
        Menu.prototype.wrapperCreate = function () {
            var wrapper = _super.prototype.wrapperCreate.call(this);
            wrapper.classList.add('menu-node');
            d.data(wrapper, this);
            return wrapper;
        };
        Menu.prototype.setPosition = function (x, y) {
            this.wrapper.style.top = y + 'px';
            this.wrapper.style.left = x + 'px';
        };
        return Menu;
    }(ElementTreeNode_1.ElementTreeNode));
    exports.Menu = Menu;
});

define("Pagination", ["require", "exports", "Spinner", "Button"], function (require, exports, spinner_1, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var Pagination = /** @class */ (function (_super) {
        __extends(Pagination, _super);
        function Pagination(para) {
            var _this = _super.call(this, tools.isEmpty(para.scroll) ? para : tools.obj.merge(para, { container: para.scroll.scrollEl })) || this;
            _this.para = para;
            _this.spinner = null;
            _this.paging = null;
            /* protected slide = ((self) => {
                 let autoLoading = tools.isEmpty(self.para.scroll.auto) ? true : self.para.scroll.auto,
                     loadingBtn: Button,
                     isPulldownRefresh = tools.isEmpty(self.para.scroll.isPulldownRefresh) ?
                     true : self.para.scroll.isPulldownRefresh;
                 if (!autoLoading) {
                     let btnWrapper = d.create('<div class="btn-wrapper"></div>'),
                         loadingText = tools.isEmpty(this.para.scroll.loadingText)
                             ? '点击加载' : this.para.scroll.loadingText;
        
                     loadingBtn = new Button({
                         container: btnWrapper,
                         content: loadingText,
                         type: 'default',
                         isShow: false,
                         className: 'pagination-btn',
                         onClick: () => {
                             loadingBtn.isShow = false;
                             self.next();
                         }
                     });
                     self.wrapper.appendChild(btnWrapper);
                 }
                 let config = {
                     translate: 0,
                     paginationScrollSpinner: null,
                     animated_id: null,
                     loadingBtn
                 };
        
                 function restrictChange() {
                     if (config.translate > 0) {
                         config.translate = 0;
                     }
                     if (Math.abs(config.translate) >= self.totalHeight - self.pageHeight + 35) {
                         config.translate = -(self.totalHeight - self.pageHeight + 35);
                     }
                     self.wrapper.style.transform = 'translate3d(0,' + config.translate + 'px, 0)';
                     self.wrapper.style.webkitTransform = 'translate3d(0,' + config.translate + 'px, 0)';
                 }
        
                 return {
                     slideDown(change: number) {
                         if (config.translate === 0) {
                             if (isPulldownRefresh) {
                                 if (tools.isEmpty(config.paginationScrollSpinner)) {
        
                                 }
                             } else {
        
                                 if (!isNaN(change))
                                     config.translate += change;
                                 restrictChange();
        
                             }
                         } else {
                             if (!tools.isEmpty(config.paginationScrollSpinner) && isPulldownRefresh) {
                                 config.paginationScrollSpinner.destroy();
                                 config.paginationScrollSpinner = null;
                             }
        
                             if (!isNaN(change))
                                 config.translate += change;
                             restrictChange();
                         }
                     },
                     slideUp(change: number) {
                         if (!isNaN(change))
                             config.translate += change;
                         if (Math.abs(config.translate) >= self.totalHeight - self.pageHeight + 10) {
                             if (tools.isNotEmpty(self.spinner) && !self.spinner.isVisible()) {
                                 if (autoLoading) {
                                     self.next();
                                 } else {
                                     loadingBtn.isShow = true;
                                 }
                             }
                         }
                         restrictChange();
                     }
                 }
             })(this);*/
            _this.events = (function (self) {
                var autoLoading, loadingBtn, isPulldownRefresh;
                var timer = null;
                var scrollHandle = function () {
                    var scroll = this.scrollTop;
                    clearTimeout(timer);
                    if (isPulldownRefresh) {
                        if (scroll === 0) {
                            timer = setTimeout(function () {
                                self.paginationScrollSpinner.open();
                                clearTimeout(timer);
                            }, 10);
                        }
                        else {
                            self.paginationScrollSpinner.close();
                        }
                    }
                    if (Math.ceil(scroll) >= self.maxScrollTop) {
                        if (self.current + 1 < Math.ceil(self.total / self.pageSize)) {
                            if (tools.isNotEmpty(self.spinner) && !self.spinner.isVisible()) {
                                if (autoLoading) {
                                    self.next();
                                }
                                else {
                                    loadingBtn.isShow = true;
                                }
                            }
                        }
                        else {
                            !self.isEnd && (self.isEnd = true);
                        }
                    }
                };
                return {
                    on: function () {
                        if (tools.isNotEmpty(self.para.scroll)) {
                            autoLoading = tools.isEmpty(self.para.scroll.auto) ? true : self.para.scroll.auto;
                            isPulldownRefresh = tools.isEmpty(self.para.scroll.isPulldownRefresh) ?
                                true : self.para.scroll.isPulldownRefresh;
                            if (!autoLoading) {
                                var btnWrapper = h("div", { className: "btn-wrapper" }), loadingText = tools.isEmpty(this.para.scroll.loadingText)
                                    ? '点击加载' : this.para.scroll.loadingText;
                                loadingBtn = new Button_1.Button({
                                    container: btnWrapper,
                                    content: loadingText,
                                    type: 'default',
                                    isShow: false,
                                    className: 'pagination-btn',
                                    onClick: function () {
                                        loadingBtn.isShow = false;
                                        self.next();
                                    }
                                });
                                self.wrapper.appendChild(btnWrapper);
                            }
                        }
                        if (tools.isEmpty(self.paging)) {
                            if (isPulldownRefresh) {
                                self.paginationScrollSpinner && self.paginationScrollSpinner.open();
                            }
                            d.on(self.wrapper, 'scroll', scrollHandle);
                        }
                    },
                    off: function () {
                        if (tools.isEmpty(self.paging)) {
                            self.paginationScrollSpinner && self.paginationScrollSpinner.close();
                            d.off(self.wrapper, 'scroll', scrollHandle);
                        }
                    }
                };
            })(_this);
            _this._current = -1;
            _this._pageSize = 20;
            _this._disabled = false;
            _this._isEnd = false;
            _this._total = -1;
            // let frag = document.createDocumentFragment();
            // while(this.scrollEl.firstChild){
            //     if(this.scrollEl.firstChild === this.wrapper){
            //         break;
            //     }
            //     frag.appendChild(this.scrollEl.firstChild);
            // }
            // this.wrapper.appendChild(frag);
            _this._total = typeof para.total === 'number' ? para.total : -1;
            _this._pageSize = para.pageSize || 20;
            _this.onChange = para.onChange;
            if (tools.isNotEmpty(para.scroll)) {
                _this.wrapper.classList.add('pagination-wrapper');
                _this.wrapper.appendChild(_this.textEl =
                    h("p", { className: "pagination-nomore hide" }, _this.para.scroll.nomoreText || '已无更多'));
                if (tools.isEmpty(para.scroll.isPulldownRefresh) ? true : para.scroll.isPulldownRefresh) {
                    _this.paginationScrollSpinner = new PaginationScrollSpinner({
                        scrollEl: _this.wrapper,
                        container: _this.wrapper,
                        onChange: function () {
                            _this.refresh();
                        }
                    });
                }
                _this.initSpinner();
            }
            else {
                _this.paging = new Paging({
                    container: para.container,
                    total: para.total,
                    pageOption: para.pageOptions,
                    pagination: _this,
                });
                _this._pageSize = _this.paging.pageSize;
            }
            _this.events.on();
            return _this;
        }
        Pagination.prototype.wrapperInit = function (para) {
            return tools.isEmpty(para.scroll) ? null : para.scroll.scrollEl;
        };
        ;
        Pagination.prototype.initSpinner = function () {
            this.spinner && this.spinner.hide();
            this.spinner = new spinner_1.Spinner({
                el: this.wrapper.lastChild,
                type: 0,
                className: 'pagination-spinner'
            });
            this._isEnd = false;
            this.textEl && this.textEl.classList.add('hide');
        };
        Object.defineProperty(Pagination.prototype, "maxScrollTop", {
            get: function () {
                var extent = this.wrapper.firstElementChild.offsetHeight - this.wrapper.clientHeight - 10;
                extent = isNaN(extent) ? Infinity : extent;
                return extent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (e) {
                this._onChange = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (num) {
                if (tools.isNotEmpty(num)) {
                    this._current = num;
                    this.changedPage();
                }
            },
            enumerable: true,
            configurable: true
        });
        Pagination.prototype.changedPage = function (ifRefresh) {
            var _this = this;
            if (ifRefresh === void 0) { ifRefresh = false; }
            this.paging && this.paging.initItem(this._current);
            return this.onChange({
                current: this._current,
                pageSize: this.pageSize,
                isRefresh: ifRefresh
            }).then(function (isEnd) {
                if (isEnd === void 0) { isEnd = false; }
                if (tools.isEmpty(_this.paging)) {
                    if (ifRefresh) {
                        _this.initSpinner();
                        _this.paginationScrollSpinner && _this.paginationScrollSpinner.cancel();
                    }
                    if (isEnd) {
                        _this.isEnd = isEnd;
                    }
                    _this.spinner && _this.spinner.hide();
                    _this.totalHeight = _this.wrapper.offsetHeight;
                }
                else {
                }
            });
        };
        Object.defineProperty(Pagination.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (num) {
                if (this._pageSize !== num && num > 0) {
                    this._pageSize = num;
                    this.refresh();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (frag) {
                frag = !!frag;
                if (frag !== this._disabled) {
                    this._disabled = frag;
                    if (this.para) {
                        if (tools.isEmpty(this.para.scroll)) {
                            this.paging && (this.paging.disabled = frag);
                        }
                        else {
                            frag ? this.events.off() : this.events.on();
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "isEnd", {
            get: function () {
                return this._isEnd;
            },
            set: function (flag) {
                this._isEnd = flag;
                if (this._isEnd) {
                    this.spinner && this.spinner.hide();
                    this.textEl && this.textEl.classList.remove('hide');
                    this.spinner = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Pagination.prototype, "total", {
            get: function () {
                return this._total;
            },
            set: function (num) {
                this._total = tools.isEmpty(num) ? this._total : num;
                this.paging && (this.paging.total = this._total);
                tools.isEmpty(this.paging) && this.spinner === null && this.initSpinner();
            },
            enumerable: true,
            configurable: true
        });
        Pagination.prototype.refresh = function () {
            this._current = 0;
            return this.changedPage(true);
        };
        Pagination.prototype.next = function () {
            this.spinner && this.spinner.hide();
            this.spinner && this.spinner.show();
            this._current += 1;
            // if(this._current === 0) {
            //     this.paging && this.paging.refresh();
            // }else{
            //     this.paging && (this.paging.current = this.current);
            // }
            return this.changedPage(this._current === 0);
        };
        Pagination.prototype.destroy = function () {
            this.events.off();
            if (tools.isEmpty(this.paging)) {
                d.remove(this.textEl);
                this.spinner && this.spinner.hide();
                this.paginationScrollSpinner && this.paginationScrollSpinner.destroy();
                this.wrapper.classList.remove('pagination-wrapper');
                this.paginationScrollSpinner = null;
                this.spinner = null;
            }
            else {
                this.paging.destroy();
            }
        };
        return Pagination;
    }(Component));
    exports.Pagination = Pagination;
    var PaginationScrollSpinner = /** @class */ (function () {
        // protected _scrollEl: HTMLElement;
        // set scrollEl(el: HTMLElement){
        //     if (tools.isEmpty(el)){
        //         this._scrollEl = document.body
        //     }else{
        //         this._scrollEl = el;
        //     }
        // }
        // get scrollEl(){
        //     return this._scrollEl;
        function PaginationScrollSpinner(para) {
            this.events = (function (self) {
                var isMove = false;
                var panstart = function () {
                    if (isMove) {
                        isMove = false;
                        window.cancelAnimationFrame(self.animated.config.id);
                        window.cancelAnimationFrame(self.animated.config.id2);
                        self.animated.config.translate = 0;
                        self.animated.config.endOnce = true;
                        self.animated.config.isMove = false;
                        self.wrapper.style.display = 'none';
                    }
                }, panmove = function (ev) {
                    self.animated.move(ev.deltaY);
                    isMove = true;
                }, panend = function () {
                    if (isMove) {
                        var duration = self.animated.config.translate / 4;
                        if (self.animated.config.isMove && self.animated.config.translate === 120) {
                            self.animated.endAnimated(0, duration, true);
                        }
                        else if (self.animated.config.isMove) {
                            self.animated.endAnimated(0, duration);
                        }
                    }
                };
                var pan = function (ev) {
                    ev.srcEvent.preventDefault();
                    if (ev.isFirst) {
                        panstart();
                    }
                    else if (ev.isFinal) {
                        panend();
                    }
                    else {
                        panmove(ev);
                    }
                };
                return {
                    on: function () {
                        d.on(self.scrollEl, 'pandown panstart panend', pan);
                        d.on(document.body, 'touchmove', function (e) {
                            e.preventDefault();
                        });
                    },
                    off: function () {
                        d.off(self.scrollEl, 'pandown panstart panend', pan);
                        d.off(document.body, 'touchmove', function (e) {
                            e.preventDefault();
                        });
                    }
                };
            })(this);
            this.isAnimated = false;
            this.animated = (function (self) {
                var config = {
                    translate: 0,
                    id: 0,
                    id2: 0,
                    endOnce: true,
                    isMove: false
                };
                function linear(t, b, c, d) {
                    return c * t / d + b;
                }
                return {
                    config: config,
                    draw: function (len, isArrow, deg) {
                        if (isArrow === void 0) { isArrow = true; }
                        if (deg === void 0) { deg = len * 2 / 180 * Math.PI; }
                        var cg = self.canvas.getContext('2d');
                        var scale = len / 120;
                        scale = scale > 3 / 4 ? 3 / 4 : scale;
                        cg.clearRect(0, 0, 100, 100);
                        cg.save();
                        cg.beginPath();
                        cg.translate(19, 19);
                        cg.rotate(deg);
                        cg.strokeStyle = self.color;
                        cg.lineWidth = 4;
                        cg.moveTo(15, 0);
                        for (var i = 0; i < 360 * scale; i++) {
                            cg.lineTo(Math.cos(i / 180 * Math.PI) * 15, Math.sin(i / 180 * Math.PI) * 15);
                        }
                        cg.stroke();
                        if (Math.floor(360 * scale) > 0 && isArrow) {
                            this.createArrow(Math.floor(360 * scale));
                        }
                        // cg.arc(0, 0, 15, 0, Math.PI * 2 * scale);
                        cg.restore();
                    },
                    createArrow: function (deg) {
                        var cg = self.canvas.getContext('2d');
                        cg.beginPath();
                        cg.fillStyle = self.color;
                        cg.lineWidth = 1;
                        cg.moveTo(Math.cos(deg / 180 * Math.PI) * 15, Math.sin(deg / 180 * Math.PI) * 15);
                        cg.lineTo(Math.cos(deg / 180 * Math.PI) * 20, Math.sin(deg / 180 * Math.PI) * 20);
                        cg.lineTo(Math.cos((deg + 30) / 180 * Math.PI) * 15, Math.sin((deg + 30) / 180 * Math.PI) * 15);
                        cg.lineTo(Math.cos(deg / 180 * Math.PI) * 10, Math.sin(deg / 180 * Math.PI) * 10);
                        cg.closePath();
                        cg.fill();
                    },
                    move: function (speed) {
                        config.isMove = true;
                        self.wrapper.style.display = 'block';
                        config.translate += speed;
                        config.translate = config.translate >= 120 ? 120 : config.translate;
                        config.translate = config.translate < 0 ? 0 : config.translate;
                        self.wrapper.style.transform = 'translate3d(0px, ' + config.translate * .9 + 'px, 0px)';
                        self.wrapper.style.webkitTransform = 'translate3d(0px, ' + config.translate * .9 + 'px, 0px)';
                        self.animated.draw(config.translate);
                    },
                    endAnimated: function (t, duration, isRefresh) {
                        var _this = this;
                        if (isRefresh === void 0) { isRefresh = false; }
                        var This = this;
                        self.isAnimated = true;
                        t++;
                        var current = linear(t, config.translate, 0 - config.translate, duration);
                        self.wrapper.style.transform = 'translate3d(0px, ' + current + 'px, 0px)';
                        this.draw(current, false);
                        config.id = window.requestAnimationFrame(function () {
                            _this.endAnimated(t, duration, isRefresh);
                        });
                        if ((current <= 80) && config.endOnce && isRefresh) {
                            config.endOnce = false;
                            window.cancelAnimationFrame(config.id);
                            var len_1 = 80, decoration_1 = 1, t2_1 = 0, deg_1 = len_1 * 2;
                            (function a() {
                                t2_1++;
                                deg_1 += 6;
                                if (len_1 >= 80) {
                                    decoration_1 *= -1;
                                }
                                else if (len_1 <= 30) {
                                    decoration_1 *= -1;
                                }
                                len_1 += decoration_1;
                                This.draw(len_1, false, deg_1 / 180 * Math.PI);
                                config.id2 = window.requestAnimationFrame(a);
                                if (self._cancel) {
                                    self._cancel = false;
                                    window.cancelAnimationFrame(config.id2);
                                    This.endAnimated(t, duration);
                                }
                            })();
                            self.onChange && self.onChange();
                        }
                        if (t >= duration) {
                            self.wrapper.style.transform = 'translate3d(0px, 0px, 0px)';
                            window.cancelAnimationFrame(config.id);
                            self.isAnimated = false;
                            self.wrapper.style.display = 'none';
                            config.translate = 0;
                            config.endOnce = true;
                            config.isMove = false;
                        }
                    }
                };
            })(this);
            // }
            this._cancel = false;
            this._onOff = false;
            this._disabled = false;
            this.wrapper = h("div", { className: "ball-wapper" });
            this.canvas = h("canvas", { width: "50", height: "50" });
            this.wrapper.appendChild(this.canvas);
            var container = tools.isEmpty(para.container) ? document.body : para.container;
            container.appendChild(this.wrapper);
            if (tools.isEmpty(para.scrollEl)) {
                this.scrollEl = document.body;
            }
            else {
                this.scrollEl = para.scrollEl;
            }
            this.onChange = para.onChange;
            this.color = para.color;
        }
        PaginationScrollSpinner.prototype.open = function () {
            if (!this._onOff) {
                this.events.on();
                this._onOff = true;
            }
        };
        PaginationScrollSpinner.prototype.close = function () {
            if (this._onOff) {
                this.wrapper.style.display = 'none';
                this.events.off();
                this._onOff = false;
            }
        };
        Object.defineProperty(PaginationScrollSpinner.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationScrollSpinner.prototype, "disable", {
            set: function (frag) {
                if (frag !== this._disabled) {
                    this._disabled = frag;
                    frag ? this.events.off() : this.events.on();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationScrollSpinner.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (cb) {
                this._onChange = cb;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PaginationScrollSpinner.prototype, "color", {
            get: function () {
                return this._color;
            },
            set: function (val) {
                if (tools.isNotEmpty(val)) {
                    this._color = val;
                }
                else {
                    this._color = '#007aff';
                }
            },
            enumerable: true,
            configurable: true
        });
        PaginationScrollSpinner.prototype.cancel = function () {
            this.isAnimated && (this._cancel = true);
        };
        PaginationScrollSpinner.prototype.destroy = function () {
            this.events.off();
            d.remove(this.wrapper);
        };
        return PaginationScrollSpinner;
    }());
    var Paging = /** @class */ (function (_super) {
        __extends(Paging, _super);
        function Paging(para) {
            var _this = _super.call(this, para) || this;
            _this.items = [];
            // 控制事件
            _this.event = (function (self) {
                var enter, blur;
                // 点击按钮时触发的事件
                function itemClick(e) {
                    e.preventDefault();
                    var index = this.dataset.index;
                    if (isNaN(index)) {
                        if (index === 'prev') {
                            self.pagination && self.setCurrent(self.pagination.current - 1);
                        }
                        else if (index === 'next') {
                            self.pagination && self.setCurrent(self.pagination.current + 1);
                        }
                    }
                    else {
                        self.setCurrent(parseInt(index) - 1);
                    }
                    self.trigger(Paging.EVT_INDEX_CHANGED);
                }
                // 选择框事件
                function change() {
                    var val = parseInt(this.value);
                    if (self.pageSize !== val) {
                        self.pageSize = val;
                    }
                }
                return {
                    on: function () {
                        d.on(self.itemWrapper, 'click', 'a:not(.' + Paging.__DISABLED_CLASS__ + '):not(.' + Paging.__SELECTED_CLASS__ + ')', itemClick);
                        d.on(self.selectEl, 'change', change);
                        d.on(self.inputEl, 'blur', blur = function () {
                            var val = this.value;
                            if (tools.isNotEmpty(val) && !isNaN(val)) {
                                self.setCurrent(parseInt(val) - 1);
                                self.trigger(Paging.EVT_INDEX_CHANGED);
                            }
                            self.inputEl.value = '';
                        });
                        d.on(self.inputEl, 'keyup', enter = function (ev) {
                            if (ev.keyCode === 13) {
                                self.inputEl.blur();
                            }
                        });
                    },
                    off: function () {
                        d.off(self.itemWrapper, 'click', 'a:not(.' + Paging.__DISABLED_CLASS__ + ')', itemClick);
                        d.off(self.selectEl, 'change', change);
                        d.off(self.inputEl, 'blur', blur);
                        d.off(self.inputEl, 'keyup', enter);
                    }
                };
            })(_this);
            // 最多显示出来的页码按钮数
            _this.offset = 5;
            // 单页条数
            _this._pageSize = 50;
            // 总条数
            _this._total = 0;
            // 选择框的单页条数可选项
            _this._pageOption = null;
            _this.pagination = para.pagination;
            _this.itemWrapper = h("span", { className: "paging-container" });
            _this.totalEl = h("span", { className: "paging-total" }, "\u603B\u51710\u6761");
            _this.selectEl = h("select", null);
            _this.inputEl = h("input", { type: "text", name: "paging-elevator" });
            _this.prevEl = h("a", { className: "paging-prev paging-disabled", title: "\u4E0A\u4E00\u9875", "data-index": "prev" }, "<");
            _this.nextEl = h("a", { className: "paging-next", title: "\u4E0B\u4E00\u9875", "data-index": "next" }, ">");
            _this.offset = para.offset || 5;
            _this.total = para.total;
            _this.pageOption = para.pageOption || [100, 200, 500];
            _this.wrapper.classList.toggle('mini', tools.isEmpty(para.mini) ? true : para.mini);
            _this.init();
            _this.event.on();
            return _this;
        }
        Paging.prototype.wrapperInit = function (para) {
            return h("div", { className: "paging-wrapper" });
        };
        // 创建带页码的点击按钮
        Paging.createItem = function (index) {
            return h("a", { className: "paging-number", title: index, "data-index": index }, index);
        };
        // 渲染整个paging控件
        Paging.prototype.init = function () {
            var selectWrapper = h("span", { className: "paging-option" }), inputWrapper = h("span", { className: "paging-elevator" },
                "\u8DF3\u81F3",
                h("span", { className: "paging-elevator-wrapper" }),
                "\u9875");
            d.prepend(this.itemWrapper, this.prevEl);
            d.append(this.itemWrapper, this.nextEl);
            this.initItem(0);
            d.append(selectWrapper, this.selectEl);
            d.append(d.query('.paging-elevator-wrapper', inputWrapper), this.inputEl);
            var frag = document.createDocumentFragment();
            d.append(frag, this.totalEl);
            d.append(frag, this.itemWrapper);
            d.append(frag, inputWrapper);
            d.append(frag, selectWrapper);
            d.append(this.wrapper, frag);
        };
        // 渲染页码按钮
        Paging.prototype.initItem = function (index) {
            var totalPage = Math.ceil(this.total / this.pageSize), offset = Math.min(this.offset, totalPage);
            index = Math.min(totalPage - 1, index);
            index = Math.max(0, index);
            for (var _i = 0, _a = this.items; _i < _a.length; _i++) {
                var item = _a[_i];
                tools.isNotEmpty(item) && item.classList.add('hide');
            }
            var center = Math.floor(offset / 2), itemIndex = index - center - Math.max(0, index + 1 - (totalPage - center));
            itemIndex = Math.max(0, itemIndex);
            for (var i = 0, len = this.items.length; i < Math.max(offset, len); i++) {
                var item = this.items[i];
                if (i >= totalPage) {
                    item && d.remove(item);
                    delete this.items[i];
                }
                else {
                    if (item) {
                        item.innerText = itemIndex + i + 1 + '';
                        item.title = itemIndex + i + 1 + '';
                        item.dataset.index = itemIndex + i + 1 + '';
                        item.classList.remove(Paging.__DISABLED_CLASS__);
                    }
                    else {
                        var numPag = Paging.createItem(itemIndex + i + 1);
                        this.items[i] = numPag;
                        d.before(this.itemWrapper.lastChild, numPag);
                    }
                }
            }
            var selectItem = d.query('.' + Paging.__SELECTED_CLASS__, this.itemWrapper);
            selectItem && selectItem.classList.remove(Paging.__SELECTED_CLASS__);
            this.prevEl.classList.remove(Paging.__DISABLED_CLASS__);
            this.nextEl.classList.remove(Paging.__DISABLED_CLASS__);
            this.inputEl.removeAttribute('disabled');
            if (center === 0) {
                this.items[0] && this.items[0].classList.add(Paging.__SELECTED_CLASS__);
                this.prevEl.classList.add(Paging.__DISABLED_CLASS__);
                this.nextEl.classList.add(Paging.__DISABLED_CLASS__);
                this.inputEl.setAttribute('disabled', 'disabled');
            }
            else {
                var endIndex = totalPage - 1 - index;
                if (index < center) {
                    this.items[index] && this.items[index].classList.add(Paging.__SELECTED_CLASS__);
                    index === 0 && this.prevEl.classList.add(Paging.__DISABLED_CLASS__);
                }
                else if (endIndex < center) {
                    var i = offset - endIndex - 1;
                    this.items[i] && this.items[i].classList.add(Paging.__SELECTED_CLASS__);
                    index + 1 === totalPage && this.nextEl.classList.add(Paging.__DISABLED_CLASS__);
                }
                else {
                    this.items[center] && this.items[center].classList.add(Paging.__SELECTED_CLASS__);
                }
            }
            for (var _b = 0, _c = this.items; _b < _c.length; _b++) {
                var item = _c[_b];
                tools.isNotEmpty(item) && item.classList.remove('hide');
            }
        };
        Paging.prototype.trigger = function (type) {
            _super.prototype.trigger.call(this, type, {
                current: this.pagination.current,
                pageSize: this.pageSize,
            });
        };
        Paging.prototype.setCurrent = function (index) {
            var totalPage = Math.ceil(this.total / this.pageSize);
            index = Math.min(totalPage - 1, index);
            index = Math.max(0, index);
            this.pagination && (this.pagination.current = index);
        };
        Object.defineProperty(Paging.prototype, "pageSize", {
            get: function () {
                return this._pageSize;
            },
            set: function (num) {
                var _this = this;
                if (typeof num === 'number' && this._pageSize !== num) {
                    this._pageSize = num;
                    this.pagination.pageSize = num;
                    var handlers = this.eventHandlers[Paging.EVT_PAGE_SIZE_CHANGED];
                    handlers && handlers.forEach(function (item) {
                        typeof item === 'function' && item({
                            current: _this.pagination.current,
                            pageSize: _this.pageSize,
                        });
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paging.prototype, "total", {
            get: function () {
                return this._total;
            },
            set: function (total) {
                if (total > 0 && this._total !== total) {
                    this.totalEl.innerText = '总共' + total + '条';
                    this._total = total;
                    var selectEl = d.query('.' + Paging.__SELECTED_CLASS__, this.itemWrapper);
                    if (selectEl) {
                        this.initItem(0);
                    }
                    else {
                        this.initItem(0);
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paging.prototype, "pageOption", {
            get: function () {
                return this._pageOption;
            },
            set: function (pageOption) {
                if (Array.isArray(pageOption) && this._pageOption !== pageOption && pageOption.length > 0) {
                    this._pageOption = pageOption;
                    var frag = document.createDocumentFragment();
                    for (var _i = 0, pageOption_1 = pageOption; _i < pageOption_1.length; _i++) {
                        var index = pageOption_1[_i];
                        frag.appendChild(h("option", { value: index },
                            index,
                            " \u6761/\u9875"));
                    }
                    d.setHTML(this.selectEl, '');
                    d.append(this.selectEl, frag);
                    this._pageSize = pageOption[0];
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Paging.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (frag) {
                var _this = this;
                // if(this._disabled !== frag){
                this.selectEl && (this.selectEl.disabled = frag);
                if (frag) {
                    this.inputEl && this.inputEl.setAttribute('disabled', 'disabled');
                    this.prevEl && this.prevEl.classList.add(Paging.__DISABLED_CLASS__);
                    this.nextEl && this.nextEl.classList.add(Paging.__DISABLED_CLASS__);
                    this.items && this.items.forEach(function (item, index) {
                        if (index !== _this.pagination.current) {
                            item.classList.add(Paging.__DISABLED_CLASS__);
                        }
                    });
                }
                else {
                    this.pagination && this.initItem(this.pagination.current);
                }
                // }
            },
            enumerable: true,
            configurable: true
        });
        Paging.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.event.off();
            this.pagination = null;
            this.items = null;
            this.itemWrapper = null;
            this.totalEl = null;
            this.selectEl = null;
            this.inputEl = null;
            this.prevEl = null;
            this.nextEl = null;
            this._pageOption = null;
        };
        Paging.__DISABLED_CLASS__ = 'paging-disabled'; // 禁用样式class
        Paging.__SELECTED_CLASS__ = 'paging-current'; // 当前页样式class
        Paging.EVT_INDEX_CHANGED = '__EVENT_INDEX_CHANGED__'; // 改变页码时触发的事件名称
        Paging.EVT_PAGE_SIZE_CHANGED = '__EVENT_PAGE_SIZE_CHANGED__'; //改边每一页的页数时触发的事件名称
        return Paging;
    }(Component));
    exports.Paging = Paging;
});

define("Tree", ["require", "exports", "ElementTreeNode", "CheckBox"], function (require, exports, ElementTreeNode_1, checkBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Tree"/>
    var d = G.d;
    var tools = G.tools;
    /**
     * 树形组件对象
     */
    var Tree = /** @class */ (function (_super) {
        __extends(Tree, _super);
        function Tree(para) {
            var _this = _super.call(this, para) || this;
            // 是否禁用checkBox
            _this._disableCheckBox = false;
            return _this;
        }
        Tree.prototype.init = function (para) {
            var _this = this;
            _super.prototype.init.call(this, para);
            this.textWrapper.style.paddingLeft = ((this.deep - (this.root.isVirtual ? 1 : 0)) * 20) + 'px';
            // this.theme = para.theme;
            this.isShowCheckBox = para.isShowCheckBox === void 0 ? this.inherit('_isShowCheckBox') : para.isShowCheckBox;
            this.checked = para.checked === void 0 ? this.inherit('checked') : para.checked;
            this.toggleSelect = para.toggleSelect === void 0 ? this.inherit('toggleSelect') : para.toggleSelect;
            // 为当前树节点添加单击事件
            d.on(this.textWrapper, 'mousedown', function (e) {
                e.stopPropagation();
                _this.selected = _this.toggleSelect ? !_this.selected : true;
            });
            // 为当前树节点添加双击事件
            d.on(this.textWrapper, para.dblclickOpen === false ? 'mousedown' : 'dblclick', function (e) {
                e.stopPropagation();
                if (!_this.isLeaf) {
                    _this.expand = !_this.expand;
                }
                if (_this.isLeaf || _this.expand) {
                    _this.onOpen && _this.onOpen(_this);
                }
            });
            if (para.dblclickOpen !== false) {
                d.on(this.textWrapper, 'mousedown', '.tree-open-icon', function (e) {
                    // debugger;
                    e.stopPropagation();
                    _this.expand = !_this.expand;
                    if (_this.expand) {
                        _this.onOpen && _this.onOpen(_this);
                    }
                    // return false;
                });
            }
            if (para.container) {
                this.container = para.container;
                (para.width) && (this.wrapper.style.width = para.width + "px");
            }
        };
        Object.defineProperty(Tree.prototype, "isShowCheckBox", {
            get: function () {
                return this._isShowCheckBox;
            },
            set: function (isShow) {
                var _this = this;
                // debugger;
                if (isShow === this._isShowCheckBox) {
                    return;
                }
                if (isShow) {
                    if (!this._checkBox) {
                        var container = document.createElement('span');
                        container.classList.add('tree-check-box');
                        d.after(this.expandIconEl, container);
                        this._checkBox = new checkBox_1.CheckBox({
                            container: container,
                            status: this._checkBoxStatus,
                            disabled: this._disableCheckBox,
                            size: 16,
                            onSet: function (isChecked) {
                                // debugger;
                                _this.checked = isChecked;
                            }
                        });
                    }
                }
                this._checkBox && this._checkBox.wrapper.classList.toggle('hide', !isShow);
                this._isShowCheckBox = isShow;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 改变checkBox的状态
         * @param {number} status - 0未选中 1选中 2半选中
         * @param {string} relateType - 'parent' | 'children' 向上关联还是向下关联
         */
        Tree.prototype.checkBoxStatus = function (status, relateType) {
            if (this._checkBox && this._checkBox.status !== status) {
                this._checkBox.status = status;
            }
            this._checkBoxStatus = status;
            // 改变是否选中需同时改变子节点
            if (relateType === 'children' && (status === 0 || status === 1)) {
                this.children && this.children.forEach(function (tree) {
                    tree.checkBoxStatus(status, 'children');
                });
            }
            else if (relateType === 'parent') {
                // debugger;
                var parent_1 = this.parent, sibs = parent_1 ? parent_1.children : null, sibsLen_1 = Array.isArray(sibs) ? sibs.length : 0;
                if (sibsLen_1) {
                    var checkedLen_1 = 0, indeterminateLen_1 = 0;
                    // debugger;
                    sibs.forEach(function (tree) {
                        if (tree._checkBoxStatus === 1) {
                            checkedLen_1++;
                        }
                        else if (tree._checkBoxStatus === 2) {
                            indeterminateLen_1++;
                        }
                    });
                    // let status = indeterminateLen > 0 ? 2 : (checkedLen === sibsLen ? 1 : checkedLen > sibsLen);
                    var status_1 = (function () {
                        if (indeterminateLen_1 > 0) {
                            return 2;
                        }
                        else if (checkedLen_1 === sibsLen_1) {
                            return 1;
                        }
                        else if (checkedLen_1 === 0) {
                            return 0;
                        }
                        else {
                            return 2;
                        }
                    })();
                    parent_1.checkBoxStatus(status_1, 'parent');
                }
            }
        };
        Object.defineProperty(Tree.prototype, "checked", {
            get: function () {
                return this._checkBoxStatus === 1;
            },
            set: function (isChecked) {
                var status = isChecked ? 1 : 0;
                if (this._checkBoxStatus === status) {
                    return;
                }
                // 先关联子元素checkbox状态
                this.checkBoxStatus(status, 'children');
                // 再关联父元素checkbox状态
                this.checkBoxStatus(status, 'parent');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tree.prototype, "disableCheckBox", {
            get: function () {
                return this._disableCheckBox;
            },
            set: function (disabled) {
                this._checkBox && (this._checkBox.disabled = disabled);
                this._disableCheckBox = disabled;
            },
            enumerable: true,
            configurable: true
        });
        Tree.prototype.childrenAdd = function (para) {
            var _this = this;
            var paras = tools.toArray(para);
            // isAllTree = false;
            if (this.checked && tools.isNotEmpty(para)) {
                paras.forEach(function (p) {
                    if (!(p instanceof Tree)) {
                        p = p || {};
                        if (p.checked === undefined) {
                            p.checked = true;
                        }
                    }
                });
            }
            var nodes = _super.prototype.childrenAdd.call(this, para);
            Array.isArray(nodes) && nodes.forEach(function (node) {
                node.container = _this.childrenEl;
            });
            // let isFinal = isAllTree || (nodes.length < paras.length)
            // 改变父元素checkBox状态
            // debugger;
            // if(this.checked) {
            //     let aNode = nodes[0];
            //     aNode && aNode._checkBox && aNode.checkBoxStatus(aNode._checkBox.status, 'parent');
            // }
            return nodes;
        };
        /**
         * 设置tree主题 upDown(上下箭头) addMinus(加减号)
         * 默认值 upDown
         */
        // private _theme : string;
        // set theme(theme : string){
        //     // this._theme = tools.isEmpty(theme) ? 'upDown' : theme;
        //     // this._theme === 'upDown' ?
        //     //     (this.expandIcon = ['icon-zhankaishousuo-zhankai','icon-zhankaishousuo-shousuo']) :
        //     //     (this.expandIcon = ['icon-jianhao1','icon-jiahao1']);
        //     Tree.treeUtil.addOpenIcon(this,this.expandIcon[0],this.expandIcon[1]);
        // }
        // get theme(){
        //     return this._theme;
        // }
        Tree.prototype.wrapperCreate = function () {
            var wrapper = _super.prototype.wrapperCreate.call(this);
            wrapper.classList.add('tree-node');
            return wrapper;
        };
        Tree.prototype.getCheckedNodes = function () {
            return this.find(function (node) { return node.checked; });
        };
        return Tree;
    }(ElementTreeNode_1.ElementTreeNode));
    exports.Tree = Tree;
});

define("TableColumn", ["require", "exports", "TableBase"], function (require, exports, TableBase_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var TableColumn = /** @class */ (function () {
        function TableColumn(para) {
            this._isResize = false;
            // protected _inputInit:(cell: TableDataCell, col: this) => TextInput;
            // get inputInit(){
            //     return this._inputInit;
            // }
            // 首次渲染表格时的列最大宽度
            this._maxWidth = 200;
            // 列最小宽度（包括拖动、首次渲染时）
            this._minWidth = 40;
            this._show = true;
            // 获取元素
            // THead的col元素
            this._headWrapper = null;
            // TBody的col元素
            this._bodyWrapper = null;
            // TFoot的col元素
            this._footWrapper = null;
            // TableBase
            this._table = null;
            // 设置获取是否选中
            this._selected = false;
            // 设置获取列宽度
            this._width = 67;
            this.content = para.content;
            this._isVirtual = tools.isEmpty(para.isVirtual) ? false : para.isVirtual;
            this.isCanSort = tools.isEmpty(para.isCanSort) ? true : para.isCanSort;
            this._table = para.table;
            this._title = para.title;
            this._name = para.name;
            this._index = para.index;
            this.maxWidth = tools.isEmpty(para.maxWidth) ? 200 : para.maxWidth + 16;
            this.minWidth = tools.isEmpty(para.minWidth) ? 40 : para.minWidth;
            // this._inputInit = para.inputInit;
            this._isNumber = tools.isEmpty(para.isNumber) ? false : para.isNumber;
        }
        Object.defineProperty(TableColumn.prototype, "isVirtual", {
            get: function () {
                return this._isVirtual;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "isNumber", {
            get: function () {
                return this._isNumber;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "isResize", {
            get: function () {
                return this._isResize;
            },
            set: function (isResize) {
                this._isResize = isResize;
                this.headCells[0].wrapper.classList.toggle('resize-col', isResize);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "maxWidth", {
            get: function () {
                return this._maxWidth;
            },
            set: function (num) {
                if (typeof num === 'number' && num > 0) {
                    num = Math.max(this.minWidth, num);
                    this._maxWidth = num;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "minWidth", {
            get: function () {
                return this._minWidth;
            },
            set: function (num) {
                if (typeof num === 'number' && num > 0) {
                    num = Math.min(this.maxWidth, num);
                    this._minWidth = num;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "show", {
            get: function () {
                return this._show;
            },
            set: function (show) {
                show = !!show;
                if (!this.isVirtual && show !== this._show) {
                    this._show = show;
                    var handlers = this.table.eventHandlers[TableBase_1.TableBase.EVT_COL_VISIBILITY_CHANGED];
                    handlers && handlers.forEach(function (item) {
                        typeof item === 'function' && item(show);
                    });
                    this._headWrapper && this._headWrapper.classList.toggle('hide', !show);
                    this._bodyWrapper && this._bodyWrapper.classList.toggle('hide', !show);
                    this.table.colCount && this._footWrapper && this._footWrapper.classList.toggle('hide', !show);
                    this.cells.forEach(function (cells) {
                        cells.forEach(function (cell) {
                            cell.show = show;
                        });
                    });
                    this.table.updateTableWidth();
                }
            },
            enumerable: true,
            configurable: true
        });
        TableColumn.prototype._changeWrapper = function (wrappers) {
            this._headWrapper = wrappers.head;
            this._bodyWrapper = wrappers.body;
            this.table.colCount && wrappers.foot && (this._footWrapper = wrappers.foot);
        };
        Object.defineProperty(TableColumn.prototype, "headWrapper", {
            get: function () {
                if (!this.isVirtual && this._headWrapper === null) {
                    this._headWrapper = document.createElement('col');
                }
                return this._headWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "bodyWrapper", {
            get: function () {
                if (!this.isVirtual && this._bodyWrapper === null) {
                    this._bodyWrapper = document.createElement('col');
                }
                return this._bodyWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "footWrapper", {
            get: function () {
                if (!this.isVirtual && this._footWrapper === null) {
                    this._footWrapper = document.createElement('col');
                }
                return this._footWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "index", {
            get: function () {
                return this._index;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "table", {
            get: function () {
                return this._table;
            },
            set: function (table) {
                if (table !== this.table) {
                    this._table = table;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                if (tools.isNotEmpty(selected)) {
                    this._selected = selected;
                    this.bodyWrapper.classList.toggle('selected', selected);
                    this.headWrapper.classList.toggle('selected', selected);
                }
            },
            enumerable: true,
            configurable: true
        });
        TableColumn.prototype._setColElWidth = function () {
            if (!this.isVirtual) {
                this.bodyWrapper.style.width = this._width + 'px';
                this.headWrapper.style.width = this._width + 'px';
                this.footWrapper.style.width = this._width + 'px';
                this.table.updateTableWidth();
            }
        };
        Object.defineProperty(TableColumn.prototype, "width", {
            get: function () {
                return (this.show && !this.isVirtual) ? this._width : 0;
            },
            set: function (num) {
                if (typeof num === 'number' && num > 0) {
                    num = num < this.minWidth ? this.minWidth : num;
                    if (num !== this._width) {
                        // if(num > this.maxWidth){
                        //     num = this.maxWidth;
                        // }
                        this._width = num;
                        this._setColElWidth();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                if (this.headCells[0]) {
                    this.headCells[0].text = title;
                    this._title = this.headCells[0].text;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "headCells", {
            // 获取表头单元格
            get: function () {
                var cells = [];
                for (var _i = 0, _a = this.table.head.rows; _i < _a.length; _i++) {
                    var item = _a[_i];
                    if (!tools.isEmpty(item)) {
                        for (var _b = 0, _c = item.cells; _b < _c.length; _b++) {
                            var cell = _c[_b];
                            if (cell.name === this.name) {
                                cells.push(cell);
                                break;
                            }
                        }
                        if (cells.length === 1) {
                            break;
                        }
                    }
                }
                return cells;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "bodyCells", {
            // 获取TBody单元格
            get: function () {
                var result = [];
                for (var _i = 0, _a = (this.table.body.rows || []); _i < _a.length; _i++) {
                    var item = _a[_i];
                    item && (result.push(tools.isEmpty(item) ? null : item.cellGet(this.name)));
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "footCells", {
            // 获取表尾单元格
            get: function () {
                var result = [];
                if (this.table.colCount) {
                    for (var _i = 0, _a = this.table.foot.rows; _i < _a.length; _i++) {
                        var item = _a[_i];
                        item && (result.push(tools.isEmpty(item) ? null : item.cellGet(this.name)));
                    }
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "cells", {
            // 获取列下面的全部cell
            get: function () {
                var headCells = this.headCells, bodyCells = this.bodyCells, footCells = this.footCells;
                return [headCells, bodyCells, footCells];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableColumn.prototype, "data", {
            // 获取列下面的全部cell的数据
            get: function () {
                var data = [];
                for (var _i = 0, _a = this.cells[1]; _i < _a.length; _i++) {
                    var item = _a[_i];
                    data.push(item.data);
                }
                return data;
            },
            enumerable: true,
            configurable: true
        });
        // 列排序
        TableColumn.prototype.sort = function (order) {
            if (order === void 0) { order = 'DESC'; }
            if (this.isCanSort) {
                var indexes = this.table.tableData.sort(this.name, order);
                // this.table.render(0, this.table.tableData.get().length);
                return indexes;
            }
            return null;
        };
        TableColumn.prototype.destroy = function (isClear) {
            if (isClear === void 0) { isClear = true; }
            this.headWrapper && d.remove(this.headWrapper, isClear);
            this.bodyWrapper && d.remove(this.bodyWrapper, isClear);
            this.footWrapper && d.remove(this.footWrapper, isClear);
            var index = this.table.columns.indexOf(this);
            if (index !== -1) {
                this.table.columns.splice(index, 1);
            }
            this._table = null;
            if (isClear) {
                this._headWrapper = null;
                this._bodyWrapper = null;
                this._footWrapper = null;
            }
        };
        return TableColumn;
    }());
    exports.TableColumn = TableColumn;
});

define("TableRow", ["require", "exports", "TableCell"], function (require, exports, TableCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="TableRow"/>
    var d = G.d;
    var tools = G.tools;
    var TableRow = /** @class */ (function () {
        function TableRow(para) {
            this._height = 40;
            // protected _domIndex = null;
            // get domIndex() {
            //     if (this._domIndex === null) {
            //         let parent = (<HTMLElement>this.wrapper.parentNode);
            //         if (tools.isNotEmpty(parent)) {
            //             this._domIndex = Array.prototype.slice.call(parent.children).indexOf(this.wrapper);
            //         } else {
            //             this._domIndex = 0;
            //         }
            //         this.wrapper.dataset.domIndex = this._domIndex + '';
            //     }
            //     return this._domIndex;
            // }
            /*resetDomIndex() {
                let parent = (<HTMLElement>this.wrapper.parentNode);
        
                this._domIndex = null;
                if (tools.isNotEmpty(parent)) {
                    this._domIndex = Array.prototype.slice.call(parent.children).indexOf(this.wrapper);
                }
                this.wrapper.dataset.domIndex = this._domIndex;
            }*/
            // colGet(name?: string) {
            //     // return this.section.table.colGet(name);
            // }
            // 表格单元格对象数组
            this._cells = [];
            // tr标签
            this._wrapper = null;
            // 设置是否不可操作
            this._disabled = false;
            // 设置是否选中
            this._selected = false;
            // 设置是否显示
            this._isShow = true;
            this._cellMap = para.cells;
            this.index = para.index;
            this._section = para.section;
            this.tableData = this.section.table.tableData;
            this.disabled = para.disabled;
            this.selected = para.selected;
            this._cells = this.cellsInit(para.cells);
            this.content = para.content;
        }
        Object.defineProperty(TableRow.prototype, "cellMap", {
            get: function () {
                var result = this._cellMap;
                if (this.section.table.columns && this.section.table.columns.length > 0) {
                    result = {};
                    for (var _i = 0, _a = this.section.table.columns; _i < _a.length; _i++) {
                        var item = _a[_i];
                        result[item.name] = '';
                    }
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "section", {
            get: function () {
                return this._section;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "index", {
            get: function () {
                return this._index;
            },
            set: function (index) {
                this._index = index;
                this.wrapper.dataset.index = this._index + '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "height", {
            get: function () {
                return this._height;
            },
            set: function (height) {
                this._height = height;
                this.wrapper.style.height = height + 'px';
            },
            enumerable: true,
            configurable: true
        });
        // 设置高度，内部使用
        TableRow.prototype._setHeight = function (height) {
            this._height = height;
        };
        Object.defineProperty(TableRow.prototype, "cells", {
            get: function () {
                return this._cells;
            },
            enumerable: true,
            configurable: true
        });
        // cellsSet(cellPara: ITableCellPara[]) {
        //     // tools.diffOperate(cellPara, this.cells, {})
        // }
        // 创建Cell对象
        TableRow.prototype.cellCreate = function (data) {
            var para = {
                row: this
            };
            if (typeof data === 'object') {
                para = Object.assign(data, para);
            }
            else {
                para.data = data;
            }
            var cellClass = this.cellClass();
            return new cellClass(para);
        };
        TableRow.prototype.cellGet = function (col) {
            var result = null;
            if (Array.isArray(col)) {
                result = [];
                for (var _i = 0, col_1 = col; _i < col_1.length; _i++) {
                    var item = col_1[_i];
                    result.push(this.cells[this.section.table.getColIndex(item)] || null);
                }
            }
            else {
                result = this.cells[this.section.table.getColIndex(col)] || null;
            }
            return result;
        };
        // 添加cell
        TableRow.prototype.cellAdd = function (cell) {
            var _this = this;
            var cells = Array.isArray(cell) ? cell : [cell];
            cells.forEach(function (item) {
                var cell = item;
                if (item.constructor === Object) {
                    var TableClass = _this.cellClass();
                    item.row = _this;
                    cell = new TableClass(item);
                }
                _this._cells.push(cell);
            });
        };
        // 删除cell
        TableRow.prototype.cellDel = function (index, isClear) {
            if (isClear === void 0) { isClear = true; }
            var cells = this._cells[this.section.table.getColIndex(index)];
            cells.destroy(isClear);
            return isClear ? null : cells[0];
        };
        Object.defineProperty(TableRow.prototype, "wrapper", {
            get: function () {
                if (this._wrapper === null) {
                    this._wrapper = document.createElement('tr');
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                if (tools.isNotEmpty(disabled)) {
                    this._selected = disabled;
                    this.wrapper.classList.toggle('disabled', disabled);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "selected", {
            get: function () {
                return this._disabled;
            },
            set: function (selected) {
                if (tools.isNotEmpty(selected)) {
                    this._selected = selected;
                    this.wrapper.classList.toggle('selected', selected);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableRow.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (bool) {
                if (tools.isNotEmpty(bool)) {
                    this._isShow = bool;
                    this.wrapper.classList.toggle('hide', !bool);
                }
            },
            enumerable: true,
            configurable: true
        });
        // 销毁
        TableRow.prototype.destroy = function (isClear) {
            if (isClear === void 0) { isClear = true; }
            d.remove(this._wrapper, isClear);
            if (isClear) {
                this._cells = this.cells || [];
                this._cells.forEach(function (item) {
                    item.destroy(isClear);
                });
                this._wrapper = null;
            }
        };
        return TableRow;
    }());
    exports.TableRow = TableRow;
    var TableDataRow = /** @class */ (function (_super) {
        __extends(TableDataRow, _super);
        function TableDataRow(para) {
            return _super.call(this, para) || this;
        }
        TableDataRow.prototype.cellClass = function () {
            return this.section.table.DataCellConstruct;
        };
        Object.defineProperty(TableDataRow.prototype, "isEdited", {
            // 获取该列是否编辑过（与原始数据不一致）
            get: function () {
                var flag = false;
                this.cells.forEach(function (cell) { return flag = flag || cell.isEdited; });
                return flag;
            },
            enumerable: true,
            configurable: true
        });
        TableDataRow.prototype.cellsInit = function (obj) {
            var cellsObj = [], cells = obj || {}, num = 0;
            for (var key in this.cellMap) {
                var cell = this.cellGet(key);
                if (tools.isEmpty(cell)) {
                    if (!cells[key]) {
                        cells[key] = {
                            row: this,
                            name: key,
                            data: cells[key] && cells[key].data
                        };
                    }
                    else {
                        cells[key].row = this;
                        cells[key].name = key;
                    }
                    cellsObj.push(this.cellCreate(cells[key]));
                    num++;
                }
                else {
                    for (var attr in cells[key]) {
                        cell[attr] = cells[key][attr];
                    }
                }
            }
            return cellsObj;
        };
        Object.defineProperty(TableDataRow.prototype, "data", {
            get: function () {
                // let data = {};
                return this.tableData.get(this.index);
                // for(let item of this.cells){
                //     data[item.name] = item.data;
                // }
                // return data;
            },
            set: function (data) {
                if (!data) {
                    return;
                }
                // let result = {};
                this.tableData.update(data, this.index);
                for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                    var item = _a[_i];
                    item.data = data[item.name];
                }
            },
            enumerable: true,
            configurable: true
        });
        TableDataRow.prototype.render = function () {
            // let result = {};
            for (var _i = 0, _a = this.cells; _i < _a.length; _i++) {
                var item = _a[_i];
                item.render();
            }
        };
        Object.defineProperty(TableDataRow.prototype, "cells", {
            get: function () {
                return this._cells;
            },
            enumerable: true,
            configurable: true
        });
        return TableDataRow;
    }(TableRow));
    exports.TableDataRow = TableDataRow;
    var TableHeaderRow = /** @class */ (function (_super) {
        __extends(TableHeaderRow, _super);
        function TableHeaderRow() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TableHeaderRow.prototype.cellClass = function () {
            return TableCell_1.TableHeaderCell;
        };
        Object.defineProperty(TableHeaderRow.prototype, "cells", {
            get: function () {
                return this._cells;
            },
            enumerable: true,
            configurable: true
        });
        TableHeaderRow.prototype.cellsInit = function (obj) {
            var cellsObj = [], cells = obj, num = 0;
            if (tools.isNotEmpty(cells)) {
                for (var key in cells) {
                    var cell = this.cellGet(key);
                    if (tools.isEmpty(cell)) {
                        if (!cells[key]) {
                            cells[key] = {
                                row: null,
                                name: key,
                            };
                        }
                        else {
                            cells[key].row = null;
                            cells[key].name = key;
                        }
                        cellsObj.push(this.cellCreate(cells[key]));
                        num++;
                    }
                    else {
                        for (var attr in cells[key]) {
                            cell[attr] = cells[key][attr];
                        }
                    }
                }
            }
            return cellsObj;
        };
        return TableHeaderRow;
    }(TableRow));
    exports.TableHeaderRow = TableHeaderRow;
    // TFoot
    var TableFooterRow = /** @class */ (function (_super) {
        __extends(TableFooterRow, _super);
        function TableFooterRow() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TableFooterRow.prototype.cellClass = function () {
            return TableCell_1.TableFooterCell;
        };
        TableFooterRow.prototype.cellsInit = function (obj) {
            var cellsObj = [], cells = obj;
            // let json = {},
            //     options = {};
            // for(let item of this.tableData.get()){
            //     for(let key in item){
            //         if(!json[key]){
            //             options[key] = [];
            //             json[key] = {
            //                 [item[key]]: 1
            //             };
            //         }
            //         if(json[key][item[key]] !== 1){
            //             json[key][item[key]] = 1;
            //             options[key].push(item[key]);
            //         }
            //     }
            // }
            if (tools.isNotEmpty(cells)) {
                for (var key in cells) {
                    var cell = this.cellGet(key);
                    if (tools.isEmpty(cell)) {
                        if (!cells[key]) {
                            cells[key] = {
                                row: null,
                                name: key,
                            };
                        }
                        else {
                            cells[key].row = null;
                            cells[key].name = key;
                            // cells[key].options = options[key];
                        }
                        cellsObj.push(this.cellCreate(cells[key]));
                    }
                    else {
                        for (var attr in cells[key]) {
                            cell[attr] = cells[key][attr];
                        }
                    }
                }
            }
            return cellsObj;
        };
        Object.defineProperty(TableFooterRow.prototype, "cells", {
            get: function () {
                return this._cells;
            },
            enumerable: true,
            configurable: true
        });
        return TableFooterRow;
    }(TableRow));
    exports.TableFooterRow = TableFooterRow;
});

define("TableSection", ["require", "exports", "TableRow"], function (require, exports, TableRow_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var TableSection = /** @class */ (function () {
        function TableSection(para) {
            this._table = null;
            //  获取元素
            this._wrapper = null;
            this._scrollWrapper = null;
            this._colgroup = null;
            //  获取全部行rows对象
            this._rows = [];
            this.content = para.content;
            this._table = para.table;
            this.tableData = this.table.tableData;
            this._wrapper = para.wrapper || null;
            this._scrollWrapper = para.scrollWrapper || null;
            this.innerWrapper = d.create('<div class="section-inner-wrapper"></div>');
            var tableSection = document.createElement(this.tableTagName());
            this.tableEl = document.createElement('table');
            d.append(this.tableEl, this.colgroup);
            d.append(this.tableEl, tableSection);
            d.append(this.innerWrapper, this.tableEl);
            if (para.appendRule === 0) {
                d.prepend(this.scrollWrapper, this.innerWrapper);
            }
            else if (para.appendRule === 1) {
                if (this.scrollWrapper.children.length > 1) {
                    d.after(this.scrollWrapper.children[0], this.innerWrapper);
                }
                else if (this.scrollWrapper.children.length === 1) {
                    d.prepend(this.scrollWrapper, this.innerWrapper);
                }
            }
            else {
                d.append(this.scrollWrapper, this.innerWrapper);
                d.append(this.wrapper, this.scrollWrapper);
            }
        }
        Object.defineProperty(TableSection.prototype, "table", {
            get: function () {
                return this._table;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSection.prototype, "wrapper", {
            get: function () {
                if (this._wrapper === null) {
                    this._wrapper = document.createElement('div');
                    this._wrapper.classList.add(this.className());
                    if (this instanceof TableBody) {
                        var headRowLength = this.table.head.rows.length;
                        if (headRowLength !== 1) {
                            this._wrapper.style.height = 'calc(100% - ' + (headRowLength * 40) + 'px)';
                        }
                    }
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSection.prototype, "scrollWrapper", {
            get: function () {
                if (this._scrollWrapper === null) {
                    this._scrollWrapper = document.createElement('div');
                    this._scrollWrapper.classList.add('table-scroll-wrapper');
                }
                return this._scrollWrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSection.prototype, "colgroup", {
            get: function () {
                if (this._colgroup === null) {
                    this._colgroup = document.createElement('colgroup');
                }
                return this._colgroup;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableSection.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            //  设置 rows
            set: function (row) {
                this._rows = null;
                if (tools.isNotEmpty(row)) {
                    this._rows = row;
                }
            },
            enumerable: true,
            configurable: true
        });
        //  获取某个行rows
        TableSection.prototype.rowGet = function (index) {
            var row = this.rows[index];
            return row || null;
        };
        //  删除某个行rows
        TableSection.prototype.rowDel = function (index, isClear) {
            if (isClear === void 0) { isClear = true; }
            var result = isClear ? null : [];
            if (!Array.isArray(index)) {
                index = [index];
            }
            this._rows = this._rows || [];
            for (var i = 0; i < this._rows.length; i++) {
                if (this._rows[i]) {
                    if (index.indexOf(this._rows[i].index) > -1) {
                        var row = this._rows.splice(i, 1, null)[0];
                        var index_1 = row.index;
                        row.destroy(isClear);
                        if (!isClear) {
                            result.push(row);
                        }
                        else {
                            this.tableData.del(index_1);
                        }
                    }
                }
            }
            this._rows = this._rows.filter(function (row) { return row !== null; });
            if (this instanceof TableBody) {
                this.resetRowIndex();
            }
            return result;
        };
        //  获取全部被选中的行
        TableSection.prototype.rowSelectedGet = function () {
            this._rows = this.rows || [];
            var result = [];
            this._rows.forEach(function (item, index) {
                if (item.selected) {
                    result.push(item);
                }
            });
            return result;
        };
        return TableSection;
    }());
    exports.TableSection = TableSection;
    var TableBody = /** @class */ (function (_super) {
        __extends(TableBody, _super);
        function TableBody(para) {
            var _this = _super.call(this, para) || this;
            _this._rows = [];
            var data = para.data, cols = para.cols[para.cols.length - 1] && para.cols[para.cols.length - 1], rows = [];
            data && data.forEach(function (item, i) {
                var cells = {};
                for (var key in cols) {
                    var name_1 = cols[key].name;
                    cells[name_1] = {
                        name: key,
                        data: item[name_1]
                    };
                }
                rows.push(new TableRow_1.TableDataRow({
                    cells: cells,
                    section: _this,
                    index: i
                }));
            });
            _this.rows = rows;
            rows.forEach(function (item, index) {
                d.append(d.query('tbody', _this.tableEl), item.wrapper);
                // item.resetDomIndex();
            });
            return _this;
        }
        TableBody.prototype.rowGet = function (index) {
            return _super.prototype.rowGet.call(this, index);
        };
        Object.defineProperty(TableBody.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            // 设置 rows
            set: function (row) {
                this._rows = null;
                if (tools.isNotEmpty(row)) {
                    this._rows = row;
                }
            },
            enumerable: true,
            configurable: true
        });
        TableBody.prototype.resetRowIndex = function () {
            this.rows.forEach(function (row, index) {
                row.index = index;
            });
        };
        Object.defineProperty(TableBody.prototype, "data", {
            get: function () {
                return this.tableData.get();
            },
            set: function (data) {
                if (Array.isArray(data)) {
                    // console.log(data)
                    this.tableData.set(data);
                    this.render();
                }
            },
            enumerable: true,
            configurable: true
        });
        TableBody.prototype.render = function (x, y, w, z) {
            var _this = this;
            if (z === void 0) { z = true; }
            var data = [], isArray = Array.isArray(x), len = this.tableData.get().length - 1;
            z = isArray ? (tools.isEmpty(w) ? true : w) : z;
            w = isArray ? (tools.isEmpty(y) ? void 0 : y) : w;
            y = isArray ? null : (tools.isEmpty(y) ? len + 1 : y);
            x = isArray ? x : (tools.isEmpty(x) ? 0 : x);
            var dataLen = this.tableData.get().length;
            if (dataLen !== 0) {
                if (isArray) {
                    x.forEach(function (item, index) {
                        if (typeof item === 'number') {
                            data.push([_this.tableData.get(item), item]);
                        }
                        else {
                            data.push([item, index]);
                        }
                    });
                }
                else {
                    for (var i = 0; i < Math.min(y, dataLen); i++) {
                        data.push([this.tableData.get(x + i), x + i]);
                    }
                }
            }
            this._rows = this.rows || [];
            if (tools.isEmpty(w)) {
                var delIndexes_1 = [];
                d.diff(data, this._rows, {
                    replace: function (n, o) {
                        if (tools.isNotEmpty(o) && typeof n !== 'undefined') {
                            var row = _this.rowGet(_this.rows.indexOf(o));
                            row.render();
                            row.index = n[1];
                        }
                        else if (tools.isEmpty(o) && typeof n !== 'undefined') {
                            var cells = {};
                            for (var _i = 0, _a = _this.table.columns; _i < _a.length; _i++) {
                                var item = _a[_i];
                                if (n[0] && n[0][item.name]) {
                                    cells[item.name] = {
                                        data: n[0][item.name]
                                    };
                                }
                            }
                            var row = new TableRow_1.TableDataRow({
                                cells: cells,
                                section: _this,
                                index: n[1]
                            });
                            _this._rows.splice(n[1], 0, row);
                            var parent_1 = d.query('tbody', _this.tableEl);
                            var child = parent_1.children[n[1]];
                            if (tools.isEmpty(child)) {
                                d.append(parent_1, row.wrapper);
                            }
                            else {
                                d.after(child, row.wrapper);
                            }
                        }
                        else if (tools.isNotEmpty(o) && typeof n === 'undefined') {
                            delIndexes_1.push(o.index);
                        }
                    },
                    create: function (n) {
                        if (typeof n !== 'undefined') {
                            var cells = {};
                            for (var _i = 0, _a = _this.table.columns; _i < _a.length; _i++) {
                                var item = _a[_i];
                                if (n[0] && n[0][item.name]) {
                                    cells[item.name] = {
                                        data: n[0][item.name]
                                    };
                                }
                            }
                            var row = new TableRow_1.TableDataRow({
                                cells: cells,
                                section: _this,
                                index: n[1]
                            });
                            _this._rows.splice(n[1], 0, row);
                            d.append(d.query('tbody', _this.tableEl), row.wrapper);
                        }
                    },
                    destroy: function (o) {
                        if (tools.isNotEmpty(o)) {
                            delIndexes_1.push(o.index);
                        }
                        // o.destroy(true, true)
                    }
                });
                this.rowDel(delIndexes_1.sort().reverse(), z);
                // this.table.adjustColWidth(tools.isMb ? Math.max(0, len - 50) : 0);
            }
            else {
                data.forEach(function (n) {
                    if (typeof n !== 'undefined') {
                        var cells = {};
                        for (var _i = 0, _a = _this.table.columns; _i < _a.length; _i++) {
                            var item = _a[_i];
                            if (n[0] && n[0][item.name]) {
                                cells[item.name] = {
                                    data: n[0][item.name]
                                };
                            }
                        }
                        var row = new TableRow_1.TableDataRow({
                            cells: cells,
                            section: _this,
                            index: n[1]
                        });
                        if (w === -1) {
                            _this._rows.push(row);
                            d.append(d.query('tbody', _this.tableEl), row.wrapper);
                        }
                        else {
                            if (_this._rows[w]) {
                                d.before(d.query('tbody', _this.tableEl).children[w], row.wrapper);
                            }
                            else {
                                d.append(d.query('tbody', _this.tableEl), row.wrapper);
                            }
                            _this._rows.splice(w, 0, row);
                            w++;
                        }
                    }
                });
                this.resetRowIndex();
            }
            z && this.table.updateColOption();
        };
        TableBody.prototype.rowAdd = function (rows, index) {
            this._rows = this._rows || [];
            index = index || this.rows.length;
            for (var _i = 0, _a = tools.toArray(rows); _i < _a.length; _i++) {
                var row = _a[_i];
                var cells = row.cells, data = {};
                for (var key in cells) {
                    data[key] = cells[key].data;
                }
                row.index = tools.isEmpty(row.index) ? this.tableData.get().length : row.index;
                row.section = this;
                this.tableData.add(data);
                // console.log(row);
                if (row.constructor === Object) {
                    row = new TableRow_1.TableDataRow(row);
                }
                if (this.rows[index - 1]) {
                    if (this.rows[index - 1] !== row.wrapper) {
                        d.after(this.rows[index - 1].wrapper, row.wrapper);
                    }
                }
                else {
                    d.append(d.query('tbody', this.tableEl), row.wrapper);
                }
                this._rows.push(row);
            }
            // this.resetDomIndex();
        };
        TableBody.prototype.className = function () {
            return 'table-body-wrapper';
        };
        TableBody.prototype.tableTagName = function () {
            return 'tbody';
        };
        return TableBody;
    }(TableSection));
    exports.TableBody = TableBody;
    var TableHead = /** @class */ (function (_super) {
        __extends(TableHead, _super);
        function TableHead(para) {
            var _this = _super.call(this, para) || this;
            _this._rows = _this.rows || [];
            /*para.cols[0].forEach((col) => {
                let index = 0;
                let rowspan = tools.isEmpty(col.rowspan) ? 1 : col.rowspan;
    
            });*/
            para.cols.forEach(function (items, index) {
                var cells = {};
                items.forEach(function (item, i) {
                    var name = item.name;
                    cells[name] = {
                        'name': name,
                        'text': item.title,
                        'rowspan': item.rowspan,
                        'colspan': item.colspan,
                        'index': i
                    };
                });
                var row = new TableRow_1.TableHeaderRow({
                    cells: cells,
                    section: _this,
                    index: index
                });
                _this._rows.push(row);
            });
            for (var _i = 0, _a = _this.rows; _i < _a.length; _i++) {
                var item = _a[_i];
                d.append(d.query('thead', _this.tableEl), item.wrapper);
            }
            return _this;
        }
        TableHead.prototype.className = function () {
            return 'table-head-wrapper';
        };
        TableHead.prototype.tableTagName = function () {
            return 'thead';
        };
        TableHead.prototype.rowAdd = function (row) {
            // this._rows = this._rows || [];
            // let rows: any = Array.isArray(row) ? row : [row],
            //     len = this.rows.length;
            // for (let item of rows) {
            //     let row = item;
            //     if (item.constructor === Object) {
            //         row = new TableHeaderRow(item);
            //     }
            //     row.index = len;
            //     len ++;
            //     d.append(d.query('thead', this.tableEl), row.wrapper);
            //     this._rows.push(row);
            // }
        };
        return TableHead;
    }(TableSection));
    exports.TableHead = TableHead;
    var TableFoot = /** @class */ (function (_super) {
        __extends(TableFoot, _super);
        function TableFoot(para) {
            var _this = _super.call(this, para) || this;
            _this._rows = [];
            var cells = {};
            para.cols.forEach(function (item, index) {
                cells[item.name] = {
                    'name': item.name,
                    'rowspan': item.rowspan,
                    'colspan': item.colspan,
                    'index': index,
                    'colCount': tools.isEmpty(para.text),
                    'text': para.text
                };
            });
            _this.rows = [new TableRow_1.TableFooterRow({
                    cells: cells,
                    section: _this,
                    index: 0
                })];
            for (var _i = 0, _a = _this.rows; _i < _a.length; _i++) {
                var item = _a[_i];
                d.append(d.query('tfoot', _this.tableEl), item.wrapper);
            }
            return _this;
        }
        TableFoot.prototype.className = function () {
            return 'table-foot-wrapper';
        };
        TableFoot.prototype.tableTagName = function () {
            return 'tfoot';
        };
        TableFoot.prototype.rowAdd = function (row, index) {
        };
        Object.defineProperty(TableFoot.prototype, "rows", {
            get: function () {
                return this._rows;
            },
            // 设置 rows
            set: function (row) {
                this._rows = null;
                if (tools.isNotEmpty(row)) {
                    this._rows = row;
                }
            },
            enumerable: true,
            configurable: true
        });
        // 渲染表尾
        TableFoot.prototype.render = function () {
            var _this = this;
            // this.wrapper.style.display = 'none';
            // 获取去重数据
            var getColUniqueData = function () {
                var colsName = {}, colCounts = _this.table.tableData.getColCounts();
                for (var _i = 0, _a = Object.keys(colCounts); _i < _a.length; _i++) {
                    var key = _a[_i];
                    if (tools.isEmpty(colsName[key])) {
                        colsName[key] = [];
                    }
                    for (var _b = 0, _c = Object.values(colCounts[key]); _b < _c.length; _b++) {
                        var value = _c[_b];
                        colsName[key].push(value[0]);
                    }
                }
                return colsName;
            };
            var data = getColUniqueData();
            this._rows = this._rows || [];
            this._rows.forEach(function (row) {
                row.cells && row.cells.forEach(function (cell) {
                    if (cell.colCount && !cell.isVirtual) {
                        cell.options = data[cell.name] || [];
                    }
                });
            });
            // this.wrapper.style.display = 'block';
            // function unique(arr: Array<any>){
            //     let result = [];
            //     for(let item of arr){
            //         if(result.indexOf(item) === -1){
            //             result.push(item);
            //         }
            //     }
            //     return result;
            // }
        };
        return TableFoot;
    }(TableSection));
    exports.TableFoot = TableFoot;
});

define("TableBase", ["require", "exports", "TableColumn", "TableSection", "TableCell"], function (require, exports, TableColumn_1, TableSection_1, TableCell_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var tools = G.tools;
    var d = G.d;
    var TableBase = /** @class */ (function (_super) {
        __extends(TableBase, _super);
        function TableBase(para, wrappers) {
            var _this = _super.call(this, para) || this;
            _this.head = null; // THead对象
            _this.body = null; // TBody对象
            _this.foot = null; // TFoot对象
            _this.columns = []; // 列对象数组
            _this._isWrapLine = false;
            _this._editing = false;
            // set editing(isEdit: boolean){
            //     if(this._editing !== isEdit){
            //         this._editing = isEdit;
            //         if(isEdit){
            //             this.tableData.edit.open();
            //         }else{
            //             this.body.rows.forEach((row) => {
            //                 if(row.isEdited){
            //                     row.cells.forEach((cell) => {
            //                         cell.isEdited = false;
            //                     });
            //                 }
            //             })
            //         }
            //     }
            // }
            _this.events = (function (self) {
                // 列统计change事件
                function change() {
                    var option = this.options[this.selectedIndex];
                    var values = d.data(option), key = d.closest(this, '[data-name]').dataset.name;
                    var indexes = self.tableData.colCount(key, values);
                    // 触发TableBase.EVT_COL_COUNT_CHANGED事件，并将对应的索引返回
                    var handlers = self.eventHandlers[TableBase.EVT_COL_COUNT_CHANGED];
                    handlers && handlers.forEach(function (item) {
                        typeof item === 'function' && item(indexes);
                    });
                    self.body.render(0, Object.keys(self.tableData.get()).length, void 0, false);
                }
                return {
                    on: function () {
                        if (self.colCount) {
                            d.off(self.wrapper, 'change', 'select', change);
                            d.on(self.wrapper, 'change', 'select', change);
                        }
                    },
                    off: function () {
                        if (self.colCount) {
                            d.off(self.wrapper, 'change', 'select', change);
                        }
                    }
                };
            })(_this);
            //设置表格的最大高度
            _this._maxHeight = null;
            //tableBase的数据
            _this.tableData = (function (self) {
                var allData = [], data = null, sortMap = {
                    indexes: [],
                    key: null,
                    rule: null,
                }, isChangeData = false, conditions = {}, //限制条件
                lastUniIndex = 0, objOfIndex = {}, colCounts = {}; //限制条件获取的数据的对应索引值
                function initColCount(data) {
                    var colCounts = {};
                    data.forEach(function (obj) {
                        for (var _i = 0, _a = Object.keys(obj); _i < _a.length; _i++) {
                            var key = _a[_i];
                            tools.isEmpty(colCounts[key]) && (colCounts[key] = {});
                            tools.isEmpty(colCounts[key][obj[key]]) ?
                                (colCounts[key][obj[key]] = [obj[key], 1]) :
                                colCounts[key][obj[key]][1]++;
                        }
                    });
                    return colCounts;
                }
                //根据条件限制数据
                function astrictData(data) {
                    var result = data;
                    if (tools.isEmpty(conditions)) {
                        return null;
                    }
                    else {
                        var keys = Object.keys(conditions);
                        keys.sort(function (a, b) {
                            if (conditions[a].length > conditions[b].length)
                                return -1;
                            else if ((conditions[a].length < conditions[b].length))
                                return 1;
                            else
                                return 0;
                        });
                        keys.forEach(function (key, i) {
                            var array = [];
                            conditions[key] && conditions[key].forEach(function (val) {
                                result.forEach(function (item, index) {
                                    var eq = val == (item[key]);
                                    if (eq) {
                                        array.push(item);
                                        if (typeof objOfIndex[key] !== 'undefined') {
                                            var index_1 = data.indexOf(item);
                                            objOfIndex[key].indexOf(index_1) === -1 && objOfIndex[key].push(index_1);
                                        }
                                    }
                                });
                            });
                            result = array;
                        });
                        /*data.forEach((item, index) =>{
                            let accord = true;
                            for(let key in conditions){
                                conditions[key] && conditions[key].forEach((val) => {
                                    let eq = val == (item[key]);
                                    accord = accord && (eq);
                                    if(eq && typeof objOfIndex[key] !== 'undefined'){
                                        objOfIndex[key].indexOf(index) === -1 && objOfIndex[key].push(index);
                                    }
                                });
                            }
                            if(accord){
                                array.push(item);
                            }
                        })*/
                    }
                    return result;
                }
                return {
                    destroy: function () {
                        allData = [];
                        data = null;
                    },
                    edit: (function () {
                        var originalData = null;
                        return {
                            open: function () {
                                if (originalData === null) {
                                    originalData = allData.map(function (data) { return Object.assign({}, data); });
                                }
                            },
                            close: function () {
                                if (originalData !== null) {
                                    allData = originalData;
                                    originalData = null;
                                }
                            },
                            getOriginalData: function () {
                                return (originalData || []).slice();
                            },
                        };
                    })(),
                    getSortType: function () {
                        return sortMap.key;
                    },
                    colCountByIndex: function (indexes) {
                        if (Array.isArray(indexes)) {
                            data = [];
                            tools.toArray(indexes).forEach(function (item) {
                                data.push(allData[item]);
                            });
                        }
                        else {
                            data = null;
                        }
                        return (data || []).slice();
                    },
                    colCount: function (key, value) {
                        isChangeData = true;
                        if (tools.isEmpty(value)) {
                            delete conditions[key];
                            delete objOfIndex[key];
                        }
                        else {
                            conditions[key] = value;
                            objOfIndex[key] = [];
                        }
                        data = astrictData(allData);
                        return intersect(Object.values(objOfIndex));
                        //求交集
                        function intersect(arr) {
                            var minLen = Infinity, minLenArr = null, data = [];
                            if (arr.length === 1) {
                                return arr[0];
                            }
                            else if (arr.length === 0) {
                                return null;
                            }
                            for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
                                var item = arr_1[_i];
                                var len = item.length;
                                if (len < minLen) {
                                    minLen = len;
                                    minLenArr = item;
                                }
                            }
                            var _loop_1 = function (item) {
                                var result = [];
                                arr.forEach(function (a) {
                                    result.push(a.indexOf(item));
                                });
                                if (result.indexOf(-1) === -1) {
                                    data.push(item);
                                }
                            };
                            for (var _a = 0, minLenArr_1 = minLenArr; _a < minLenArr_1.length; _a++) {
                                var item = minLenArr_1[_a];
                                _loop_1(item);
                            }
                            return data;
                        }
                    },
                    sortByIndex: function (sortRule) {
                        sortMap.key = sortRule.key;
                        sortMap.rule = sortRule.rule;
                        if (sortRule.indexes.length === this.get().length) {
                            var data_1 = [];
                            for (var _i = 0, _a = sortRule.indexes; _i < _a.length; _i++) {
                                var i = _a[_i];
                                data_1.push(allData[i]);
                            }
                            allData = data_1;
                        }
                    },
                    sort: function (key, order) {
                        var array = data || allData;
                        sortMap.indexes = Array.from({ length: array.length }, function (v, k) { return k; });
                        // 判断key值是否与上次排序一值和期间数据是否改变（isChangeData）
                        // 如果都为真，直接方向排序数据
                        if (sortMap.key === key && !isChangeData) {
                            if (sortMap.rule !== order) {
                                sortMap.rule = order;
                                array.reverse();
                                sortMap.indexes.reverse();
                            }
                        }
                        else {
                            sortMap.key = key;
                            sortMap.rule = order;
                            isChangeData = false;
                            for (var i = 0; i < array.length; i++) {
                                for (var j = i + 1; j < array.length; j++) {
                                    var jVal = tools.str.toEmpty(array[j][key]), iVal = tools.str.toEmpty(array[i][key]);
                                    if (order === 'DESC' && jVal >= iVal) {
                                        exchange(i, j);
                                    }
                                    else if (order === 'ASC' && jVal <= iVal) {
                                        exchange(i, j);
                                    }
                                }
                            }
                        }
                        // let events = self.eventHandlers[TableBase.EVT_SORTED];
                        // console.log(self);
                        // events && events.forEach((item) => {
                        //     typeof item === 'function' && item({
                        //         name: key,
                        //         order
                        //     });
                        // });
                        return sortMap;
                        // 交换数据
                        function exchange(i, j) {
                            var n = sortMap.indexes[j];
                            sortMap.indexes[j] = sortMap.indexes[i];
                            sortMap.indexes[i] = n;
                            var tmp = array[j];
                            array[j] = array[i];
                            array[i] = tmp;
                        }
                    },
                    // 获取数据，没有参数直接获取全部数据
                    get: function (index) {
                        var res = data || allData;
                        if (typeof index === 'undefined') {
                            return res;
                        }
                        var result = [];
                        for (var _i = 0, _a = tools.toArray(index); _i < _a.length; _i++) {
                            var i = _a[_i];
                            result.push(Object.assign({}, res[i]));
                        }
                        return Array.isArray(index) ? result : result[0];
                    },
                    set: function (arrData) {
                        allData = arrData.map(function (data, index) {
                            lastUniIndex = index;
                            data[TableBase.GUID_INDEX] = lastUniIndex;
                            return data;
                        });
                        data = null;
                        this.clearConditions();
                        colCounts = initColCount(allData);
                        isChangeData = true;
                    },
                    add: function (data, index) {
                        // let num = allData.length;
                        tools.toArray(data).forEach(function (data) {
                            data[TableBase.GUID_INDEX] = ++lastUniIndex;
                            if (typeof index === 'number') {
                                allData.splice(index, 0, data);
                                index++;
                            }
                            else {
                                allData.push(data);
                            }
                        });
                        colCounts = initColCount(allData);
                        isChangeData = true;
                    },
                    initColCount: function () {
                        colCounts = initColCount(allData);
                    },
                    // 更新数据
                    update: function (data, index) {
                        var cols = [];
                        if (allData[index]) {
                            for (var key in data) {
                                if (self.foot) {
                                    var cell = self.foot.rows[0].cells[self.getColIndex(key)];
                                    if (cell && colCounts[key]) {
                                        if (tools.isEmpty(colCounts[key][data[key]])) {
                                            colCounts[key][allData[index][key]][1] === 1 ?
                                                cell.replaceOption(data[key], allData[index][key]) :
                                                cell.addOption(data[key]);
                                        }
                                        else if (colCounts[key][allData[index][key]][1] === 1) {
                                            cell.removeOption(allData[index][key]);
                                        }
                                    }
                                }
                                if (self.colCount && colCounts[key]) {
                                    tools.isEmpty(colCounts[key][data[key]]) ?
                                        (colCounts[key][data[key]] = [data[key], 1]) :
                                        (colCounts[key][data[key]][1]++);
                                    colCounts[key][allData[index][key]][1]--;
                                    colCounts[key][allData[index][key]][1] === 0 && delete colCounts[key][allData[index][key]];
                                }
                                allData[index][key] = data[key];
                                cols.push(key);
                            }
                            isChangeData = true;
                        }
                        // 当tableBase进入编辑状态时，修改数据会触发TableBase.EVT_EDITED事件。
                        if (self.editing) {
                            var events = self.eventHandlers[TableBase.EVT_EDITED];
                            events && events.forEach(function (item) {
                                typeof item === 'function' && item({
                                    cols: cols,
                                    row: index,
                                });
                            });
                        }
                    },
                    // 判断索引是否在数据中
                    has: function (index) {
                        return index in allData;
                    },
                    del: function (index, name) {
                        for (var _i = 0, _a = tools.toArray(index); _i < _a.length; _i++) {
                            var i = _a[_i];
                            tools.isEmpty(name) ? allData.splice(i, 1) : delete allData[i][name];
                        }
                        isChangeData = true;
                    },
                    getAll: function () {
                        return allData.slice();
                    },
                    clearConditions: function () {
                        conditions = {};
                        data = null;
                    },
                    getColCounts: function () {
                        return colCounts;
                    }
                };
            })(_this);
            _this.content = para.content;
            _this.deviation = para.deviation || 0;
            _this._colCount = tools.isEmpty(para.colCount) ? false : para.colCount;
            if (tools.isNotEmpty(para.isHeadTextWrap) && para.isHeadTextWrap) {
                _this.wrapper.classList.add('table-head-text-wrap');
            }
            _this.cellFormat = para.cellFormat;
            var col = TableBase.getDataCol(para.cols);
            // 定义构造类
            var construct = para.construct || {};
            _this.BodyConstruct = construct.body || TableSection_1.TableBody;
            _this.HeadConstruct = construct.head || TableSection_1.TableHead;
            _this.FootConstruct = construct.foot || TableSection_1.TableFoot;
            _this.ColConstruct = construct.col || TableColumn_1.TableColumn;
            _this.DataCellConstruct = construct.dataCell || TableCell_1.TableDataCell;
            var colList = Array.isArray(col) ? col : [col];
            // 创建TableColumns
            _this.createCol(colList);
            // 初始化表头
            _this.head = new _this.HeadConstruct({
                cols: para.cols,
                table: _this,
                wrapper: wrappers && wrappers.headWrapper,
                scrollWrapper: wrappers && wrappers.headScrollWrapper,
                appendRule: wrappers && wrappers.appendRule,
            });
            // 添加数据
            _this.tableData.add(para.data || []);
            // 初始化表内容TBody
            _this.body = new _this.BodyConstruct({
                cols: col,
                data: para.data || [],
                table: _this,
                wrapper: wrappers && wrappers.bodyWrapper,
                appendRule: wrappers && wrappers.appendRule,
                scrollWrapper: wrappers && wrappers.bodyScrollWrapper,
            });
            // 判断是否需要列统计，创建TableFoot
            if (_this.colCount) {
                tools.isNotEmpty(_this.wrapper) && _this.wrapper.classList.add('table-col-count-wrapper');
                _this.foot = new _this.FootConstruct({
                    cols: col,
                    table: _this,
                    text: typeof _this.colCount === 'object' ? _this.colCount.text : null,
                    wrapper: wrappers && wrappers.footWrapper,
                    appendRule: wrappers && wrappers.appendRule,
                    scrollWrapper: wrappers && wrappers.footScrollWrapper,
                });
            }
            _this.columns.forEach(function (col) {
                if (!col.isVirtual) {
                    d.append(_this.head.colgroup, col.headWrapper);
                    d.append(_this.body.colgroup, col.bodyWrapper);
                    _this.colCount && d.append(_this.foot.colgroup, col.footWrapper);
                }
            });
            tools.isNotEmpty(_this.wrapper) && d.append(_this.wrapper, _this.head.wrapper);
            tools.isNotEmpty(_this.wrapper) && d.append(_this.wrapper, _this.body.wrapper);
            tools.isNotEmpty(_this.wrapper) && _this.colCount && d.append(_this.wrapper, _this.foot.wrapper);
            tools.isNotEmpty(_this.wrapper) && d.append(_this.container, _this.wrapper);
            _this.maxHeight = para.maxHeight;
            // 设置表格的宽度
            _this.updateTableWidth();
            // this.adjustColWidth();
            _this._isWrapLine = tools.isEmpty(para.isWrapLine) ? false : para.isWrapLine;
            tools.isNotEmpty(_this.wrapper) && _this._isWrapLine && _this.wrapper.classList.add('wrap-line-table');
            _this.events.on();
            return _this;
        }
        TableBase.prototype.wrapperInit = function (para) {
            if (typeof para._wrapper !== 'undefined') {
                return para._wrapper;
            }
            return h("div", { className: "new-table-wrapper" });
            // this._wrapper.appendChild(this.headWrapper);
            // this._wrapper.appendChild(this.bodyWrapper);
        };
        Object.defineProperty(TableBase.prototype, "isWrapLine", {
            get: function () {
                return this._isWrapLine;
            },
            enumerable: true,
            configurable: true
        });
        TableBase.getDataCol = function (cols) {
            var result = [], len = cols.length, indexes = Array.from({ length: len }, function () { return 0; });
            cols[0].forEach(function (col) {
                alg(col, 0);
            });
            function alg(col, index) {
                var rowspan = tools.isEmpty(col.rowspan) ? 1 : col.rowspan, colspan = tools.isEmpty(col.colspan) ? 1 : col.colspan;
                if (index + rowspan >= len) {
                    result.push(col);
                }
                else {
                    var nextIndex = index + rowspan;
                    for (var i = 0; i < colspan;) {
                        var item = cols[nextIndex][indexes[nextIndex]];
                        var itemColspan = item ? (tools.isEmpty(item.colspan) ? 1 : item.colspan) : 1;
                        i += itemColspan;
                        alg(item, nextIndex);
                    }
                }
                indexes[index]++;
            }
            return result;
        };
        ;
        Object.defineProperty(TableBase.prototype, "inputInit", {
            get: function () {
                return this._inputInit;
            },
            enumerable: true,
            configurable: true
        });
        TableBase.prototype.initEditor = function (input) {
            this._editing = true;
            this._inputInit = tools.isEmpty(input) ? function () { return null; } : input;
            this.tableData.edit.open();
        };
        TableBase.prototype.cancelEditor = function () {
            this._editing = false;
            this._inputInit = null;
            this.body.rows.forEach(function (row) {
                if (row && row.isEdited) {
                    row.cells.forEach(function (cell) {
                        cell.isEdited = false;
                    });
                }
            });
        };
        Object.defineProperty(TableBase.prototype, "editing", {
            get: function () {
                return this._editing;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBase.prototype, "colCount", {
            get: function () {
                return this._colCount;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBase.prototype, "container", {
            get: function () {
                return this._container;
            },
            //重构容器
            set: function (container) {
                // 容器发生改变，组件的dom元素也转移到相应容器中
                if (container && this.wrapper && this._container !== container) {
                    d.append(container, this.wrapper);
                    this._container = container;
                }
            },
            enumerable: true,
            configurable: true
        });
        // 是否是第一次计算宽度
        // private firstCalc = true;
        //自动调整列宽
        TableBase.prototype.adjustColWidth = function (begin) {
            if (begin === void 0) { begin = 0; }
            var canvas = document.createElement("canvas"), context = canvas.getContext("2d");
            context.font = '12px Arial';
            if (this.isWrapLine) {
                this.body.rows && this.body.rows.forEach(function (row) {
                    row._setHeight(40);
                });
            }
            // console.log(this.firstCalc);
            // if (!force && !this.firstCalc && !tools.isMb) {
            //     return;
            // }
            // this.firstCalc = false;
            var bodyRows = this.body.rows || [], len = this.tableData.get().length;
            this.columns = this.columns || [];
            if (len > 0) {
                for (var i = 0; i < this.columns.length; i++) {
                    var column = this.columns[i], max = 0;
                    if (column) {
                        var colCells = column.cells, headCells = colCells[0], bodyCells = colCells[1], colMaxWidth = column.maxWidth;
                        var text = headCells[headCells.length - 1] ? headCells[headCells.length - 1].text : '';
                        // max = tools.isNotEmpty(text) ? tools.str.utf8Len(text.toString()) * 8 : 0;
                        max = tools.isNotEmpty(text) ? getTextWidth(text) + 25 : 0;
                        column.maxWidth = Math.max(max, colMaxWidth);
                        for (var j = begin; j < len; j++) {
                            var cell = bodyCells[j];
                            if (cell) {
                                var data = cell.text;
                                var width = 0;
                                if (tools.isNotEmpty(data)) {
                                    if (data instanceof HTMLElement) {
                                        width = cell.wrapper.offsetWidth + 16;
                                        max = Math.max(width, max);
                                    }
                                    else {
                                        // max = Math.max(tools.str.utf8Len(data.toString().replace('', /\s+/g)) * 8, max);
                                        width = getTextWidth(data.toString());
                                        if (this.isWrapLine) {
                                            var scale = Math.ceil(width / (column.maxWidth - 17));
                                            var height = ((scale - 1) * 17 + 39) >= cell.row.height ? scale * 17 + 39 : cell.row.height;
                                            cell.row._setHeight(height);
                                        }
                                        width = width + 20;
                                        max = Math.max(width, max);
                                    }
                                }
                                // cell.width = width;
                            }
                        }
                    }
                    if (max !== 0) {
                        var width = Math.ceil(max); // + padding + border
                        width = Math.max(width, 50);
                        width = Math.min(width, this.columns[i].maxWidth);
                        this.columns[i].width = width;
                        !this.isWrapLine && this.columns[i].bodyCells.forEach(function (cell) {
                            cell && cell.initMoreBtn();
                        });
                    }
                }
            }
            canvas = null;
            context = null;
            var events = this.eventHandlers[TableBase.EVT_WIDTH_CANCEL];
            tools.isNotEmpty(events) && events.forEach(function (handler) {
                typeof handler === 'function' && handler();
            });
            function getTextWidth(text) {
                var metrics = context.measureText(text);
                return metrics.width;
            }
        };
        //创建列对象TableColumn
        TableBase.prototype.createCol = function (cols) {
            var _this = this;
            cols = tools.toArray(cols);
            var columns = this.columns || [], index = columns.length;
            cols.forEach(function (item, i) {
                columns.push(new _this.ColConstruct(Object.assign({
                    table: _this,
                    index: index,
                }, item)));
                index++;
            });
            this.columns = columns;
        };
        //设置table的宽度
        TableBase.prototype.updateTableWidth = function () {
            var width = this.width - 4 + this.deviation;
            this.body.tableEl.style.width = width + 'px';
            this.head.tableEl.style.width = width + 'px';
            this.colCount && (this.foot.tableEl.style.width = width + 'px');
        };
        //更新列统计项
        TableBase.prototype.updateColOption = function () {
            if (this.colCount) {
                this.foot && this.foot.render();
            }
        };
        Object.defineProperty(TableBase.prototype, "maxHeight", {
            get: function () {
                return this._maxHeight;
            },
            set: function (height) {
                this._maxHeight = height;
                if (tools.isNotEmpty(this._maxHeight)) {
                    if (tools.isNotEmpty(this.wrapper)) {
                        var bodyWrapper = d.query('.table-body-wrapper', this.wrapper);
                        bodyWrapper && (bodyWrapper.style.maxHeight = this._maxHeight + 'px');
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBase.prototype, "data", {
            // 获取数据
            get: function () {
                return this.tableData.get();
            },
            set: function (data) {
                if (tools.isNotEmpty(this.body)) {
                    // this.body.rows && this.body.rows.forEach((row) => {
                    //     row.destroy();
                    // });
                    // this.body.rows = [];
                    this.body.data = data;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableBase.prototype, "currentData", {
            get: function () {
                return this.body.data;
            },
            enumerable: true,
            configurable: true
        });
        //添加数据
        TableBase.prototype.dataAdd = function (data) {
            // tools.toArray(data).forEach((data) => {
            //     let cells = {};
            //     for(let item of this.columns){
            //         cells[item.name] = {
            //             data: data[item.name]
            //         };
            //     }
            //
            //     this.body.rowAdd({
            //         cells,
            //         section: this.body,
            //         index: data.index
            //     });
            // });
            var len = this.tableData.get().length;
            this.tableData.add(tools.toArray(data));
            this.body.render(len, tools.toArray(data).length, -1);
        };
        //删除数据
        TableBase.prototype.dataDel = function (index) {
            var _this = this;
            tools.toArray(index).forEach(function (item) {
                _this.body.rowDel(item);
            });
        };
        // private _cols: ITableCol[];
        //
        // colGet(col: (number|string)[]): ITableCol[];
        // colGet(col: number|string): ITableCol;
        // colGet(col) {
        //     let result = null;
        //     return result;
        // }
        //将一个删除的列对象插入到指定位置前面
        TableBase.prototype.columnInsertBefore = function (column, ref) {
            var _this = this;
            this.columns = this.columns || [];
            var columns = this.columns.filter(function (col) {
                return !col.isVirtual;
            });
            var index = this.getColIndex(ref), col = column.col, data = column.data, cells = column.cells;
            while (this.columns[index] && this.columns[index].isVirtual) {
                index++;
            }
            if (col && cells) {
                col.table = this;
                if (this.columns[index]) {
                    d.before(this.columns[index].bodyWrapper, col.bodyWrapper);
                    d.before(this.columns[index].headWrapper, col.headWrapper);
                    this.colCount && d.before(this.columns[index].footWrapper, col.footWrapper);
                    this.columns.splice(index, 0, col);
                }
                else {
                    d.append(this.body.colgroup, col.bodyWrapper);
                    d.append(this.head.colgroup, col.headWrapper);
                    this.colCount && d.append(this.foot.colgroup, col.footWrapper);
                    this.columns.splice(index, 0, col);
                }
                cells[0].forEach(function (item, i) {
                    if (_this.head.rows && _this.head.rows[i]) {
                        if (tools.isEmpty(_this.head.rows[i].cells[index])) {
                            d.append(_this.head.rows[i].wrapper, item.wrapper);
                        }
                        else {
                            d.before(_this.head.rows[i].cells[index].wrapper, item.wrapper);
                        }
                        (item.row = _this.head.rows[i]);
                        _this.head.rows[i].cells.splice(index, 0, item);
                    }
                    else {
                        _this.head.rowAdd({});
                        var row = _this.head.rows[_this.head.rows.length - 1];
                        item.row = row;
                        d.append(row.wrapper, item.wrapper);
                        _this.head.rows[i].cells.push(item);
                    }
                });
                // if(this.tableData.get().length === 0){
                //     this.tableData.set(data);
                // }else{
                //     data.forEach((data, index) => {
                //         this.tableData.update(data, index);
                //     });
                // }
                cells[1].forEach(function (item, i) {
                    if (_this.body.rows && _this.body.rows[i]) {
                        if (tools.isEmpty(_this.body.rows[i].cells[index])) {
                            d.append(_this.body.rows[i].wrapper, item.wrapper);
                        }
                        else {
                            d.before(_this.body.rows[i].cells[index].wrapper, item.wrapper);
                        }
                        (item.row = _this.body.rows[i]);
                        _this.body.rows[i].cells.splice(index, 0, item);
                    }
                    else {
                        var cells_1 = {};
                        for (var key in data[i]) {
                            cells_1[key] = { data: data[i][key] };
                        }
                        _this.body.rowAdd({
                            cells: cells_1
                        });
                        var row = _this.body.rows[_this.body.rows.length - 1];
                        row.cellDel(0);
                        item.row = row;
                        d.append(row.wrapper, item.wrapper);
                        _this.body.rows[i].cells.push(item);
                    }
                    _this.tableData.update(data[i], i);
                });
                this.colCount && cells[2].forEach(function (item, i) {
                    if (_this.foot.rows && _this.foot.rows[i]) {
                        if (tools.isEmpty(_this.foot.rows[i].cells[index])) {
                            d.append(_this.foot.rows[i].wrapper, item.wrapper);
                        }
                        else {
                            d.before(_this.foot.rows[i].cells[index].wrapper, item.wrapper);
                        }
                        (item.row = _this.foot.rows[i]);
                        _this.foot.rows[i].cells.splice(index, 0, item);
                    }
                });
                this.updateTableWidth();
                return true;
            }
            return false;
        };
        //在同一个表中交换列的位置
        TableBase.prototype.columnExchange = function (index1, index2) {
            index1 = this.getColIndex(index1);
            index2 = this.getColIndex(index2);
            if (index1 !== null && index2 !== null) {
                var col1 = this.columns[index1], col2 = this.columns[index2], cells1 = col1.cells, cells2 = col2.cells, headerCell1s = cells1[0], headerCell2s = cells2[0], dataCell1s = cells1[1], dataCell2s = cells2[1], footCell1s = cells1[2], footCell2s = cells2[2], cell1Wrappers = {
                    head: col1.headWrapper,
                    body: col1.bodyWrapper,
                    foot: col1.footWrapper
                }, cell2Wrappers = {
                    head: col2.headWrapper,
                    body: col2.bodyWrapper,
                    foot: col2.footWrapper
                };
                col1._changeWrapper(cell2Wrappers);
                col2._changeWrapper(cell1Wrappers);
                col1._setColElWidth();
                col2._setColElWidth();
                for (var i = 0; i < headerCell1s.length; i++) {
                    var cell1 = headerCell1s[i], cell2 = headerCell2s[i], name_1 = cell1.name;
                    cell1.name = cell2.name;
                    cell2.name = name_1;
                    var tmp = cell1.text;
                    cell1.text = cell2.text;
                    cell2.text = tmp;
                }
                for (var i = 0; i < dataCell1s.length; i++) {
                    var cell1 = dataCell1s[i], cell2 = dataCell2s[i], name_2 = cell1.name, width = cell1.width;
                    cell1.name = cell2.name;
                    cell2.name = name_2;
                    cell1.width = cell2.width;
                    cell2.width = width;
                    cell1.render();
                    cell2.render();
                }
                this.columns[index2] = col1;
                this.columns[index1] = col2;
            }
        };
        // 添加列
        TableBase.prototype.columnAdd = function (col, data) {
            var self = this;
            var map = [];
            this.columns.forEach(function (item) {
                map.push(item.name);
            });
            if (map.indexOf(col.name) === -1) {
                this.createCol({
                    name: col.name
                });
                this.head.rows.forEach(function (item) {
                    item.cellAdd(new TableCell_1.TableHeaderCell({
                        row: item,
                        name: col.name,
                        data: null,
                        text: col.title
                    }));
                });
                var rowLen = this.body.rows ? this.body.rows.length : 0;
                addCol(Array.isArray(data) ? Math.max(data.length, rowLen) : rowLen);
                this.updateTableWidth();
                return true;
            }
            return false;
            function addCol(length) {
                for (var i = 0; i < length; i++) {
                    var row = self.body.rows[i], cellData = data ? data[i] || '' : '';
                    self.tableData.get(i)[col.name] = cellData;
                    if (row) {
                        row.cellAdd(new TableCell_1.TableDataCell({
                            row: row,
                            name: col.name,
                            data: cellData,
                        }));
                    }
                    else {
                        var cells = {};
                        for (var _i = 0, _a = self.columns; _i < _a.length; _i++) {
                            var item = _a[_i];
                            cells[item.name] = {
                                row: null,
                                name: item.name,
                                data: ''
                            };
                            if (item.name === col.name) {
                                cells[item.name].data = cellData;
                            }
                        }
                        self.body.rowAdd({
                            cells: cells,
                            section: self.body
                        });
                    }
                }
            }
        };
        TableBase.prototype.columnsGet = function (col) {
            var _this = this;
            var result = [];
            tools.toArray(col).forEach(function (item) {
                result.push(_this.columns[_this.getColIndex(item)] || null);
            });
            return Array.isArray(col) ? result : result[0];
        };
        TableBase.prototype.columnsDel = function (index, isClear) {
            var _this = this;
            if (isClear === void 0) { isClear = true; }
            var result = [];
            tools.toArray(index).forEach(function (item) {
                var col = _this.columns[_this.getColIndex(item)];
                if (col) {
                    var obj_1 = {
                        col: col,
                        cells: [[], [], []],
                        data: []
                    };
                    col.cells[0].forEach(function (item) {
                        if (!isClear) {
                            obj_1.cells[0].push(item);
                        }
                        item.destroy(isClear);
                    });
                    col.cells[1].forEach(function (item) {
                        var _a;
                        var index = item.row.index;
                        obj_1.data.push((_a = {}, _a[item.name] = item.data, _a));
                        if (!isClear) {
                            obj_1.cells[1].push(item);
                        }
                        item.destroy(isClear);
                    });
                    col.cells[2].forEach(function (item) {
                        if (!isClear) {
                            obj_1.cells[2].push(item);
                        }
                        item.destroy(isClear);
                    });
                    col.destroy(isClear);
                    result.push(obj_1);
                }
            });
            if (!isClear) {
                this.updateTableWidth();
                return Array.isArray(index) ? result : result[0];
            }
            return null;
        };
        Object.defineProperty(TableBase.prototype, "width", {
            //获取wrapper宽度
            get: function () {
                var width = 0;
                this.columns = this.columns || [];
                this.columns.forEach(function (item) {
                    width += item.width;
                });
                return width + 4;
            },
            enumerable: true,
            configurable: true
        });
        TableBase.prototype.render = function (x, y, w, z) {
            if (z === void 0) { z = true; }
            this.body.render(x, y, w, z);
        };
        TableBase.prototype.sortByIndex = function (sortRule) {
            this.tableData.sortByIndex(sortRule);
            this.render(0, this.tableData.get().length);
        };
        TableBase.prototype.colCountByIndex = function (indexes) {
            this.tableData.colCountByIndex(indexes);
            // this.body.render(0, this.tableData.get().length, false);
        };
        //获取列名对应的索引值
        TableBase.prototype.getColIndex = function (index) {
            var num = null;
            if (typeof index === 'string') {
                this.columns.forEach(function (item, i) {
                    if (item.name === index) {
                        num = i;
                    }
                });
            }
            else if (typeof index === 'number') {
                num = index;
            }
            return num;
        };
        TableBase.prototype.getNotVirtualColIndex = function () { };
        //添加附表
        TableBase.prototype._createAnnexedTable = function (para, Constructor, appendRule) {
            if (Constructor === void 0) { Constructor = this.constructor; }
            var request = para;
            request._wrapper = null;
            var wrappers = {
                headWrapper: this.head.wrapper,
                bodyWrapper: this.body.wrapper,
                headScrollWrapper: this.head.scrollWrapper,
                bodyScrollWrapper: this.body.scrollWrapper,
                appendRule: appendRule,
            };
            if (this.colCount) {
                wrappers.footWrapper = this.foot.wrapper;
                wrappers.footScrollWrapper = this.foot.scrollWrapper;
            }
            return new Constructor(request, wrappers);
        };
        TableBase.prototype.destroy = function () {
            this.tableData.destroy();
            _super.prototype.destroy.call(this);
        };
        TableBase.EVT_EDITED = '__EVENT_DATA_EDITED__'; // 编辑事件
        TableBase.EVT_CHANGED = '__EVENT_DATA_CHANGED__'; // 编辑事件
        TableBase.EVT_SELECTED = '__EVENT_DATA_SELECTED__'; // 选中事件
        TableBase.EVT_SORTED = '__EVENT_DATA_SORTED__'; // 排序事件
        TableBase.EVT_COL_COUNT_CHANGED = '__EVENT_DATA_COL_COUNT_CHANGED__'; // 列统计事件
        TableBase.EVT_COL_VISIBILITY_CHANGED = '__EVENT_COL_VISIBILITY_CHANGED__'; // 列显示隐藏事件
        TableBase.EVT_CELL_EDIT_CANCEL = '__EVENT_CELL_EDIT_CANCEL__'; // 编辑组件销毁事件
        TableBase.EVT_WIDTH_CANCEL = '__EVENT_WIDTH_CANCEL__'; // 宽度改变是触发事件
        TableBase.GUID_INDEX = tools.getGuid();
        return TableBase;
    }(Component));
    exports.TableBase = TableBase;
});

define("TableCell", ["require", "exports", "TextInput", "TableBase", "FormCom", "Button", "Modal"], function (require, exports, text_1, TableBase_1, basic_1, Button_1, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var TableCell = /** @class */ (function () {
        // public name: string = '';
        function TableCell(para) {
            // 指向当前Cell对应的Row对象
            this._row = null;
            this._isVirtual = false;
            // 获取当前列的名称
            this._name = null;
            // 是否显示在页面上
            this._show = true;
            // 列合并
            this._colspan = 1;
            // 行合并
            this._rowspan = 1;
            // 获取td或th 标签
            this._wrapper = null;
            // 设置是否选中
            this._selected = false;
            this._presentSelected = false;
            this._classes = [];
            // 设置是否不可操作
            this._disabled = false;
            // this.name = para.name;
            var isRender = tools.isEmpty(para.isRender) ? true : para.isRender;
            this.row = para.row;
            this._name = para.name;
            this.wrapper.dataset.name = para.name;
            this._isVirtual = tools.isEmpty(this.column) ? false : this.column.isVirtual;
            this.colspan = para.colspan;
            this.rowspan = para.rowspan;
            // this.disabled = para.disabled;
            // if (para.selected){
            //     this.selected = para.selected;
            // }
            if (isRender && !this.isVirtual) {
                d.append(para.row.wrapper, this.wrapper);
            }
            this.show = this.column ? this.column.show : true;
        }
        Object.defineProperty(TableCell.prototype, "row", {
            get: function () {
                return this._row;
            },
            set: function (row) {
                this._row = row;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "isVirtual", {
            get: function () {
                return this._isVirtual;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "name", {
            get: function () {
                return this._name;
            },
            set: function (name) {
                this._name = name;
                this.wrapper.dataset.name = name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "column", {
            // 指向当前Cell对应的Column对象
            get: function () {
                return this.table.columnsGet(this.name);
            },
            enumerable: true,
            configurable: true
        });
        // 渲染到页面的格式
        TableCell.prototype.format = function (data) {
            var format = this.table.cellFormat, formated = format && format(data, this);
            // formated = format && format(this.column, (this.row as TableDataRow).data || {[this.name]: data});
            // if(this instanceof TableFooterCell){
            //     console.log(this.column)
            // }
            formated = formated || { text: data };
            formated.text = tools.str.removeHtmlTags(tools.str.toEmpty(formated.text));
            return formated;
        };
        Object.defineProperty(TableCell.prototype, "show", {
            get: function () {
                return this._show;
            },
            set: function (show) {
                if (tools.isNotEmpty(show)) {
                    this._show = show;
                    this.wrapper.classList.toggle('hide', !show);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "colspan", {
            get: function () {
                return this._colspan;
            },
            set: function (colspan) {
                colspan = colspan || 1;
                if (colspan !== this.colspan) {
                    this._colspan = colspan;
                    this.wrapper.colSpan = colspan;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "rowspan", {
            get: function () {
                return this._rowspan;
            },
            set: function (rowspan) {
                rowspan = rowspan || 1;
                if (rowspan !== this.rowspan) {
                    this._rowspan = rowspan;
                    this.wrapper.rowSpan = rowspan;
                    if (this.rowspan !== 1) {
                        this.wrapper.style.height = rowspan * 40 + 'px';
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "wrapper", {
            get: function () {
                if (!this.isVirtual && this._wrapper === null) {
                    // 判断是在 thead(对应th) 中 还是 tbody(对应td) 的 tr.
                    this._wrapper = document.createElement(this.tagName());
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                if (tools.isNotEmpty(selected)) {
                    this._selected = selected;
                    this.wrapper && this.wrapper.classList.toggle('selected', selected);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "presentSelected", {
            get: function () {
                return this._presentSelected;
            },
            set: function (selected) {
                if (tools.isNotEmpty(selected) && selected !== this._presentSelected) {
                    this._presentSelected = selected;
                    this.wrapper.classList.toggle('present-selected', selected);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "color", {
            get: function () {
                return this.wrapper ? this.wrapper.style.color : '';
            },
            // 设置颜色
            set: function (color) {
                color = color || null;
                this.wrapper && (this.wrapper.style.color = color);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "background", {
            get: function () {
                return this.wrapper ? this.wrapper.style.background : '';
            },
            // 设置背景颜色
            set: function (color) {
                color = color || null;
                this.wrapper && (this.wrapper.style.background = color);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "classes", {
            get: function () {
                return (this._classes || []).slice();
            },
            set: function (strArr) {
                if (tools.isNotEmptyArray(strArr)) {
                    d.classRemove(this.wrapper, strArr);
                    d.classAdd(this.wrapper, strArr);
                    this._classes = strArr.slice();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                if (tools.isNotEmpty(disabled)) {
                    this._disabled = disabled;
                    this.wrapper && this.wrapper.classList.toggle('disabled-cell', disabled);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "text", {
            get: function () {
                return this._text || '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableCell.prototype, "table", {
            // set text(text: string){
            //     text = tools.str.toEmpty(text);
            //     if(text !== this._text){
            //         d.setHTML(this.wrapper, '<div class="cell-content">' + text + '</div>');
            //         this._text = text;
            //     }
            // }
            // protected _editing:
            // 指向tableBase对象
            get: function () {
                var table = null;
                if (this.row) {
                    table = this.row.section.table;
                }
                return table;
            },
            enumerable: true,
            configurable: true
        });
        TableCell.prototype.destroy = function (isClear) {
            if (isClear === void 0) { isClear = true; }
            this._wrapper && d.remove(this._wrapper, isClear);
            var index = this.row.cells.indexOf(this);
            if (index !== -1) {
                this.row.cells.splice(index, 1);
            }
            if (isClear) {
                this._wrapper = null;
                this.row = null;
            }
        };
        return TableCell;
    }());
    exports.TableCell = TableCell;
    var TableDataCell = /** @class */ (function (_super) {
        __extends(TableDataCell, _super);
        function TableDataCell(para) {
            var _this = _super.call(this, para) || this;
            _this._highLight = null;
            _this.width = 0;
            _this.moreButton = null;
            _this._isEdited = false;
            _this.input = null;
            _this.blurHandler = null;
            _this._editing = false;
            _this.render(para.data);
            return _this;
        }
        Object.defineProperty(TableDataCell.prototype, "highLight", {
            get: function () {
                return this._highLight;
            },
            set: function (str) {
                if (str !== this._highLight) {
                    var html = '';
                    this._highLight = tools.isEmpty(str) ? null : tools.str.htmlEncode(str);
                    if (this._highLight === null) {
                        html = this.text;
                    }
                    else {
                        if (this.text.toLocaleUpperCase().indexOf(this._highLight.toLocaleUpperCase()) > -1) {
                            html = tools.highlight(tools.str.htmlEncode(this.text), this._highLight, 'red');
                        }
                        else {
                            html = this.text;
                        }
                    }
                    this.wrapper && (this.wrapper.innerHTML = html);
                    this.initMoreBtn();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableDataCell.prototype, "isMore", {
            get: function () {
                return this.width + 10 > this.column.width;
            },
            enumerable: true,
            configurable: true
        });
        TableDataCell.prototype.initMoreBtn = function () {
            var _this = this;
            var isWrapLine = this.table ? this.table.isWrapLine : false;
            if (!isWrapLine && this.isMore) {
                if (tools.isMb) {
                    if (tools.isEmpty(this.moreButton)) {
                        this.moreButton = new Button_1.Button({
                            container: this.wrapper,
                            content: '...',
                            className: 'more-button',
                            onClick: tools.pattern.throttling(function () {
                                Modal_1.Modal.alert(_this.text);
                            }, 1000),
                        });
                    }
                    else {
                        // d.append(this.wrapper, this.moreButton.wrapper);
                    }
                }
            }
            else {
                this.moreButton && this.moreButton.destroy();
                this.moreButton = null;
            }
        };
        Object.defineProperty(TableDataCell.prototype, "data", {
            get: function () {
                var rowData = this.table.tableData.get(this.row.index);
                return tools.isEmpty(rowData) ? null : rowData[this.name];
            },
            set: function (data) {
                var _this = this;
                var _a;
                if (data != this.data) {
                    if (this.column && this.column.isNumber && tools.isNotEmpty(data) && typeof data === 'string') {
                        data = parseFloat(data);
                    }
                    this.table.tableData.update((_a = {}, _a[this.name] = data, _a), this.row.index);
                }
                this.editing && (this.editing = false);
                this.render();
                var events = this.table.eventHandlers[TableBase_1.TableBase.EVT_CHANGED];
                tools.isNotEmpty(events) && events.forEach(function (fun) {
                    typeof fun === 'function' && fun(_this.table.editing);
                });
            },
            enumerable: true,
            configurable: true
        });
        TableDataCell.prototype.render = function (cellData) {
            // debugger
            var data = tools.isEmpty(cellData) ? this.data : cellData;
            // 移除 除了moreBtn以外的所有dom
            if (this.wrapper) {
                if (this.moreButton) {
                    var childNodes = this.wrapper.childNodes;
                    for (var i = 0; i < childNodes.length; i++) {
                        var child = childNodes[i];
                        if (this.moreButton.wrapper !== child) {
                            this.wrapper.removeChild(child);
                        }
                    }
                }
                else {
                    this.wrapper.innerHTML = '';
                }
            }
            // this.wrapper && (this.wrapper.innerHTML = '');
            if (data instanceof Node) {
                this.wrapper && d.append(this.wrapper, data);
            }
            else {
                var formated = this.format(data);
                if (formated) {
                    var classes = formated.classes, text = formated.text, color = formated.color, bgColor = formated.bgColor;
                    if (text instanceof Node) {
                        this.wrapper && d.append(this.wrapper, text);
                    }
                    else {
                        this._text = text + '';
                        this.wrapper && d.append(this.wrapper, document.createTextNode(this._text));
                    }
                    this.width = getTextWidth(this.text);
                    this.initMoreBtn();
                    this.classes = classes;
                    this.color = color;
                    this.background = bgColor;
                }
            }
            !this.table.isWrapLine && this.initMoreBtn();
            if (this.table.editing) {
                var guidIndex = this.table.tableData.get()[this.row.index][TableBase_1.TableBase.GUID_INDEX], rowData = null;
                for (var _i = 0, _a = this.table.tableData.edit.getOriginalData(); _i < _a.length; _i++) {
                    var data_1 = _a[_i];
                    if (data_1[TableBase_1.TableBase.GUID_INDEX] === guidIndex) {
                        rowData = data_1;
                        break;
                    }
                }
                // console.log(rowsData);
                var originalCellData = tools.isEmpty(rowData) ? null : rowData[this.name];
                // console.log(tools.str.toEmpty(originalCellData), tools.str.toEmpty(this.data));
                this.isEdited = tools.str.toEmpty(originalCellData) != tools.str.toEmpty(this.data);
            }
        };
        TableDataCell.prototype.tagName = function () {
            return 'td';
        };
        Object.defineProperty(TableDataCell.prototype, "isEdited", {
            get: function () {
                return this._isEdited;
            },
            set: function (flag) {
                if (this._isEdited !== flag) {
                    this._isEdited = flag;
                    this.wrapper && this.wrapper.classList.toggle('edited-cell', flag);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableDataCell.prototype, "editing", {
            get: function () {
                return this._editing;
            },
            set: function (flag) {
                var _this = this;
                this.wrapper.classList.toggle("cell-editing", flag);
                if (this.table && this.table.editing && this._editing !== flag) {
                    // this.input = new
                    this._editing = flag;
                    if (!this.isVirtual) {
                        if (flag && this.input === null) {
                            // 缓存当前内容
                            var tmpDoc_1 = document.createDocumentFragment();
                            Array.prototype.slice.call(this.wrapper.childNodes, 0).forEach(function (node) {
                                tmpDoc_1.appendChild(node);
                            });
                            this.wrapper.innerHTML = '';
                            this.input = this.table.inputInit(this, this.column, tools.isEmpty(this.data) ? '' : this.data.toString());
                            if (this.input instanceof basic_1.FormCom) {
                                tmpDoc_1 = null;
                                // this.input.set();
                                // 选中input全部内容
                                if (this.input instanceof text_1.TextInput) {
                                    this.input.focus();
                                    d.query('input', this.input.wrapper).select();
                                }
                            }
                            else {
                                // 初始化失败时还原缓存
                                d.append(this.wrapper, tmpDoc_1);
                            }
                            // 绑定默认点击其他cell取消编辑状态，销毁input插件
                            d.off(this.row.section.wrapper, 'click');
                            d.on(this.row.section.wrapper, 'click', 'tbody>tr>td', this.blurHandler = function (ev) {
                                var td = d.closest(ev.target, 'td');
                                if (td !== _this.wrapper) {
                                    // d.off(d.query('input', this.input.wrapper), 'focus');
                                    // console.log(this.editing);
                                    _this.editing = false;
                                }
                            });
                            /* d.on(d.query('input', this.input.wrapper), 'focus', () => clearTimeout(timer));
                             d.on(d.query('input', this.input.wrapper), 'blur', () => {
                                 timer = setTimeout(() => {
                                     d.off(d.query('input', this.input.wrapper), 'blur');
                                     // d.off(d.query('input', this.input.wrapper), 'focus');
                                     // console.log(this.editing);
                                     this.editing = false;
         
                                     let rowsData = this.table.tableData.edit.getOriginalData()[this.row.index];
                                     // console.log(rowsData);
                                     let originalCellData = tools.isEmpty(rowsData) ? null : rowsData[this.name];
                                     // console.log(tools.str.toEmpty(originalCellData), tools.str.toEmpty(this.data));
                                     this.isEdited = tools.str.toEmpty(originalCellData) != tools.str.toEmpty(this.data);
                                 }, 100);
                             });*/
                        }
                        else {
                            // 设置新的值
                            if (tools.isNotEmpty(this.input) && this.input instanceof basic_1.FormCom) {
                                var str = this.input.get();
                                if (this.data !== str && (tools.isNotEmpty(str) || tools.isNotEmpty(this.data))) {
                                    this.data = str;
                                }
                                else {
                                    this.render();
                                }
                                d.off(this.row.section.wrapper, 'click');
                                this.input.destroy();
                                this.input = null;
                            }
                            var isChange_1 = this.row.cells.some(function (cell) { return cell.isEdited; });
                            var events = this.table.eventHandlers[TableBase_1.TableBase.EVT_CELL_EDIT_CANCEL];
                            tools.isNotEmpty(events) && events.forEach(function (fun) {
                                typeof fun === 'function' && fun(_this, isChange_1);
                            });
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        return TableDataCell;
    }(TableCell));
    exports.TableDataCell = TableDataCell;
    var TableHeaderCell = /** @class */ (function (_super) {
        __extends(TableHeaderCell, _super);
        function TableHeaderCell(para) {
            var _this = _super.call(this, para) || this;
            _this.text = para.text;
            return _this;
        }
        Object.defineProperty(TableHeaderCell.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                text = tools.str.toEmpty(text);
                if (text !== this._text) {
                    this.wrapper && d.setHTML(this.wrapper, '<div class="cell-content" title="' + text + '">' + text + '</div>');
                    this._text = text;
                }
            },
            enumerable: true,
            configurable: true
        });
        TableHeaderCell.prototype.tagName = function () {
            return 'th';
        };
        return TableHeaderCell;
    }(TableCell));
    exports.TableHeaderCell = TableHeaderCell;
    var TableFooterCell = /** @class */ (function (_super) {
        __extends(TableFooterCell, _super);
        function TableFooterCell(para) {
            var _this = _super.call(this, para) || this;
            // 选择框选项数据列表
            _this._options = [];
            _this.optionGroup = {};
            // Select元素
            _this._selectEl = null;
            _this.options = para.options;
            _this._colCount = tools.isEmpty(para.colCount) ? true : para.colCount;
            if (_this.colCount) {
                _this.wrapper && d.append(_this.wrapper, _this.selectEl);
            }
            else {
                _this.wrapper && d.append(_this.wrapper, h("div", { className: "cell-content" }, tools.isEmpty(_this.text) ? '' : _this.text));
            }
            return _this;
        }
        Object.defineProperty(TableFooterCell.prototype, "colCount", {
            get: function () {
                return this._colCount;
            },
            enumerable: true,
            configurable: true
        });
        // 初始化选项
        TableFooterCell.prototype.initOption = function () {
            var _this = this;
            // this.selectEl.innerHTML = '';
            // for(let item of this.options){
            //     // console.log(this.format(item).text );
            //     let option = <HTMLOptionElement>d.create('<option value="' + item + '">' + this.format(item).text + '</option>');
            //     this.selectEl.add(option, null);
            // }
            if (this.colCount) {
                this.optionGroup = {};
                var optionGroup_1 = this.optionGroup;
                this.options.forEach(function (data) {
                    var text = _this.format(data).text;
                    if (Array.isArray(optionGroup_1[text])) {
                        optionGroup_1[text].push(data);
                    }
                    else {
                        optionGroup_1[text] = [data];
                    }
                });
                var arr = Array.from({ length: this.selectEl.length - 1 }, function (v, k) { return k + 1; });
                d.diff(Object.keys(optionGroup_1), arr, {
                    create: function (n) {
                        var option = h("option", null, n);
                        d.data(option, optionGroup_1[n]);
                        _this.selectEl.add(option);
                    },
                    replace: function (n, o) {
                        var option = _this.selectEl.options[o];
                        d.data(option, optionGroup_1[n]);
                    },
                    destroy: function (o) {
                        _this.selectEl.remove(o);
                    }
                });
            }
        };
        Object.defineProperty(TableFooterCell.prototype, "options", {
            get: function () {
                return (this._options || []).slice();
            },
            set: function (options) {
                if (tools.isNotEmpty(options)) {
                    this._options = options;
                    this.initOption();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(TableFooterCell.prototype, "selectEl", {
            get: function () {
                if (this._selectEl === null) {
                    this._selectEl = h("select", { className: "form-control" });
                    this._selectEl.add(h("option", { value: "all" }, "\u65E0"), null);
                }
                return this._selectEl;
            },
            enumerable: true,
            configurable: true
        });
        // 添加选项Option
        TableFooterCell.prototype.addOption = function (data) {
            if (tools.isNotEmpty(data)) {
                if (this._options.indexOf(data) === -1) {
                    this._options.push(data);
                    var text = this.format(data).text;
                    if (Array.isArray(this.optionGroup[text])) {
                        this.optionGroup[text].push(data);
                        for (var i = 0; i < this.selectEl.length; i++) {
                            var option = this.selectEl.options[i];
                            var tem = option.text;
                            if (tem == text) {
                                d.data(option, this.optionGroup[text]);
                                break;
                            }
                        }
                    }
                    else {
                        var option = h("option", null, text);
                        this.optionGroup[text] = [data];
                        this.selectEl.add(option, null);
                    }
                }
            }
        };
        TableFooterCell.prototype.removeOption = function (data) {
            var index = this._options.indexOf(data);
            if (index > -1) {
                this.selectEl.remove(index + 1);
                this._options.splice(index, 1);
            }
        };
        // 替换选项和数据
        TableFooterCell.prototype.replaceOption = function (newData, oldData) {
            var oldIndex = this._options.indexOf(oldData), optionEl = this.selectEl.options[oldIndex + 1];
            if (oldIndex > -1) {
                optionEl.value = newData;
                optionEl.innerText = this.format(newData).text;
            }
        };
        TableFooterCell.prototype.tagName = function () {
            return 'td';
        };
        return TableFooterCell;
    }(TableCell));
    exports.TableFooterCell = TableFooterCell;
    var canvasContext = document.createElement("canvas").getContext('2d');
    canvasContext.font = '12px Arial';
    function getTextWidth(text) {
        var metrics = canvasContext.measureText(text);
        return metrics.width;
    }
});

///<amd-module name="SwipeOut"/>
define("SwipeOut", ["require", "exports", "Button"], function (require, exports, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var SwipeOut = /** @class */ (function () {
        function SwipeOut(para) {
            var _this = this;
            this.para = para;
            this.animation = (function () {
                var self = _this;
                var ease = function (t, b, c, d) {
                    return -c * (t /= d) * (t - 2) + b;
                };
                var animation = function (end) {
                    var trans = self.transConfig.position === 'right'
                        ? self.transConfig.right : self.transConfig.left;
                    self.transConfig.end = end;
                    self.transConfig.time++;
                    self.transConfig.speed = ease(self.transConfig.time, trans.current, self.transConfig.end - trans.current, self.transConfig.duration);
                    animationObj.changeStyle(self.transConfig.speed);
                    self.transConfig.animated_id = window.requestAnimationFrame(function () {
                        animation(end);
                    });
                    if (self.transConfig.time >= self.transConfig.duration) {
                        self.transConfig.speed = trans.current = self.transConfig.end;
                        animationObj.changeStyle(trans.current);
                        window.cancelAnimationFrame(self.transConfig.animated_id);
                        self.transConfig.time = 0;
                    }
                };
                var animationObj = {
                    open: function () {
                        var trans = self.transConfig.position === 'right'
                            ? self.transConfig.right : self.transConfig.left;
                        var time = Math.abs(trans.current) > trans.change
                            ? Math.abs(trans.current) - trans.change
                            : Math.abs(trans.current);
                        self.transConfig.duration = Math.ceil(time / 4 / trans.length);
                        self.transConfig.duration = self.transConfig.duration > 40 ? 40 : self.transConfig.duration;
                        animation(-trans.start);
                    },
                    close: function () {
                        self.event.cancelSwipeOut.off();
                        var trans = self.transConfig.position === 'right'
                            ? self.transConfig.right : self.transConfig.left;
                        self.transConfig.duration = Math.ceil(Math.abs(trans.current) / 4 / trans.length);
                        self.transConfig.duration = self.transConfig.duration > 40 ? 40 : self.transConfig.duration;
                        animation(0);
                        SwipeOut.isTouch = false;
                    },
                    changeStyle: function (s) {
                        if (self.transConfig.position === 'right') {
                            self.transConfig.right.el && (self.transConfig.right.el.style.transform =
                                'translate(' + (s + self.transConfig.right.start) + 'px, 0)');
                            self.transConfig.right.el && (self.transConfig.right.el.style.webkitTransform =
                                'translate(' + (s + self.transConfig.right.start) + 'px, 0)');
                        }
                        else if (self.transConfig.position === 'left') {
                            self.transConfig.left.el && (self.transConfig.left.el.style.transform =
                                'translate(' + (s + self.transConfig.left.start) + 'px, 0)');
                            self.transConfig.left.el && (self.transConfig.left.el.style.webkitTransform =
                                'translate(' + (s + self.transConfig.left.start) + 'px, 0)');
                        }
                        else {
                            return null;
                        }
                        self.innerWrapper.style.transform = 'translate(' + s + 'px, 0)';
                        self.innerWrapper.style.webkitTransform = 'translate(' + s + 'px, 0)';
                    },
                    judgePosition: function () {
                        if (self.transConfig.pointCurrent > self.transConfig.pointStart
                            && self.transConfig.right.current === 0 && self.transConfig.left.el) {
                            self.transConfig.position = 'left';
                        }
                        else if (self.transConfig.pointCurrent < self.transConfig.pointStart
                            && self.transConfig.left.current === 0 && self.transConfig.right.el) {
                            self.transConfig.position = 'right';
                        }
                    },
                    easeOut: function () {
                        var trans = self.transConfig.position === 'right' ? self.transConfig.right : self.transConfig.left;
                        if (Math.abs(trans.current - trans.start) > trans.change * 2) {
                            self.transConfig.scale *= .92;
                            self.transConfig.scale = self.transConfig.scale < .12 ? .12 : self.transConfig.scale;
                        }
                        else {
                            self.transConfig.scale = 1;
                        }
                        if (self.transConfig.position === 'right') {
                            self.transConfig.toEnd = !self.transConfig.isStart
                                ? self.transConfig.pointCurrent - self.transConfig.pointStart < 0
                                : self.transConfig.toEnd;
                            trans.current = trans.current > 0 ? 0 : trans.current;
                        }
                        else {
                            self.transConfig.toEnd = !self.transConfig.isStart
                                ? self.transConfig.pointCurrent - self.transConfig.pointStart > 0
                                : self.transConfig.toEnd;
                            trans.current = trans.current < 0 ? 0 : trans.current;
                        }
                    },
                    stop: function () {
                        window.cancelAnimationFrame(self.transConfig.animated_id);
                        var trans = self.transConfig.position === 'right' ? self.transConfig.right : self.transConfig.left;
                        self.transConfig.time = 0;
                        trans.current = self.transConfig.speed;
                    },
                    toEnd: function () {
                        var trans = self.transConfig.position === 'right' ? self.transConfig.right : self.transConfig.left;
                        if (Math.abs(trans.current) > trans.change / 3 && self.transConfig.toEnd) {
                            self.transConfig.isStart = false;
                            this.open();
                        }
                        else {
                            self.transConfig.isStart = true;
                            this.close();
                        }
                    }
                };
                return animationObj;
            })();
            this.event = (function () {
                var self = _this, startX, startY, isFirst, angle;
                function getDirection(angle) {
                    if (angle <= 45 && angle > -45) {
                        return 'right';
                    }
                    else if (angle <= 135 && angle > 45) {
                        return 'down';
                    }
                    else if (angle <= -45 && angle > -135) {
                        return 'up';
                    }
                    else if (angle > 135 || angle <= -135) {
                        return 'left';
                    }
                    else {
                        return null;
                    }
                }
                var start = function (ev) {
                    isFirst = true;
                    startX = ev.targetTouches[0].clientX;
                    startY = ev.targetTouches[0].clientY;
                    if (self.transConfig.position && !SwipeOut.isTouch) {
                        self.animation.stop();
                        SwipeOut.isTouch = true;
                        self.transConfig.isClose = false;
                        self.transConfig.pointStart = ev.targetTouches[0].clientX;
                        self.transConfig.scale = 1;
                        self.transConfig.toEnd = true;
                        event.touchMove.on();
                        event.touchEnd.on();
                        event.cancelSwipeOut.on();
                    }
                };
                var move = function (ev) {
                    var x = ev.targetTouches[0].clientX, y = ev.targetTouches[0].clientY;
                    if (isFirst) {
                        angle = getDirection(Math.atan2(y - startY, x - startX) / Math.PI * 180);
                        isFirst = false;
                    }
                    if (angle === 'right' || angle === 'left') {
                        self.transConfig.pointCurrent = x;
                        self.animation.judgePosition();
                        var trans = self.transConfig.position === 'right' ? self.transConfig.right : self.transConfig.left;
                        trans.current += (self.transConfig.pointCurrent - self.transConfig.pointStart) * self.transConfig.scale;
                        self.animation.easeOut();
                        _this.animation.changeStyle(trans.current);
                        self.transConfig.pointStart = self.transConfig.pointCurrent;
                    }
                };
                var end = function () {
                    self.transConfig.isClose = true;
                    event.touchMove.off();
                    event.touchEnd.off();
                    self.animation.toEnd();
                };
                var stopClose = function (ev) {
                    if (d.closest(ev.target, '.swipe-out-bar') !== self.target) {
                        // ev.stopPropagation();
                        if (self.transConfig.isClose) {
                            self.animation.stop();
                            self.animation.close();
                        }
                    }
                    else {
                        if (self.transConfig.isClose) {
                            SwipeOut.isTouch = false;
                        }
                    }
                };
                var close = function (ev) {
                };
                var cancelBubble = function (ev) {
                };
                var event = {
                    touchStart: {
                        on: function () {
                            d.on(self.target, 'touchstart', start);
                        },
                        off: function () {
                            d.off(self.target, 'touchstart', start);
                        }
                    },
                    touchMove: {
                        on: function () {
                            d.on(document, 'touchmove', move);
                        },
                        off: function () {
                            d.off(document, 'touchmove', move);
                        }
                    },
                    touchEnd: {
                        on: function () {
                            d.on(document, 'touchend', end);
                        },
                        off: function () {
                            d.off(document, 'touchend', end);
                        }
                    },
                    cancelSwipeOut: {
                        on: function () {
                            window.addEventListener('touchstart', close);
                            document.addEventListener('touchstart', stopClose, true);
                            // d.on(document, 'touchstart', close);
                        },
                        off: function () {
                            // d.off(document, 'touchstart', close);
                            window.removeEventListener('touchstart', close);
                            document.removeEventListener('touchstart', stopClose, true);
                        }
                    }
                };
                return event;
            })();
            this.init();
        }
        SwipeOut.prototype.init = function () {
            var para = this.para;
            this.target = para.target;
            var position = getComputedStyle(this.target, null).position;
            if (position !== 'absolute' && position !== 'fixed') {
                this.target.style.position = 'relative';
            }
            this.target.classList.add('swipe-out-bar');
            this.innerWrapper = d.create('<div class="swipe-out-handle"></div>');
            var frag = document.createDocumentFragment();
            while (this.target.firstChild) {
                frag.appendChild(this.target.firstChild);
            }
            this.innerWrapper.appendChild(frag);
            this.initConfig();
            this.left = para.left;
            this.right = para.right;
            this.target.appendChild(this.innerWrapper);
            this.event.touchStart.on();
        };
        SwipeOut.prototype.alterConfig = function (position) {
            if (position === 'left') {
                var leftEl = tools.isEmpty(this.SwipeOutLeft) ? false : this.SwipeOutLeft, leftWidth = leftEl && leftEl.offsetWidth;
                this.transConfig.left.el = leftEl;
                this.transConfig.left.start = -leftWidth;
                this.transConfig.left.change = leftWidth;
                this.transConfig.left.length = leftEl ? leftEl.children.length : 1;
                if (leftEl) {
                    this.transConfig.position = position;
                }
            }
            else if (position === 'right') {
                var rightEl = tools.isEmpty(this.SwipeOutRight) ? false : this.SwipeOutRight, rightWidth = rightEl && rightEl.offsetWidth;
                this.transConfig.right.el = rightEl;
                this.transConfig.right.start = rightWidth;
                this.transConfig.right.change = rightWidth;
                this.transConfig.right.length = rightEl ? rightEl.children.length : 1;
                if (rightEl) {
                    this.transConfig.position = position;
                }
            }
        };
        SwipeOut.prototype.initConfig = function () {
            this.transConfig = {
                left: {
                    //左滑块
                    el: null,
                    //滑块起点位置
                    start: null,
                    //滑块运动到终点的距离
                    change: null,
                    //滑块当前位置
                    current: 0,
                    length: null
                },
                right: {
                    //右滑块
                    el: null,
                    //滑块起点位置
                    start: null,
                    //滑块运动到终点的距离
                    change: null,
                    //滑块当前位置
                    current: 0,
                    length: null
                },
                position: null,
                end: 0,
                time: 0,
                duration: 0,
                pointStart: 0,
                pointCurrent: 0,
                scale: 1,
                toEnd: true,
                isStart: true,
                animated_id: null,
                speed: 0
            };
        };
        SwipeOut.prototype.initSwipeOutEl = function (btn, SwipeOutContainer, className) {
            if (tools.isEmpty(btn)) {
                if (!tools.isEmpty(SwipeOutContainer)) {
                    d.remove(SwipeOutContainer);
                }
                SwipeOutContainer = null;
            }
            else if (Array.isArray(btn)) {
                if (!tools.isEmpty(SwipeOutContainer)) {
                    SwipeOutContainer.innerHTML = '';
                    btn.forEach(function (item) {
                        if (item.constructor === Object) {
                            item.container = SwipeOutContainer;
                            new Button_1.Button(item);
                        }
                        else {
                            SwipeOutContainer.appendChild(item);
                        }
                    });
                }
                else {
                    SwipeOutContainer = d.create('<div class="' + className + '"></div>');
                    btn.forEach(function (item) {
                        if (item.constructor === Object) {
                            item.container = SwipeOutContainer;
                            new Button_1.Button(item);
                        }
                        else {
                            SwipeOutContainer.appendChild(item);
                        }
                    });
                    this.target.appendChild(SwipeOutContainer);
                }
            }
            else {
                if (!tools.isEmpty(SwipeOutContainer)) {
                    SwipeOutContainer.innerHTML = '';
                    if (btn.constructor === Object) {
                        btn.container = SwipeOutContainer;
                        new Button_1.Button(btn);
                    }
                    else {
                        SwipeOutContainer.appendChild(btn);
                    }
                }
                else {
                    SwipeOutContainer = d.create('<div class="' + className + '"></div>');
                    if (btn.constructor === Object) {
                        btn.container = SwipeOutContainer;
                        new Button_1.Button(btn);
                    }
                    else {
                        SwipeOutContainer.appendChild(btn);
                    }
                    this.target.appendChild(SwipeOutContainer);
                }
            }
            return SwipeOutContainer;
        };
        Object.defineProperty(SwipeOut.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (btn) {
                this._left = btn;
                this.SwipeOutLeft = this.initSwipeOutEl(btn, this.SwipeOutLeft, 'swipe-out-left');
                this.alterConfig('left');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SwipeOut.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (btn) {
                this._right = btn;
                this.SwipeOutRight = this.initSwipeOutEl(btn, this.SwipeOutRight, 'swipe-out-right');
                this.alterConfig('right');
            },
            enumerable: true,
            configurable: true
        });
        SwipeOut.prototype.destroy = function () {
            var frag = document.createDocumentFragment();
            while (this.innerWrapper.firstElementChild) {
                frag.appendChild(this.innerWrapper.firstElementChild);
            }
            d.remove(this.innerWrapper);
            this.SwipeOutRight !== null && d.remove(this.SwipeOutRight);
            this.SwipeOutLeft !== null && d.remove(this.SwipeOutLeft);
            this.target.appendChild(frag);
            this.target.classList.remove('swipe-out-bar');
            this.event.touchStart.off();
            this.event.touchMove.off();
            this.event.touchEnd.off();
            this.event.cancelSwipeOut.off();
        };
        SwipeOut.isTouch = false;
        return SwipeOut;
    }());
    exports.SwipeOut = SwipeOut;
});
// protected setSwipeOutBar() {
//     let self = this;
//     let leftEl = tools.isEmpty(self.SwipeOutLeft) ? false : self.SwipeOutLeft;
//     let rightEl = tools.isEmpty(self.SwipeOutRight) ? false : self.SwipeOutRight;
//     let translate = {
//         left: {//左滑块
//             //滑块起点位置
//             start: leftEl && parseInt(getComputedStyle(leftEl, null).transform
//                 .replace(/matrix\(1,\s0,\s0,\s1,\s(-?\d+),\s0\)/, ($1, $2) => {
//                     return $2;
//                 })),
//             //滑块运动到终点的距离
//             change: leftEl && leftEl.offsetWidth,
//             //滑块当前位置
//             current: 0,
//         },
//         right: {//右滑块
//             //滑块起点位置
//             start: rightEl && parseInt(getComputedStyle(rightEl, null).transform
//                 .replace(/matrix\(1,\s0,\s0,\s1,\s(-?\d+),\s0\)/, ($1, $2) => {
//                     return $2;
//                 })),
//             //滑块运动到终点的距离
//             change: rightEl && rightEl.offsetWidth,
//             //滑块当前位置
//             current: 0,
//         },
//         position: getPosition(), //滑块当前运动方向
//         end: 0, //滑块滑动终点
//         time: 0, //滑块滑动的当前时间
//         duration: 0, //滑块滑动总时间
//         pointStart: 0, //鼠标开始按下位置的x轴
//         pointCurrent: 0, //鼠标移动位置的x轴
//         scale: 1, //滑块运动速度比值
//         toEnd: true, //是否要运动到起点位置，即结束
//         isStart: true, //是否在起点位置
//         animated_id: null //动画桢ID
//     };
//
//     function getPosition(): string | boolean {
//         if (leftEl) {
//             return 'left'
//         } else if (rightEl) {
//             return 'right'
//         } else {
//             return false;
//         }
//     }
//
//     let isAnimated = true;
//     d.on(self.target, 'touchstart', function (ev: TouchEvent) {
//         // if(isAnimated){
//         if (translate.position) {
//             isAnimated = false;
//             translate.pointStart = ev.targetTouches[0].clientX;
//             translate.scale = 1;
//             translate.toEnd = true;
//             d.on(document, 'touchmove', function (ev: TouchEvent) {
//                 translate.pointCurrent = ev.targetTouches[0].clientX;
//                 if (translate.pointCurrent > translate.pointStart
//                     && translate.right.current === 0 && leftEl) {
//                     translate.position = 'left';
//                 } else if (translate.pointCurrent < translate.pointStart
//                     && translate.left.current === 0 && rightEl) {
//                     translate.position = 'right';
//                 }
//                 let trans = translate.position === 'right' ? translate.right : translate.left;
//                 trans.current += (translate.pointCurrent - translate.pointStart) * translate.scale;
//                 if (Math.abs(trans.current - trans.start) > trans.change * 2) {
//                     translate.scale *= .92;
//                     translate.scale = translate.scale < .12 ? .12 : translate.scale;
//                 } else {
//                     translate.scale = 1;
//                 }
//                 if (translate.position === 'right') {
//                     translate.toEnd = !translate.isStart
//                         ? translate.pointCurrent - translate.pointStart < 0
//                         : translate.toEnd;
//                     trans.current = trans.current > 0 ? 0 : trans.current;
//                 } else {
//                     translate.toEnd = !translate.isStart
//                         ? translate.pointCurrent - translate.pointStart > 0
//                         : translate.toEnd;
//                     trans.current = trans.current < 0 ? 0 : trans.current;
//                 }
//                 changeStyle(trans.current);
//                 translate.pointStart = translate.pointCurrent;
//             });
//             d.on(document, 'touchend', function () {
//                 d.off(document, 'touchmove');
//                 d.off(document, 'touchend');
//                 let trans = translate.position === 'right' ? translate.right : translate.left;
//                 let time = Math.abs(trans.current) > trans.change
//                     ? Math.abs(trans.current) - trans.change
//                     : Math.abs(trans.current);
//                 translate.duration = Math.ceil(time / 4);
//                 translate.duration = translate.duration > 40 ? 40 : translate.duration;
//                 if (Math.abs(trans.current) > trans.change / 2 && translate.toEnd) {
//                     translate.isStart = false;
//                     animation(-trans.start);
//                 } else {
//                     translate.isStart = true;
//                     animation(0);
//                 }
//             })
//         }
//         // }
//     });
//
//     function animation(end) {
//         let trans = translate.position === 'right' ? translate.right : translate.left;
//         translate.end = end;
//         translate.time++;
//         let s = easeOut(translate.time, trans.current, translate.end - trans.current, translate.duration);
//         changeStyle(s);
//         translate.animated_id = window.requestAnimationFrame(() => {
//             animation(end);
//         });
//         if (translate.time >= translate.duration) {
//             trans.current = translate.end;
//             changeStyle(trans.current);
//             window.cancelAnimationFrame(translate.animated_id);
//             isAnimated = true;
//             translate.time = 0;
//         }
//     }
//
//     function changeStyle(s) {
//         if (translate.position === 'right') {
//             rightEl && ((<HTMLElement>rightEl).style.transform = 'translate(' +
//                 (s + translate.right.start) + 'px, 0)');
//             rightEl && ((<HTMLElement>rightEl).style.webkitTransform = 'translate(' +
//                 (s + translate.right.start) + 'px, 0)');
//         } else if (translate.position === 'left') {
//             leftEl && ((<HTMLElement>leftEl).style.transform = 'translate(' +
//                 (s + translate.left.start) + 'px, 0)');
//             leftEl && ((<HTMLElement>leftEl).style.webkitTransform = 'translate(' +
//                 (s + translate.left.start) + 'px, 0)');
//         } else {
//             return null;
//         }
//         self.innerWrapper.style.transform = 'translate(' + s + 'px, 0)';
//         self.innerWrapper.style.webkitTransform = 'translate(' + s + 'px, 0)';
//     }
//
//     function easeOut(t, b, c, d) {
//         return -c * (t /= d) * (t - 2) + b;
//     }
// }

define("UserSelect", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="UserSelect"/>
    var d = G.d;
    var UserSelect = /** @class */ (function () {
        function UserSelect(para) {
            this.para = para;
            para.target.classList.add('user-select-text');
            para.className && para.target.classList.add(para.className);
            this.handle = function (e) {
                document.body.classList.add('user-select-none');
                d.once(document, 'mouseup', function () {
                    document.body.classList.remove('user-select-none');
                });
            };
            this.on();
        }
        UserSelect.prototype.on = function () {
            d.on(this.para.target, 'mousedown', this.handle);
        };
        UserSelect.prototype.off = function () {
            d.off(this.para.target, 'mousedown', this.handle);
        };
        return UserSelect;
    }());
    exports.UserSelect = UserSelect;
});

define("ButtonGroup", ["require", "exports", "DropDown"], function (require, exports, dropdown_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="ButtonGroup"/>
    var tools = G.tools;
    var d = G.d;
    var ButtonGroup = /** @class */ (function () {
        function ButtonGroup(conf) {
            this.conf = conf;
            this.leftBtn = conf.container;
            if (typeof conf.maxBtn === 'number' && conf.maxBtn > 0) {
                if ((conf.btns.length > conf.maxBtn) && (conf.btns.length - 1) != conf.maxBtn) {
                    this.initOverMaxBtn(conf);
                }
                else {
                    this.initLessMaxBtn(conf);
                }
            }
            else {
                this.conf.maxBtn = 999;
                this.initLessMaxBtn(conf);
            }
        }
        /*
        * 生成超过允许按钮显示的最大数量的按钮组
        * */
        ButtonGroup.prototype.initOverMaxBtn = function (conf) {
            var tempBtns = [], num = 0, i, doc = document.createDocumentFragment(), dom, data = [], self = this;
            for (; num <= conf.maxBtn; num++) {
                if (num === conf.maxBtn) {
                    tempBtns[num] = { title: '更多', icon: 'iconfont icon-sousuo', list: [] };
                    dom = d.create("<a class=\"dropdown-toggle moreBtn\" data-toggle=\"dropdown\"   title=\"\u67E5\u770B\u66F4\u591A\">\n                               <span class=\"moreBtn_text\">\u66F4\u591A</span><span class=\"iconfont icon-paixu iconPos\"></span></a>");
                    dom.dataset['more'] = num.toString();
                    doc.appendChild(dom);
                }
                else {
                    tempBtns.push(conf.btns[num]);
                    dom = d.create(tools.str.parseTpl(ButtonGroup.getBtnDom(conf.btns[num]), conf.btns[num]));
                    dom.dataset['index'] = num.toString();
                    doc.appendChild(dom);
                }
            }
            for (i = num - 1; i < conf.btns.length; i++) {
                tempBtns[num - 1].list.push(conf.btns[i]);
                data.push({ value: conf.btns[i].title, text: "<span class=\"" + conf.btns[i].icon + "\"></span>" + conf.btns[i].title });
            }
            this.dropDown = new dropdown_1.DropDown({
                el: dom,
                inline: false,
                onSelect: function (item, index) {
                    self.dropDown.toggle();
                    conf.clickHandle(conf.btns[num - 1 + index], self.dropDown.getUlDom().getElementsByTagName('li')[index]);
                },
                data: data,
                multi: null,
                className: "moreButUl"
            });
            conf.container.appendChild(doc);
            d.on(conf.container, 'click', '[data-index]', function () {
                conf.clickHandle(conf.btns[parseInt(this.dataset.index)], this);
            });
            var el;
            d.on(conf.container, 'click', '[data-more]', function (e) {
                self.dropDown.toggle();
            });
        };
        /*
        * 初始化小于maxBtn大小的函数
        * */
        ButtonGroup.prototype.initLessMaxBtn = function (conf) {
            if (conf.btns) {
                var doc_1 = document.createDocumentFragment();
                conf.btns.forEach(function (btn, i) {
                    var dom = d.create(tools.str.parseTpl(ButtonGroup.getBtnDom(btn), btn));
                    dom.dataset['index'] = i.toString();
                    doc_1.appendChild(dom);
                });
                conf.container.appendChild(doc_1);
                d.on(conf.container, 'click', '[data-index]', function () {
                    conf.clickHandle(conf.btns[parseInt(this.dataset.index)], this);
                });
            }
        };
        ButtonGroup.getBtnDom = function (obj) {
            var content = "" + (obj.icon ? '<span class="{{icon}}"></span>' : '') + obj.title, tpl = "<a class=\"btn button-small button-default\" title=\"" + obj.title + "\">" + content + "</a>";
            return tpl;
        };
        /*
        * 为其它地方函数调用相应的按钮节点
        * */
        ButtonGroup.prototype.getEle = function (index) {
            if (index < this.conf.maxBtn || (this.conf.btns.length - 1) === this.conf.maxBtn) {
                return d.query('[data-index="' + index + '"]', this.leftBtn);
            }
            else {
                return d.query('[data-index="' + (index - this.conf.maxBtn) + '"]', this.dropDown.getUlDom());
            }
        };
        return ButtonGroup;
    }());
    exports.ButtonGroup = ButtonGroup;
});

///<amd-module name=""CalendarDate"/>
define("\"CalendarDate", ["require", "exports", "ContainCom", "Datetime"], function (require, exports, ContainCom_1, datetime_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    // 用于创建多个时间选择器
    var CalendarDate = /** @class */ (function (_super) {
        __extends(CalendarDate, _super);
        function CalendarDate(para) {
            var _this = _super.call(this, para) || this;
            _this.datetime = _this.childs.filter(function (child) { return child instanceof datetime_1.Datetime; });
            _this.onSet = para.onSet;
            _this.datetime.forEach(function (date) {
                date.onSet = function () {
                    typeof _this.onSet === 'function' && _this.onSet(_this.value);
                };
            });
            return _this;
        }
        CalendarDate.prototype.wrapperInit = function (para) {
            return this._body = h("div", { class: "calendar-date-wrapper" });
        };
        Object.defineProperty(CalendarDate.prototype, "format", {
            get: function () {
                return this._format;
            },
            set: function (format) {
                if (tools.isNotEmpty(format)) {
                    this._format = format;
                    this.datetime.forEach(function (datetime) {
                        datetime.format(format);
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        CalendarDate.prototype.get = function () {
            return this.value;
        };
        CalendarDate.prototype.set = function (val, index) {
            var datetime = this.datetime && this.datetime[index];
            if (tools.isNotEmpty(datetime)) {
                datetime.set(val);
            }
        };
        Object.defineProperty(CalendarDate.prototype, "value", {
            get: function () {
                var result = [];
                this.datetime.forEach(function (datetime) {
                    result.push(datetime.value || null);
                });
                return result;
            },
            enumerable: true,
            configurable: true
        });
        return CalendarDate;
    }(ContainCom_1.ContainCom));
    exports.CalendarDate = CalendarDate;
});

define("DragDeform", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="DragDeform"/>
    var d = G.d;
    var DragDeform = /** @class */ (function () {
        function DragDeform(para) {
            var _this = this;
            this.para = para;
            para.dom && (this.top = para.dom.offsetHeight);
            para.border.forEach(function (obj) {
                var handle, resize, isLeft = false, isRight = false, isTop = false, lockX = false, lockY = false;
                switch (obj) {
                    case 'top':
                        resize = 'resizeTop';
                        isTop = true;
                        lockX = true;
                        break;
                    case 'left':
                        resize = 'resizeLeft';
                        isLeft = true;
                        lockY = true;
                        break;
                    case 'right':
                        resize = 'resizeRight';
                        lockY = true;
                        isRight = true;
                        break;
                    case 'bottom':
                        resize = 'resizeBottom';
                        lockX = true;
                        break;
                }
                handle = d.create("<div class=\"" + resize + "\"></div>");
                para.dragDom.appendChild(handle);
                _this.resize({
                    oParent: para.dragDom,
                    handle: handle,
                    isLeft: isLeft,
                    isRight: isRight,
                    isTop: isTop,
                    lockX: lockX,
                    lockY: lockY,
                });
                _this.scrollEven(handle);
            });
        }
        DragDeform.prototype.modify = function (data) {
            this.para.maxHeight = data.maxHeight;
            this.para.minHeight = data.minHeight;
        };
        DragDeform.prototype.scrollEven = function (handle) {
            var _this = this;
            d.on(this.para.dragDom, 'scroll', function () {
                handle.style.top = _this.para.dragDom.scrollTop + 'px';
            });
        };
        /**
         * 添加拉拽功能
         * @param data
         */
        DragDeform.prototype.resize = function (data) {
            var _this = this;
            // console.log(data);
            var handle = data.handle, oParent = data.oParent, isLeft = data.isLeft, isRight = data.isRight, isTop = data.isTop;
            handle.onmousedown = function (event) {
                var dragMaxHeight, dragMinHeight, dragMinWidth = _this.para.minWidth, dragMaxWidth = _this.para.maxWidth;
                if (_this.para.container) {
                    dragMaxHeight = _this.para.container.offsetHeight - _this.para.minHeight;
                    dragMinHeight = _this.para.container.offsetHeight - _this.para.maxHeight;
                }
                //获取初始位置信息
                var dEvent = event || window.event, disX = dEvent.clientX - handle.offsetLeft, //边框（鼠标）到屏幕左侧的距离
                disY = dEvent.clientY - handle.offsetTop, //边框（鼠标）到屏幕高度的距离
                iParentTop = oParent.offsetTop, iParentLeft = oParent.offsetLeft, iParentWidth = oParent.offsetWidth, iParentHeight = oParent.offsetHeight;
                document.onmousemove = function (event) {
                    var mEvent = event || window.event, iL = mEvent.clientX - disX, //宽度位移的距离
                    iT = mEvent.clientY - disY, //高度位移的距离
                    iW = isLeft ? iParentWidth - iL : handle.offsetWidth + iL, iH = isTop ? iParentHeight - iT : handle.offsetHeight + iT;
                    var top = iParentTop + iT, left = iParentLeft + iL + 'px';
                    if (isTop) {
                        if (iH > dragMaxHeight) {
                            top = _this.para.minHeight;
                        }
                        if (iH < dragMinHeight) {
                            top = _this.para.container.offsetHeight - dragMinHeight;
                        }
                        oParent.style.top = top + 'px';
                        if (_this.para.dom) {
                            _this.para.dom.style.height = top - (_this.para.top ? _this.para.top : 0) + 'px';
                        }
                    }
                    if (isLeft) {
                        oParent.style.left = left;
                    }
                    if (isRight) {
                        // console.log(iW);
                        if (iW > dragMaxWidth) {
                            iW = dragMaxWidth;
                        }
                        if (iW < dragMinWidth) {
                            iW = dragMinWidth;
                        }
                    }
                    data.lockX || (oParent.style.width = iW + "px");
                    data.lockY || (oParent.style.height = 'calc(100% - ' + top + 'px)');
                    return false;
                };
                document.onmouseup = function () {
                    document.onmousemove = null;
                    document.onmouseup = null;
                };
                return false;
            };
        };
        ;
        return DragDeform;
    }());
    exports.DragDeform = DragDeform;
});

define("Drag", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Drag"/>
    var d = G.d;
    var tools = G.tools;
    var Drag = /** @class */ (function () {
        function Drag(para) {
            this.para = para;
            this.moveing = false; // 是否处于移动状态
            this.init();
            this.dragEvent();
            this._container = (tools.isEmpty(para.container) || !para.scale) ? document.body : para.container;
        }
        Drag.prototype.init = function () {
            //初始化拖拽框允许被拖拽的部分
            this.para.head = this.para.head ? this.para.head : document.querySelector('body');
            var self = this;
            //初始化模态框拖拽时鼠标按下事件
            this.mouseDownPullHandle = function (e) {
                self.mousedownHandle(e);
            };
            this.mouseDownScaleHandle = function (e) {
                self.mousedownHandle(e);
            };
            //初始化拖拉缩放框（以拖拽框为父容器，在拖拽框拖拉缩放的方向创建对应的div）
            if (this.para.scale) {
                //设置拖拉缩放的元素，不需要拖拉效果时为空，需要时为对应位置的容器
                this.para.dom.classList.add('drag-container');
                switch (this.para.scale.position) {
                    case 'top':
                        var topDragWrapper = d.create("<div class=\"top-drag-wrapper\"></div>");
                        this.dragWrapper = topDragWrapper;
                        break;
                    case 'right':
                        var rightDragWrapper = d.create("<div class=\"right-drag-wrapper\"></div>");
                        this.dragWrapper = rightDragWrapper;
                        break;
                    case 'bottom':
                        var bottomDragWrapper = d.create("<div class=\"bottom-drag-wrapper\"></div>");
                        this.dragWrapper = bottomDragWrapper;
                        break;
                    case 'left':
                        var leftDragWrapper = d.create("<div class=\"left-drag-wrapper\"></div>");
                        this.dragWrapper = leftDragWrapper;
                        break;
                }
                if (this.dragWrapper) {
                    this.para.dom.appendChild(this.dragWrapper);
                }
            }
        };
        /*
         * 关闭模态框拖拽事件
         * */
        Drag.prototype.pullEventOff = function () {
            this.para.head.style.cursor = 'default';
            d.off(this.para.head, 'mousedown', this.mouseDownPullHandle);
        };
        /*
         * 关闭模态框拖拉事件
         * */
        Drag.prototype.scaleEventOff = function () {
            this.dragWrapper.style.cursor = 'default';
            d.off(this.dragWrapper, 'mousedown', this.mouseDownScaleHandle);
        };
        /*
         * 模态框拖拽、拖拉事件
         * */
        Drag.prototype.dragEvent = function () {
            //模态框拖拉时鼠标按下事件
            if (this.para.scale) {
                d.on(this.dragWrapper, 'mousedown', this.mouseDownScaleHandle);
            }
            else {
                this.para.head.style.cursor = 'move';
                d.on(this.para.head, 'mousedown', this.mouseDownPullHandle);
            }
        };
        /*
         * 获取拖拽边界
         * */
        Drag.prototype.getPanelInfo = function () {
            var elRect = this.para.dom.getBoundingClientRect();
            return {
                top: -10,
                left: -elRect.width + 50,
                right: this._container.scrollWidth + elRect.width - 50,
                bottom: this._container.scrollHeight + elRect.height - 50,
            };
        };
        /*
         * 获取模态框坐标信息界
         * */
        Drag.prototype.getDragState = function (event, elInfo, paInfo, type) {
            if (!this.dragState || type) {
                return {
                    startMouseTop: event.clientY,
                    startMouseLeft: event.clientX,
                    startTop: elInfo.top - paInfo.top,
                    startRight: elInfo.left - paInfo.left + elInfo.width,
                    startLeft: elInfo.left - paInfo.left,
                    startBottom: elInfo.top - paInfo.top + elInfo.height,
                    width: elInfo.width,
                    height: elInfo.height
                };
            }
            else {
                return this.dragState;
            }
        };
        /*
         * 鼠标按下事件
         * */
        Drag.prototype.mousedownHandle = function (event) {
            var _this = this;
            document.querySelector('body').style.userSelect = 'none';
            var self = this, _elInfo = this.para.dom.getBoundingClientRect(), _paInfo = this._container.getBoundingClientRect(), _event = event, _minTop = 0, _minLeft = 0, _maxTop = 0, _maxLeft = 0;
            this.moveing = true;
            this.panelInfo = this.getPanelInfo();
            this.dragState = this.getDragState(_event, _elInfo, _paInfo, true);
            _minTop = this.panelInfo.top;
            _maxTop = this.panelInfo.bottom - this.dragState.height;
            _minLeft = this.panelInfo.left;
            _maxLeft = this.panelInfo.right - this.dragState.width;
            if (this.para.scale) {
                this.para.dom.style.width = 'auto';
            }
            var isFirst = true;
            // 对话框移动主事件
            var mousemoveHandle = function (_event) {
                var event = _event, top, right, bottom, left;
                if (_this.moveing) {
                    //拖拉事件
                    if (_this.para.scale) {
                        switch (_this.para.scale.position) {
                            case 'top':
                                top = _this.dragState.startTop + (event.pageY - _this.dragState.startMouseTop);
                                if (top <= 0 || (_this._container.clientHeight - top < _this.para.scale.minHeight)) {
                                    top = (top <= 0) ? 0 : _this._container.clientHeight - _this.para.scale.minHeight;
                                }
                                _this.para.dom.style.top = top + 'px';
                                break;
                            case 'right':
                                right = (_this._container.clientWidth - event.pageX);
                                if (right > _this._container.clientWidth - _this.para.scale.minWidth) {
                                    right = _this._container.clientWidth - _this.para.minWidth;
                                }
                                _this.para.dom.style.right = right + 'px';
                                _this.para.dom.style.left = 0 + '';
                                break;
                            case 'bottom':
                                bottom = _this._container.clientHeight - event.pageY;
                                if (bottom > _this._container.clientHeight - _this.para.scale.minHeight) {
                                    bottom = _this._container.clientHeight - _this.para.scale.minHeight;
                                }
                                _this.para.dom.style.bottom = bottom + 'px';
                                break;
                            case 'left':
                                left = _this.dragState.startLeft + (event.pageX - _this.dragState.startMouseLeft);
                                if (left > _this._container.clientWidth - _this.para.scale.minWidth) {
                                    left = _this._container.clientWidth - _this.para.scale.minWidth;
                                }
                                _this.para.dom.style.left = left + 'px';
                                break;
                        }
                    }
                    //拖拽事件
                    else {
                        // 控制边界
                        var top_1 = _this.dragState.startTop + (event.pageY - _this.dragState.startMouseTop), left_1 = _this.dragState.startLeft + (event.pageX - _this.dragState.startMouseLeft);
                        if (!self.para.isDragOverBound) {
                            // 上边界
                            top_1 = top_1 < _minTop ? _minTop : top_1;
                            // 下边界
                            top_1 = top_1 > _maxTop ? _maxTop : top_1;
                            // 左边界
                            left_1 = left_1 < _minLeft ? _minLeft : left_1;
                            // 右边界
                            left_1 = left_1 > _maxLeft ? _maxLeft : left_1;
                        }
                        if (isFirst) {
                            isFirst = false;
                            _this.para.dom.style.removeProperty('transform');
                        }
                        _this.para.dom.style.top = top_1 + 'px';
                        _this.para.dom.style.left = left_1 + 'px';
                    }
                }
            };
            // 鼠标释放
            var mouseupHandle = function (event) {
                document.querySelector('body').style.userSelect = 'text';
                _this.moveing = false;
                _this.panelInfo = null;
                _this.dragState = null;
                d.off(document, 'mousemove', mousemoveHandle);
                d.off(document, 'mouseup', mouseupHandle);
            };
            d.on(document, 'mousemove', mousemoveHandle);
            d.on(document, 'mouseup', mouseupHandle);
        };
        return Drag;
    }());
    exports.Drag = Drag;
});


/// <amd-module name="DropDown"/>
define("DropDown", ["require", "exports", "List", "Spinner"], function (require, exports, list_1, spinner_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var DropDown = /** @class */ (function () {
        function DropDown(para) {
            var _this = this;
            this.para = para;
            // private values : any[] = null;
            // private texts : string[] = null;
            this.selectIndex = -1;
            this.isVisible = false;
            this.clickHideHandler = function (e) {
                if (_this.para.multi) {
                    var target = e.target;
                    if (d.closest(target, '.dropdown-menu')) {
                        return;
                    }
                }
                _this.hideList();
            };
            this.isFirst = true;
            this.ulDom = h("ul", { className: "dropdown-menu" });
            if (para.className) {
                this.ulDom.classList.add(para.className);
            }
            if (!para.el) {
                para.el = document.body;
            }
            if (para.multi !== null && !para.multi) {
                para.multi = false;
            }
            //当inline不为真时，所有的下拉列表都放在body下,以el为相对此位置显示下拉框
            if (para.inline) {
                para.el.appendChild(this.ulDom);
            }
            else {
                d.query('body').appendChild(this.ulDom);
            }
            //   if(para.multi === true){
            var listPara = {
                container: this.ulDom,
                select: null,
                data: this.data
                // callback : (index ) => {
                //     if(!this.para.inline){
                //         this.hideList();
                //     }else if(this.selectIndex !== -1){
                //         this.selectIndex = index;
                //         this.onSelect();
                //     }
                //     if(this.selectIndex !== index){
                //         this.selectIndex = index;
                //         this.onSelect();
                //     }
                // }
            };
            if (para.multi === true) {
                listPara.select = {
                    multi: true,
                    show: true,
                    callback: function (selected, index) {
                        var items = [];
                        selected.forEach(function (i) {
                            items.push(_this.data[i]);
                        });
                        selected = items;
                        var onMultiSelect = _this.para.onMultiSelect;
                        if (onMultiSelect && typeof onMultiSelect === 'function') {
                            onMultiSelect(selected, index);
                        }
                    }
                };
            }
            else {
                this.initSingleEvent();
            }
            this.list = new list_1.List(listPara);
            this.list.removeAllDom();
            this.initListData(this.para.data);
            if (para.inline) {
                this.ulDom.classList.add('inline');
                this.showList();
            }
            else {
                window.addEventListener('mui' in window ? 'tap' : 'click', this.clickHideHandler, true);
            }
        }
        Object.defineProperty(DropDown.prototype, "selectedIndex", {
            get: function () {
                return this.selectIndex;
            },
            enumerable: true,
            configurable: true
        });
        DropDown.prototype.getUlDom = function () {
            return this.ulDom;
        };
        DropDown.prototype.removeItem = function (index) {
            this.list.removeDom(index);
        };
        DropDown.prototype.removeAllItem = function () {
            this.list.removeAllDom();
        };
        // callback
        DropDown.prototype.initSingleEvent = function () {
            var self = this;
            d.on(this.ulDom, 'click', 'li[data-index]', function (e) {
                var index = parseInt(this.dataset.index);
                if (typeof self.para.multi !== 'boolean') {
                    self.selectIndex = index;
                    self.onSelect();
                }
                else {
                    //   console.log(self.data[index])
                    if (!self.para.inline) {
                        self.hideList();
                    }
                    self.selectIndex = index;
                    self.onSelect();
                    /* else if (self.selectIndex !== -1) {
                        self.selectIndex = index;
                        self.onSelect();
                    }
                    if (self.selectIndex !== index) {
                        self.selectIndex = index;
                        self.onSelect();
                    }*/
                }
                e.stopPropagation();
            });
        };
        DropDown.prototype.setPara = function (para) {
            var data = para.data, ajax = para.ajax;
            if (data && data[0]) {
                this.para.data = data;
                //用data参数获取数据
                this.initListData(data);
                this.para.ajax = null;
                // this.addShowClass();
            }
            else if (ajax) {
                this.para.ajax = tools.obj.merge(this.para.ajax, ajax);
                this.para.data = null;
                this.data = null;
                this.ulDom.innerHTML = '';
            }
        };
        DropDown.prototype.onSelect = function () {
            var index = this.selectIndex;
            this.para.onSelect && this.para.onSelect(this.data[index], index);
            // let onMultiSelect = this.para.onMultiSelect;
            // if(onMultiSelect && typeof onMultiSelect === 'function'){
            //     onMultiSelect(selected, index);
            // }
        };
        /**
         * 将传入的参数转为title 与 value
         */
        DropDown.prototype.initListData = function (data) {
            this.data = this.data2listItem(data);
            this.render(this.data);
        };
        DropDown.prototype.data2listItem = function (data) {
            var newData = [];
            if (Array.isArray(data)) {
                var hasTitle_1 = typeof data[0] !== 'string';
                data.forEach(function (d) {
                    if (hasTitle_1) {
                        newData.push(d);
                    }
                    else {
                        newData.push({
                            text: d + '',
                            value: d
                        });
                    }
                });
            }
            return newData;
        };
        DropDown.prototype.setData = function (data) {
            if (Array.isArray(data)) {
                // this.para.data = data;
                //用data参数获取数据
                this.initListData(data);
            }
        };
        DropDown.prototype.addShowClass = function (relEl) {
            //如果没有指定的相对位置，就以el为相对此位置显示下拉框
            this.ulDom.classList.add('show');
            if (!this.para.inline) {
                if (relEl) {
                    d.setPosition(this.ulDom, relEl, false);
                }
                else {
                    d.setPosition(this.ulDom, this.para.el, false);
                }
            }
        };
        DropDown.prototype.showList = function (relEl) {
            var _this = this;
            var data = this.para.data, ajax = this.para.ajax;
            this.addShowClass(relEl);
            this.isVisible = true;
            if (ajax && ajax.fun) {
                var isMulti = this.para.multi;
                if (!isMulti || (this.isFirst && isMulti)) {
                    this.isFirst = false;
                    this.spinner && this.spinner.hide();
                    this.spinner = new spinner_1.Spinner({
                        el: this.ulDom,
                        type: spinner_1.Spinner.SHOW_TYPE.cover
                    });
                    this.spinner.show();
                    // 用ajax获取数据
                    var selectedData = this.get();
                    ajax.fun(ajax.url, (selectedData && selectedData.value) ? selectedData.value.toString() : '', function (d) {
                        if (Array.isArray(d)) {
                            _this.initListData(d);
                        }
                        _this.spinner.hide();
                        _this.spinner = null;
                    });
                }
            }
            else {
                // 数据为空时，先解析为列表的数据
                if (this.data === null && Array.isArray(data)) {
                    //用data参数获取数据
                    this.initListData(data);
                }
            }
        };
        DropDown.prototype.hideList = function () {
            this.spinner && this.spinner.hide();
            this.ulDom.classList.remove('show');
            this.isVisible = false;
        };
        /**
         * 隐藏指定下标的item，每次重新隐藏，不与上次操作重叠，传入 空数组，或者null则显示全部
         * @param {number[]} indexes
         */
        DropDown.prototype.showItems = function (indexes) {
            d.queryAll('li[data-index]', this.ulDom)
                .forEach(function (li) {
                var index = parseInt(li.dataset.index);
                if (Array.isArray(indexes)) {
                    if (indexes.indexOf(index) > -1) {
                        li.classList.remove('hide');
                    }
                    else {
                        li.classList.add('hide');
                    }
                }
                else {
                    li.classList.remove('hide');
                }
                // if (Array.isArray(indexes) && indexes.indexOf(index) > -1) {
                //     li.classList.remove('hide');
                // } else {
                //     li.classList.add('hide');
                // }
            });
        };
        DropDown.prototype.toggle = function (relEl) {
            this.isVisible ? this.hideList() : this.showList(relEl);
        };
        DropDown.prototype.select = function (value) {
            if (Array.isArray(this.data)) {
                for (var i = 0, d_1 = null; d_1 = this.data[i]; i++) {
                    if (d_1.value === value) {
                        if (this.selectIndex !== i) {
                            this.selectIndex = i;
                            this.onSelect();
                        }
                        return true;
                    }
                }
                return false;
            }
            else {
                return false;
            }
        };
        /**
         * 获取选中index
         * @returns {any}
         */
        DropDown.prototype.get = function () {
            var index = this.selectIndex;
            //多选
            if (this.list.get()) {
                var indexes_1 = this.list.get();
                return this.data ? this.data.filter(function (data, index) {
                    return indexes_1.indexOf(index) > -1;
                }) : null;
                //单选
            }
            else if (tools.isEmpty(this.data) || index === -1) {
                return null;
            }
            else {
                return this.data[index];
            }
        };
        /**
         * 获取选中的数据
         * @returns {ListItem[]}
         */
        DropDown.prototype.getSelect = function () {
            var _this = this;
            var select = this.get(), data = [];
            select.forEach(function (s) {
                _this.data.forEach(function (d, i) {
                    if (s === i) {
                        data.push(d);
                    }
                });
            });
            return data;
        };
        DropDown.prototype.addSelected = function (index) {
            this.list.addSelected(index);
        };
        DropDown.prototype.set = function (index) {
            this.list.set(index);
        };
        DropDown.prototype.setAll = function () {
            this.list.setAll();
        };
        DropDown.prototype.unSet = function (index) {
            this.list.unSet(index);
        };
        DropDown.prototype.render = function (data, isRefresh) {
            if (isRefresh === void 0) { isRefresh = true; }
            var plus = 0;
            if (isRefresh) {
                this.ulDom.innerHTML = '';
            }
            else {
                plus = this.data ? this.data.length : 0;
            }
            var items = [];
            data.forEach(function (da, i) {
                if (!tools.isEmpty(da)) {
                    items.push(h("li", { className: "drop-item", title: tools.str.removeHtmlTags(da.text), "data-index": plus + i },
                        h("span", { className: "drop-span" }, da.text)));
                }
            });
            this.list.addByDom(items);
        };
        DropDown.prototype.destroy = function () {
            this.data = null;
            // this.ulDom.remove();
            d.remove(this.ulDom);
            this.ulDom = null;
            // this.texts = null;
            window.removeEventListener('mui' in window ? 'tap' : 'click', this.clickHideHandler, true);
        };
        DropDown.prototype.dataAdd = function (data) {
            var newData = this.data2listItem(data);
            this.render(newData, false);
            this.data = Array.isArray(newData) && Array.isArray(this.data) ? this.data.concat(newData) : newData;
        };
        DropDown.prototype.dataDel = function (index) {
            this.ulDom.removeChild(this.ulDom.querySelector("[data-index=\"" + index + "\"]"));
            delete this.data[index];
            if (index === this.selectIndex) {
                this.selectIndex = -1;
            }
        };
        DropDown.prototype.dataDelAll = function () {
            this.data = null;
            // this.values = null;
            this.render([]);
        };
        DropDown.prototype.getData = function () {
            return this.data;
        };
        /**
         * 返回value对应的index
         * @param str
         * @returns {Array}
         */
        DropDown.prototype.transIndex = function (str) {
            var data = this.getData(), num = [];
            data && str.forEach(function (s) {
                data.forEach(function (d, i) {
                    if (s === d.value) {
                        num.push(i);
                    }
                });
            });
            return num;
        };
        return DropDown;
    }());
    exports.DropDown = DropDown;
});

/// <amd-module name="Fabs"/>
// import tools = G.tools;
// import d = G.d;
// interface locPara{
// 	top?:number,
// 	bottom?:number,
// 	left?:number,
// 	right?:number
// }
//
// interface FabsPara{
// 	pos : locPara,
// 	btns : Btn[],
// 	container?: HTMLElement;
// 	callback?(btn : Btn, i : number);
// }
// export class Fabs{
// 	private container:HTMLElement = null;
// 	private mainButton:HTMLElement = null;
// 	private posData:locPara = null;
// 	private isOpen:boolean = false;
// 	constructor(private para:FabsPara){
// 		this.posData = para.pos;
// 		this.init();
// 		this.getData(para);
// 		if(para.callback) {
// 			d.on(this.container, 'click', 'div.item', function (e) {
// 				para.callback(para.btns[this.dataset.index], parseInt(this.dataset.index));
// 			});
// 		}
// 	}
// 	private getData(para:FabsPara){
// 		let data = para.btns;
// 		if(data.length==1){
// 			this.mainButton.innerHTML = data[0].icon?data[0].icon:data[0].title;
// 		}
// 		else {
// 			for (let i = 0; i < data.length; i++) {
// 				let div = document.createElement("div");
// 				div.className = "item";
// 				div.dataset.index = i.toString();
// 				div.style.transitionDelay = i / 3 + "";
// 				let span = document.createElement("span");
// 				span.innerHTML = data[i].icon ? data[i].icon : data[i].title;
// 				div.appendChild(span);
// 				this.container.appendChild(div);
// 			}
// 		}
// 		para.container ? para.container.appendChild(this.container) :document.body.appendChild(this.container);
// 	}
// 	private init(){
// 		this.container = document.createElement("div");
// 		this.container.className = "fabs-wrapper";
// 		this.mainButton = document.createElement("div");
// 		this.mainButton.className = "mainButton";
// 		this.mainButton.innerText = "按钮";
// 		this.container.appendChild(this.mainButton);
// 		if(this.posData){
// 			for (let prop in this.posData){
// 				this.container.style[prop] = this.posData[prop] + "px";
// 			}
// 		}
// 		let that = this;
// 		this.mainButton.addEventListener("click",function(){
// 			if(!that.isOpen)
// 				that.show();
// 			else
// 				that.hide();
// 		})
// 	}
// 	show(){
// 		let animateDiv = document.querySelectorAll(".item");
// 		for(let i=0;i<animateDiv.length;i++){
// 			animateDiv[i].setAttribute("style","top:-"+50*(i+1)+"px; opacity:1;");
// 		}
// 		this.isOpen = true;
// 	}
// 	hide(){
// 		let animateDiv = document.querySelectorAll(".item");
// 		for(let i=0;i<animateDiv.length;i++){
// 			animateDiv[i].setAttribute("style","top:-40px; opacity:0;");
// 		}
// 		this.isOpen = false;
// 	}
// }
//
//
//
//

define("List", ["require", "exports", "SelectBox"], function (require, exports, selectBox_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="List"/>
    var tools = G.tools;
    var d = G.d;
    var List = /** @class */ (function () {
        function List(para) {
            var _this = this;
            this.para = para;
            this.listDom = [];
            para.container.classList.add('list');
            if (this.para.select) {
                this.selectBox = new selectBox_1.SelectBox({
                    select: {
                        multi: this.para.select.multi,
                        callback: function (index) {
                            _this.para.select.callback(_this.selectBox.get(), index);
                        }
                    },
                    container: this.para.container,
                });
            }
            if (this.para.select && this.para.select.show) {
                this.showSelect();
            }
        }
        List.prototype.setTpl = function (tpl) {
            this.tpl = tpl;
        };
        List.prototype.showSelect = function () {
            this.para.container.classList.add('has-select');
        };
        List.prototype.hideSelect = function () {
            this.para.container.classList.remove('has-select');
        };
        // removeAll
        List.prototype.removeAllDom = function () {
            this.listDom.forEach(function (dom) {
                d.remove(dom);
            });
            this.listDom = [];
        };
        List.prototype.removeDom = function (index) {
            d.remove(this.listDom[index]);
            var select = this.selectBox.get();
            if (select.indexOf(parseInt(index)) > -1) {
                select.splice(index, 1);
            }
            delete this.listDom[index];
        };
        List.prototype.addByTpl = function (data) {
            var _this = this;
            if (!this.tpl) {
                return;
            }
            var arr = [];
            data && data[0] && data.forEach(function (d, i) {
                var html = tools.str.parseTpl(_this.tpl, d, false);
                var el = G.d.create(html);
                arr.push(el);
            });
            this.addByDom(arr);
            return arr;
        };
        List.prototype.addByDom = function (el) {
            var _this = this;
            el.forEach(function (d, i) {
                d.classList.add('list-item');
                //若有index, 不另外添加index
                d.dataset.index = d.dataset.index ? d.dataset.index : i.toString();
                if (_this.para.select && _this.para.select.multi !== undefined) {
                    _this.selectBox.addByItem(d);
                }
                _this.listDom.push(d);
                _this.para.container.appendChild(d);
            });
        };
        List.prototype.get = function () {
            if (this.selectBox) {
                return this.selectBox.get();
            }
        };
        List.prototype.addSelected = function (index) {
            if (this.selectBox) {
                this.selectBox.addSelected(index);
            }
        };
        List.prototype.setAll = function () {
            if (this.selectBox) {
                this.selectBox.setAll();
            }
        };
        List.prototype.set = function (index) {
            if (this.selectBox) {
                this.selectBox.set(index);
            }
        };
        List.prototype.unSet = function (index) {
            if (this.selectBox) {
                this.selectBox.unSet(index);
            }
        };
        return List;
    }());
    exports.List = List;
});

define("Mask", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var tools = G.tools;
    var d = G.d;
    var Mask = /** @class */ (function (_super) {
        __extends(Mask, _super);
        function Mask(para) {
            var _this = _super.call(this, para) || this;
            _this.clickHandlers = {};
            _this.hashMap = {};
            _this.init();
            return _this;
        }
        Mask.getInstance = function () {
            if (!Mask.instance) {
                Mask.instance = new Mask({});
            }
            return Mask.instance;
        };
        Mask.prototype.wrapperInit = function () {
            return d.create('<div class="global-mark"></div>');
        };
        Mask.prototype.init = function () {
            var _this = this;
            var type = 'click';
            d.on(this.wrapper, type, function (e) {
                if (_this.background) {
                    e.preventDefault && e.preventDefault();
                    e.stopPropagation();
                    // typeof this.onClick === 'function' && this.onClick(e);
                }
                _this.clickHandlers[Mask.key] && _this.clickHandlers[Mask.key](e);
            });
            // this.container = this.para.container;
            // this.container.appendChild(this.wrapper);
        };
        Mask.prototype.show = function (key) {
            var _this = this;
            this.wrapper.style.display = 'block';
            for (var k in this.hashMap) {
                if (this.hashMap[k] === key) {
                    Mask.key = k;
                    break;
                }
            }
            d.on(this.wrapper, 'touchmove', function (e) {
                if (_this.background) {
                    e.preventDefault();
                }
            });
        };
        Mask.prototype.hide = function () {
            this.wrapper.style.display = 'none';
            d.off(this.wrapper, 'touchmove');
        };
        Object.defineProperty(Mask.prototype, "background", {
            get: function () {
                return this._background;
            },
            set: function (e) {
                this._background = tools.isEmpty(e) ? true : e;
                var background = '';
                if (typeof this._background === 'string') {
                    background = this._background;
                }
                else {
                    if (this._background) {
                        background = 'rgba(0,0,0,.3)';
                    }
                    else {
                        background = 'rgba(0,0,0,0)';
                    }
                }
                this.wrapper.style.background = background;
            },
            enumerable: true,
            configurable: true
        });
        Mask.prototype.addClick = function (key, handler) {
            var name = '';
            if (key in Object.values(this.hashMap)) {
                for (var _i = 0, _a = Object.keys(this.hashMap); _i < _a.length; _i++) {
                    var k = _a[_i];
                    if (this.hashMap[k] === key) {
                        name = k;
                        break;
                    }
                }
            }
            else {
                name = tools.getGuid();
                this.hashMap[name] = key;
            }
            this.clickHandlers[name] = handler;
        };
        Mask.prototype.destroy = function () {
            Mask.instance = null;
            _super.prototype.destroy.call(this);
        };
        return Mask;
    }(Component));
    exports.Mask = Mask;
});

define("ImgModal", ["require", "exports", "Modal"], function (require, exports, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    // import sys = G.sys;
    var d = G.d;
    exports.ImgModal = (function () {
        var gallery = null, wrapper, container, downAddr, onDownload;
        function showPhotoSwipe(para, index) {
            if (index === void 0) { index = 0; }
            if (gallery === null) {
                // let self = this;
                require(['photoSwipe', 'photoSwipeUi'], function (photoSwipe, PhotoSwipeUI_Default) {
                    downAddr = para.downAddr;
                    onDownload = para.onDownload;
                    if (!wrapper) {
                        //加载tpl
                        wrapper = d.create(imgModalTpl);
                        container = para.container ? para.container : document.body;
                        container.appendChild(wrapper);
                        //下载按钮
                        if (downAddr && onDownload) {
                            d.on(container, 'click', '.icon-download', function () {
                                onDownload(downAddr);
                            });
                        }
                        // ImgModal.initTag = false;
                    }
                    var pswpElement = d.query('.pswp', container), items = [], len = para.img.length;
                    for (var i = 0; i <= len - 1; i++) {
                        items.push({
                            src: para.img[i],
                            w: 964,
                            h: 1024
                        });
                    }
                    gallery = new photoSwipe(pswpElement, PhotoSwipeUI_Default, items, {
                        // history & focus options are disabled on CodePen
                        history: false,
                        focus: false,
                        page: false,
                        pinchToClose: false,
                        closeOnScroll: false,
                        closeOnVerticalDrag: false,
                        mouseUsed: false,
                        escKey: true,
                        arrowKeys: true,
                        modal: false,
                        clickToCloseNonZoomable: false,
                        closeElClasses: []
                        // , fullscreenEl: false
                        ,
                        shareEl: false,
                        showAnimationDuration: 0,
                        hideAnimationDuration: 0,
                        index: index
                    });
                    gallery.init();
                    gallery.listen('close', function () {
                        gallery = null;
                    });
                });
            }
        }
        function show(para) {
            if (para.isThumbnail) {
                //    显示缩略图
                showModalThumbnail(para);
            }
            else {
                showPhotoSwipe(para);
            }
        }
        function showModalThumbnail(para) {
            var body = createImgThumbnail(para);
            var modal = new Modal_1.Modal({
                body: body,
                width: '750px',
                header: '查看缩略图',
                isOnceDestroy: true
            });
        }
        function createImgThumbnail(para) {
            var div = document.createElement('div');
            div.classList.add('thumbnail-container');
            para.img.forEach(function (value, index) {
                var imgCon = document.createElement('div');
                imgCon.classList.add('img-container');
                var img = document.createElement('img');
                img.src = value;
                imgCon.appendChild(img);
                div.appendChild(imgCon);
            });
            if (para.textArr) {
                var allImgContainer_1 = d.queryAll('.img-container', div);
                para.textArr.forEach(function (value, index) {
                    var p = document.createElement('p');
                    p.innerText = value;
                    allImgContainer_1[index].appendChild(p);
                });
            }
            d.on(div, 'click', 'img', function (e) {
                var index = d.queryAll('img').indexOf(e.target);
                showPhotoSwipe(para, index);
            });
            return div;
        }
        return {
            show: show
        };
    })();
    var imgModalTpl = '<div class="pswp" tabindex="-1" role="dialog" aria-hidden="true">' +
        '<div class="pswp__bg"></div>' +
        '<div class="pswp__scroll-wrap">' +
        '<div class="pswp__container">' +
        '<div class="pswp__item"></div>' +
        '<div class="pswp__item"></div>' +
        '<div class="pswp__item"></div>' +
        '</div>' +
        '<div class="pswp__ui pswp__ui--hidden">' +
        '<div class="pswp__top-bar">' +
        '<div class="pswp__counter"></div>' +
        '<button class="pswp__button pswp__button--close iconfont icon-close"></button>' +
        '<button class="pswp__button pswp__button--fs iconfont icon-maximize"></button>' +
        '<button class="pswp__button pswp__button--zoom iconfont icon-magnifier"></button>' +
        '<button class="pswp__button  iconfont icon-download"> </button>' +
        '<div class="pswp__preloader">' +
        '<div class="pswp__preloader__icn">' +
        '<div class="pswp__preloader__cut">' +
        '<div class="pswp__preloader__donut"></div>' +
        '</div></div></div></div>' +
        '<div class="pswp__share-modal pswp__share-modal--hidden pswp__single-tap">' +
        '<div class="pswp__share-tooltip"></div>' +
        '</div>' +
        '<button class="pswp__button pswp__button--arrow--left iconfont icon-arrow-left">' +
        '<span class=" iconfont icon-arrow-left"></span> </button>' +
        '<button class="pswp__button pswp__button--arrow--right">' +
        '<span class=" iconfont icon-arrow-right"></span> </button>' +
        '<div class="pswp__caption"> ' +
        '<div class="pswp__caption__center"></div></div></div></div></div>';
});

define("Loading", ["require", "exports", "Modal"], function (require, exports, Modal_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var Loading = /** @class */ (function () {
        function Loading(para) {
            this.para = para;
            this.modal = null;
            para = para ? para : {};
            para.msg = para.msg ? para.msg : '加载中...';
            var body = document.body;
            var container = tools.isEmpty(para.container) ? body : para.container;
            this.modal = new Modal_1.Modal({
                isMb: false,
                container: container,
                width: '158px',
                height: '120px',
                body: h("div", null,
                    h("div", { className: "spinner" }),
                    h("div", null, para.msg)),
                className: 'modal-loading' + (container !== body ? ' container-loading' : ''),
                isBackground: false
            });
            this.delayHied();
            if (container !== body) {
                var offset = para.container.getBoundingClientRect();
                var wrapper = this.modal.wrapper;
                wrapper.style.position = 'absolute';
                wrapper.style.left = (offset.width - 158) / 2 + 'px';
                wrapper.style.top = Math.max(0, (offset.height - 120) / 2) + 'px';
            }
            //禁用元素
            if (this.para.disableEl) {
                this.para.disableEl.classList.add('disabled');
            }
        }
        /**
         * 显示加载框
         * */
        Loading.prototype.show = function () {
            this.modal.isShow = true;
            this.delayHied();
        };
        /**
         * 销毁加载框
         * */
        Loading.prototype.destroy = function () {
            if (this.para && this.para.disableEl) {
                this.para.disableEl.classList.remove('disabled');
            }
            this.modal && this.modal.destroy();
            this.para = null;
            this.modal = null;
        };
        /**
         * 延迟隐藏，默认3秒后销毁
         * */
        Loading.prototype.delayHied = function () {
            var _this = this;
            var duration = tools.isEmpty(this.para.duration) ? 30 : this.para.duration;
            setTimeout(function () {
                if (_this.modal && _this.modal.wrapper) {
                    _this.hide();
                }
            }, duration * 1000);
        };
        /*
         * 隐藏加载框
         * */
        Loading.prototype.hide = function () {
            if (this.modal.wrapper) {
                this.modal.isShow = false;
            }
        };
        return Loading;
    }());
    exports.Loading = Loading;
});

define("paging", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="paging"/>
    var tools = G.tools;
    var d = G.d;
    var Paging = /** @class */ (function () {
        function Paging(config) {
            this.pageTimeShow = true; // 耗时是否显示
            this.draging = false; // 拖拽中
            this.pagingStatus = true; // 触底加载状态，true：未加载，false：加载中
            this.pageHTML = {
                wrapper: '<div class="pagingWrapper mini"></div>',
                totalText: "\u5171{{totalText}}\u6761",
                recordTotal: "<span class=\"pagingTotal\">{{recordTotal}}</span>",
                option: "<span class=\"pagingOption\">{{option}}</span>",
                container: "<span class=\"pagingContainer\"></span>",
                prev: '<a class="pagingPrev{disabled}" href="#" title="上一页" data-index="prev">&lt;</a>',
                pageTpl: '<a class="pagingNumber{disabled}" href="#" title="{title}" data-index="{page}">{page}</a>',
                prev5: "<a class=\"pagingNumber pagingPrev5\" title=\"\u5411\u524D5\u9875\" data-index=\"prev5\"><em class=\"dot\">...</em><em class=\"arrow\">&lt;&lt;</em></a>",
                next5: "<a class=\"pagingNumber pagingNext5\" title=\"\u5411\u540E5\u9875\" data-index=\"next5\"><em class=\"dot\">...</em><em class=\"arrow\">&gt;&gt;</em></a>",
                next: '<a class="pagingNext{disabled}" title="下一页" href="#" data-index="next">&gt;</a>',
                elevator: '<span class="pagingElevator">跳至<input name="pagingElevator" />页</span>',
                timestamp: '<span class="pagingTime">{{time}}</span>',
                content: '正在加载',
                nomore: '没有更多数据了',
                pullLoading: "<div class=\"pagingBottom\">\n                           <div class=\"pagingBottomContainer\">\n                               <div class=\"pagingLoading\"></div>\n                               <div class=\"pagingPullCaption\">{{content}}</div>\n                           </div>\n                       </div>",
                pullBtn: "<div class=\"pagingBottom\">\n                           <div class=\"pagingBottomContainer\">\n                               <div class=\"pagingPullCaption\"><a href=\"#\" class=\"pagingPullBtn\" title=\"\u52A0\u8F7D\u66F4\u591A\">\u2193 \u52A0\u8F7D\u66F4\u591A</a></div>\n                           </div>\n                       </div>"
            };
            this.disabled = '{disabled}';
            this.disabledClass = ' pagingDisabled';
            this.currentClass = ' pagingCurrent';
            this.option = {};
            this.createPaging = (function (self) {
                function wrapper() {
                    self.pagingWrapper = d.create(self.pageHTML.wrapper);
                    self.pagingConf.el.appendChild(self.pagingWrapper);
                    self.pagingConf.class && self.pagingWrapper.classList.add(self.pagingConf.class);
                }
                function total() {
                    var totalText = tools.str.parseTpl(self.pageHTML.totalText, { totalText: self.pagingConf.recordTotal.toString() }, false), newDom = tools.str.parseTpl(self.pageHTML.recordTotal, { recordTotal: totalText }, false);
                    _append(newDom);
                }
                function option() {
                    if (self.pagingConf.pageOption && self.pagingConf.pageOption.length > 0) {
                        var newDom = ['<select>'];
                        for (var _i = 0, _a = self.pagingConf.pageOption; _i < _a.length; _i++) {
                            var item = _a[_i];
                            newDom.push("<option value=\"" + item + "\">" + item + " \u6761/\u9875</option>");
                        }
                        newDom.push('</select>');
                        newDom = tools.str.parseTpl(self.pageHTML.option, { option: newDom.join('') }, false);
                        newDom = _append(newDom);
                        tools.selVal(newDom.querySelector('select'), self.pagingConf.pageSize);
                    }
                }
                function container() {
                    self.pagingContainer = d.create(self.pageHTML.container);
                    self.pagingWrapper.appendChild(self.pagingContainer);
                }
                function prev() {
                    var prev = self.pageHTML.prev.replace(self.disabled, self.pageCurrent === 1 ? self.disabledClass : '');
                    _appendContainer(prev);
                }
                function next() {
                    var next = self.pageHTML.next, newDom;
                    if ((self.pagingConf.recordTotal > 0 && self.pageCurrent >= self.pageCount) ||
                        (self.pagingConf.recordTotal === 0 && self.pagingConf.last)) {
                        next = next.replace(self.disabled, self.disabledClass);
                    }
                    else {
                        next = next.replace(self.disabled, '');
                    }
                    _appendContainer(next);
                }
                function _append(domStr) {
                    var newDom = d.create(domStr);
                    self.pagingWrapper.appendChild(newDom);
                    return newDom;
                }
                function _appendContainer(domStr) {
                    var newDom = d.create(domStr);
                    self.pagingContainer.appendChild(newDom);
                    return newDom;
                }
                function _insertContainer(domStr) {
                    domStr = domStr.replace(new RegExp(self.disabled, 'g'), '');
                    var toInsert = self.pagingContainer.querySelector('.pagingNumber') || self.pagingContainer.lastChild, newDom = d.create(domStr);
                    self.pagingContainer.insertBefore(newDom, toInsert);
                }
                /** 创建页码
                 */
                function _appendPage(pages, selected) {
                    if (typeof pages === 'string') {
                        _insertContainer(pages);
                    }
                    else if (pages.length === 1) {
                        var DOM = self.pageHTML.pageTpl.replace(/\{page\}/g, pages[0].toString());
                        DOM = DOM.replace(/\{title\}/g, pages[0].toString());
                        _insertContainer(DOM);
                    }
                    else if (pages.length === 2) {
                        for (var i = pages[1]; i >= pages[0]; i--) {
                            var DOM = self.pageHTML.pageTpl.replace(/\{page\}/g, i.toString());
                            DOM = DOM.replace(/\{title\}/g, i.toString());
                            if (i === selected) {
                                DOM = DOM.replace(self.disabled, self.currentClass);
                            }
                            else {
                                DOM = DOM.replace(self.disabled, '');
                            }
                            _insertContainer(DOM);
                        }
                    }
                }
                // 清除页码
                function cleanPage() {
                    if (self.pagingContainer) {
                        var pages = self.pagingContainer.querySelectorAll('.pagingNumber');
                        Array.prototype.forEach.call(pages, function (item, i) {
                            self.remove(item);
                        });
                    }
                }
                function page() {
                    var st = 1, ed = self.pageCount, prev5 = false, next5 = false, endBtn = null, startBtn = null, newDom;
                    if (self.pageCount > 10) {
                        if (self.pageCurrent < self.pageCount - 3) {
                            endBtn = self.pageCount;
                            next5 = true;
                        }
                        if (self.pageCurrent > 3) {
                            startBtn = 1;
                            if (self.pageCurrent > 4) {
                                prev5 = true;
                            }
                        }
                    }
                    if (self.pageCount > 10) {
                        if (self.pageCurrent < 4) {
                            st = 1;
                            ed = 5;
                        }
                        else if (self.pageCurrent >= 4 && self.pageCurrent <= (self.pageCount - 4)) {
                            st = self.pageCurrent - 2;
                            ed = self.pageCurrent + 2;
                        }
                        else {
                            st = self.pageCount - 4;
                            ed = self.pageCount;
                        }
                    }
                    // 最后一页
                    endBtn && _appendPage([endBtn]);
                    // 向后5页
                    next5 && _appendPage(self.pageHTML.next5);
                    // 页码
                    _appendPage([st, ed], self.pageCurrent);
                    // 向前5页
                    prev5 && _appendPage(self.pageHTML.prev5);
                    // 第一页
                    startBtn && _appendPage([startBtn]);
                }
                function elevator() {
                    _append(self.pageHTML.elevator);
                }
                function timestamp() {
                    var timeText = self.pagingConf.time.toString() + ' ms';
                    _append(tools.str.parseTpl(self.pageHTML.timestamp, { time: timeText }, false));
                    if (!self.pageTimeShow) {
                        var pagingTime = self.pagingWrapper.querySelector('.pagingTime');
                        pagingTime.style.display = 'none';
                    }
                }
                function checkDisabled() {
                    if (!self.pagingConf.scroll) {
                        var prevDisabled = self.pageCurrent === 1, nextDisabled = false, pagingPrev = self.pagingWrapper.querySelector('.pagingPrev'), pagingNext = self.pagingWrapper.querySelector('.pagingNext'), pagingTime = self.pagingWrapper.querySelector('.pagingTime'), disabledClass = self.disabledClass.substr(1);
                        if ((self.pagingConf.recordTotal > 0 && self.pageCurrent >= self.pageCount) ||
                            (self.pagingConf.recordTotal === 0 && self.pagingConf.last)) {
                            nextDisabled = true;
                        }
                        if (prevDisabled) {
                            pagingPrev.classList.add(disabledClass);
                        }
                        else {
                            pagingPrev.classList.remove(disabledClass);
                        }
                        if (nextDisabled) {
                            pagingNext.classList.add(disabledClass);
                        }
                        else {
                            pagingNext.classList.remove(disabledClass);
                        }
                        // 耗时
                        if (self.pageTimeShow) {
                            pagingTime.style.display = 'block';
                        }
                        else {
                            pagingTime.style.display = 'none';
                        }
                    }
                }
                return { wrapper: wrapper, total: total, option: option, prev: prev, next: next, container: container, page: page, cleanPage: cleanPage, elevator: elevator, timestamp: timestamp, checkDisabled: checkDisabled };
            })(this);
            this.pageEvent = (function (self) {
                var timeout;
                function clickHandle(event) {
                    event.preventDefault();
                    var target = event.target, index;
                    target = d.closest(target, 'a');
                    index = target.dataset.index;
                    if (!index || target.classList.contains('pagingCurrent') || target.classList.contains('pagingDisabled')) {
                        return;
                    }
                    var currentPage;
                    switch (index) {
                        case 'home':
                            currentPage = 1;
                            break;
                        case 'prev':
                            currentPage = self.pageCurrent - 1;
                            break;
                        case 'next':
                            currentPage = self.pageCurrent + 1;
                            break;
                        case 'prev5':
                            currentPage = self.pageCurrent - 5;
                            break;
                        case 'next5':
                            currentPage = self.pageCurrent + 5;
                            break;
                        case 'last':
                            currentPage = self.pageCount;
                            break;
                        default:
                            currentPage = parseInt(index);
                    }
                    self.pagingConf.offset = self.getOffset(currentPage);
                }
                function selectHandle(event) {
                    self.pagingConf.pageSize = parseInt(event.target.value);
                    offsetReset();
                }
                function changeHandle(event) {
                    var value = event.target.value;
                    if (/\d+/.test(value)) {
                        value = parseInt(value);
                        self.pagingConf.offset = self.getOffset(value);
                    }
                    else {
                        event.target.value = '';
                    }
                }
                // 耗时更新
                function timeChange(val) {
                    self.pagingWrapper.querySelector('.pagingTime').innerHTML = val.toString() + ' ms';
                }
                function offsetReset() {
                    self.pagingConf.offset = 0;
                }
                function recordTotalChange(val) {
                    var totalText = tools.str.parseTpl(self.pageHTML.totalText, { totalText: val.toString() }), pagingTotal = self.pagingWrapper.querySelector('.pagingTotal');
                    pagingTotal && (pagingTotal.innerHTML = totalText);
                }
                // 页码更新
                function pageChange() {
                    timeout && clearTimeout(timeout);
                    timeout = setTimeout(function () {
                        self.pageReflash();
                        self.change();
                    }, 10);
                }
                // 添加事件
                function addEvent() {
                    if (self.pagingConf.recordTotal !== 0) {
                        // 完整型
                        d.on(self.pagingWrapper, 'change', 'input', changeHandle);
                        if (self.pagingConf.pageOption && self.pagingConf.pageOption.length > 0) {
                            d.on(self.pagingWrapper, 'change', 'select', selectHandle);
                        }
                    }
                    d.on(self.pagingWrapper, self.eventClickName, 'a', clickHandle);
                }
                function init() {
                    addEvent();
                    self.setDefine(self.pagingConf, 'time', timeChange);
                    self.setDefine(self.pagingConf, 'offset', pageChange);
                    self.setDefine(self.pagingConf, 'last', pageChange);
                    self.setDefine(self.pagingConf, 'pageSize', function (val, key) {
                        offsetReset();
                        pageChange();
                    });
                    self.setDefine(self.pagingConf, 'recordTotal', function (val, key) {
                        recordTotalChange(val);
                        offsetReset();
                        pageChange();
                    });
                }
                return {
                    init: init,
                    addEvent: addEvent,
                    timeChange: timeChange,
                    offsetReset: offsetReset,
                    recordTotalChange: recordTotalChange
                };
            })(this);
            var defaultConf = {
                el: null,
                class: '',
                time: 0,
                offset: 0,
                last: false,
                recordTotal: 0,
                pageSize: 20,
                pageOption: [20, 50, 100],
                scroll: null,
                change: function (state) { } // 翻页触发回调
            };
            this.pagingConf = Object.assign(defaultConf, this.checkConfig(config));
            if (this.pagingConf.scroll) {
                var _a = this.pageHTML, content = _a.content, nomore = _a.nomore;
                this.pagingConf.scroll = tools.obj.merge({ content: content, nomore: nomore }, this.pagingConf.scroll);
            }
            if (!this.pagingConf.el && this.pagingConf.el.nodeType !== 1) {
                console.error('el is undefined');
                return;
            }
            // this.eventClickName = 'ontouchstart' in document ? 'touchstart': 'click';
            this.eventClickName = 'click';
            this.create();
        }
        Paging.prototype.checkConfig = function (config) {
            if (typeof config.time === 'undefined') {
                this.pageTimeShow = false;
            }
            else {
                this.pageTimeShow = true;
            }
            return config;
        };
        Paging.prototype.setDefine = function (data, key, callback) {
            var self = this;
            self.option[key] = data[key];
            Object.defineProperty(data, key, {
                get: function () {
                    return self.option[key];
                },
                set: function (newVal) {
                    if (self.option[key] !== newVal) {
                        self.option[key] = newVal;
                        callback(newVal, key);
                    }
                }
            });
        };
        Paging.prototype.init = function () {
            var conf = this.pagingConf;
            this.pageCount = Math.ceil(conf.recordTotal / conf.pageSize) || 1;
            this.pageCurrent = Math.floor(conf.offset / conf.pageSize) + 1;
            /*if(conf.recordTotal === 0 || conf.recordTotal % conf.pageSize != 0) {
                this.pageCount++;
            }*/
        };
        Paging.prototype.liteInit = function () {
            var conf = this.pagingConf;
            this.pageCount = Math.ceil(conf.recordTotal / conf.pageSize) || 1;
            this.pageCurrent = Math.floor(conf.offset / conf.pageSize) + 1;
            this.pageCount = Math.max(this.pageCurrent, this.pageCount);
        };
        Paging.prototype.scrollInit = function () {
            var conf = this.pagingConf;
            this.pageCount = Math.ceil(conf.recordTotal / conf.pageSize) || 1;
            this.pageCurrent = Math.floor(conf.offset / conf.pageSize) + 1;
        };
        Paging.prototype.create = function () {
            // 初始化参数
            if (this.pagingConf.scroll) {
                this.scrollInit();
                // 触底加载型
                this.createScroll();
                if (!this.pagingConf.scroll.auto) {
                    this.createBtnScroll();
                }
            }
            else {
                if (this.pagingConf.recordTotal === 0) {
                    // 简洁型
                    this.liteInit();
                    this.createLite();
                }
                else {
                    // 完整型
                    this.init();
                    this.createFull();
                }
            }
            this.addEvent();
        };
        /**
         * 触底加载
         */
        Paging.prototype.createScroll = function () {
            var conf = this.pagingConf, pullLoading = tools.str.parseTpl(this.pageHTML.pullLoading, { content: conf.scroll.content }, false);
            if (conf.scroll.Container) {
                var height = void 0;
                height = conf.scroll.Container.offsetHeight;
                this.pagingContainerHeight = height;
                conf.el.style.height = height + 'px';
            }
            this.getPagingScroll();
            conf.el.classList.add('pagingBottomWrapper');
            this.pagingBottom = d.create(pullLoading);
            this.pagingBottomContainer = this.pagingBottom.querySelector('.pagingBottomContainer');
            this.pagingLoading = this.pagingBottom.querySelector('.pagingLoading');
            this.pagingPullCaption = this.pagingBottom.querySelector('.pagingPullCaption');
            conf.el.appendChild(this.pagingBottom);
        };
        // 判断容器内有唯一的dom
        Paging.prototype.getPagingScroll = function () {
            var child = this.pagingConf.el.childNodes, len = 0, pagingScroll;
            for (var i = 0; i < child.length; i++) {
                if (child[i].nodeType === 1) {
                    len++;
                    pagingScroll = child[i];
                }
            }
            if (len === 1) {
                pagingScroll.classList.add('pagingScroll');
                this.pagingScroll = pagingScroll;
            }
            else {
                // 容器没有主容器，创建顶层容器pagingScroll
                var item = void 0;
                this.pagingScroll = d.create('<div class="pagingScroll"></div>');
                while (item = this.pagingConf.el.firstChild) {
                    this.pagingScroll.appendChild(item);
                }
                this.pagingConf.el.appendChild(this.pagingScroll);
            }
        };
        /**
         * 触底按钮加载
         */
        Paging.prototype.createBtnScroll = function () {
            this.pagingPullBtn = d.create(this.pageHTML.pullBtn);
            this.pagingPullBtn.style.display = 'block';
            this.pagingPullBtn.style.visibility = 'visible';
            this.pagingBottom.style.display = 'none';
            this.pagingBottom.style.visibility = 'visible';
            this.pagingConf.el.appendChild(this.pagingPullBtn);
        };
        // 触底手动加载事件
        Paging.prototype.scrollBtnEvent = function () {
            var self = this, conf = self.pagingConf, pagingPullBtn = self.pagingPullBtn, pagingBottom = self.pagingBottom;
            // 是否加载中
            self.setDefine(self, 'pagingStatus', function (val) {
                var loading = self.pagingLoading.style.display, caption = self.pagingPullCaption.innerHTML.trim();
                loading !== 'inline-block' && (self.pagingLoading.style.display = 'inline-block');
                console.log('pagingStatus', val);
                if (val === false) {
                    caption !== conf.scroll.content && (self.pagingPullCaption.innerHTML = conf.scroll.content);
                    pagingBottom.style.display = 'block';
                    pagingPullBtn.style.display = 'none';
                }
                else {
                    pagingBottom.style.display = 'none';
                    pagingPullBtn.style.display = 'block';
                }
            });
            // 是否最后一页
            self.setDefine(conf, 'last', function (val) {
                var loading = self.pagingLoading.style.display;
                if (val === false) {
                    self.pagingPullCaption.innerHTML = conf.scroll.content;
                    pagingBottom.style.display = 'none';
                    pagingBottom.style.visibility = 'hidden';
                    pagingPullBtn.style.display = 'block';
                }
                else {
                    loading !== 'none' && (self.pagingLoading.style.display = 'none');
                    self.pagingPullCaption.innerHTML = conf.scroll.nomore;
                    pagingBottom.style.display = 'block';
                    pagingBottom.style.visibility = 'visible';
                    pagingPullBtn.style.display = 'none';
                }
            });
            // 按钮点击加载
            d.on(pagingPullBtn, this.eventClickName, 'a.pagingPullBtn', function (event) {
                event.preventDefault();
                if (!self.pagingStatus || conf.last) {
                    return;
                }
                self.scrollGo();
            });
        };
        // 触底自动加载事件
        Paging.prototype.scrollAutoEvent = function () {
            var self = this, conf = self.pagingConf, pagingBottom = self.pagingBottom;
            // 是否加载中
            self.setDefine(self, 'pagingStatus', function (val) {
                var loading = self.pagingLoading.style.display, caption = self.pagingPullCaption.innerHTML.trim();
                loading !== 'inline-block' && (self.pagingLoading.style.display = 'inline-block');
                if (val === false) {
                    caption !== conf.scroll.content && (self.pagingPullCaption.innerHTML = conf.scroll.content);
                    pagingBottom.style.visibility = 'visible';
                }
                else {
                    pagingBottom.style.visibility = 'hidden';
                }
            });
            // 是否最后一页
            self.setDefine(conf, 'last', function (val) {
                var loading = self.pagingLoading.style.display;
                if (val === false) {
                    self.pagingPullCaption.innerHTML = conf.scroll.content;
                }
                else {
                    loading !== 'none' && (self.pagingLoading.style.display = 'none');
                    self.pagingPullCaption.innerHTML = conf.scroll.nomore;
                    pagingBottom.style.visibility = 'visible';
                }
            });
            //console.log(123);
            if (conf.scroll.Container) {
                d.on(conf.el, 'scroll', self.scrollAutoHandle());
            }
            else {
                d.on(window, 'scroll', self.scrollAutoHandle());
            }
            //d.on(window, 'scroll', self.scrollAutoHandle());
        };
        Paging.prototype.scrollAutoHandle = function () {
            var self = this, conf = self.pagingConf;
            return function (event) {
                var scrollTop = document.body.scrollTop | document.documentElement.scrollTop, scrollHeight = document.body.scrollHeight | document.documentElement.scrollHeight, availHeight = window.screen.availHeight;
                if (!self.pagingStatus || self.pageCurrent >= self.pageCount) {
                    return;
                }
                if (conf.scroll.Container) {
                    var pagingScrollHeight = self.pagingScroll.offsetHeight;
                    if (conf.el.scrollTop > pagingScrollHeight - self.pagingContainerHeight) {
                        self.scrollGo();
                    }
                }
                else {
                    if (scrollTop + availHeight > scrollHeight - 20) {
                        self.scrollGo();
                    }
                }
            };
        };
        Paging.prototype.scrollGo = function () {
            this.pagingStatus = false;
            //this.pagingConf.offset = this.getOffset(this.pageCurrent + 1);
            this.pagingConf.offset += this.pagingConf.pageSize;
            this.scrollInit();
            this.scrollChange();
            /*this.pagingBottom.style.visibility = 'visible';
    
            this.change(()=>{
                this.pagingStatus = true;
                this.pagingBottom.style.visibility = 'hidden';
            });*/
        };
        /**
         * 分页完整型
         */
        Paging.prototype.createFull = function () {
            this.pagingConf.el.innerHTML = '';
            // wrapper
            this.createPaging.wrapper();
            // 总条数
            this.createPaging.total();
            // 单页条数可选项
            this.createPaging.option();
            // 页码区
            this.createPaging.container();
            // 上一页
            this.createPaging.prev();
            // 下一页
            this.createPaging.next();
            // 页码
            this.createPaging.page();
            // 电梯框
            this.createPaging.elevator();
            // 耗时
            this.createPaging.timestamp();
        };
        /**
         * 分页简洁型
         */
        Paging.prototype.createLite = function () {
            // wrapper
            this.createPaging.wrapper();
            // 页码区
            this.createPaging.container();
            // 上一页
            this.createPaging.prev();
            // 下一页
            this.createPaging.next();
            // 耗时
            this.createPaging.timestamp();
        };
        Paging.prototype.getOffset = function (page) {
            var offset = (page - 1) * this.pagingConf.pageSize;
            offset < 0 && (offset = 0);
            if (this.pagingConf.recordTotal !== 0 && offset > this.pagingConf.recordTotal) {
                offset = this.pagingConf.recordTotal - this.pagingConf.recordTotal % this.pagingConf.pageSize;
            }
            return offset;
        };
        Paging.prototype.addEvent = function () {
            if (this.pagingConf.scroll) {
                // 触底加载型
                if (this.pagingConf.scroll.auto) {
                    // 自动触底加载
                    this.scrollAutoEvent();
                }
                else {
                    // 手动点击加载
                    this.scrollBtnEvent();
                }
            }
            else {
                this.pageEvent.init();
            }
        };
        Paging.prototype.pageReflash = function () {
            var self = this;
            if (self.pagingConf.recordTotal === 0) {
                // 简洁型
                self.liteInit();
                self.createPaging.checkDisabled();
            }
            else {
                // 完整型
                self.init();
                self.createFull();
                self.createPaging.cleanPage();
                self.createPaging.page();
                self.createPaging.checkDisabled();
                if (!this.pagingConf.scroll) {
                    this.pageEvent.addEvent();
                }
            }
        };
        Paging.prototype.change = function () {
            this.pagingConf.change({
                size: this.pagingConf.pageSize,
                current: this.pageCurrent,
                count: this.pageCount,
                offset: this.pagingConf.offset,
                last: this.pageCurrent >= this.pageCount ? true : false
            });
            // this.pagingConf.change({
            //     pageSize: this.pagingConf.pageSize,
            //     pageCurrent : this.pageCurrent,
            //     pageCount : this.pageCount
            // }, this.changePara);this
        };
        Paging.prototype.scrollChange = function () {
            this.change();
            //
            // this.pagingConf.change(this.pagingConf.offset, this.pagingConf.pageSize, this.changePara, (status=false)=>{
            //     this.pagingStatus = true;
            //     this.pagingConf.last = status;
            // });
        };
        /**
         * 重新设置分页条状态
         * @param {PG_Reset} option
         */
        Paging.prototype.reset = function (option) {
            this.pagingStatus = true;
            if (option) {
                option = this.checkConfig(option);
                if (this.pagingConf.scroll) {
                    for (var _i = 0, _a = ['offset', 'recordTotal', 'time', 'last', 'change']; _i < _a.length; _i++) {
                        var i = _a[_i];
                        typeof option[i] != 'undefined' && (this.pagingConf[i] = option[i]);
                    }
                    this.scrollInit();
                }
                else {
                    for (var _b = 0, _c = ['offset', 'recordTotal', 'time', 'last', 'change']; _b < _c.length; _b++) {
                        var i = _c[_b];
                        if (typeof option[i] != 'undefined') {
                            this.option[i] = option[i];
                            switch (i) {
                                case 'time':
                                    this.pageEvent.timeChange(this.option[i]);
                                    break;
                                case 'pageSize':
                                    this.pageEvent.offsetReset();
                                    break;
                                case 'recordTotal':
                                    this.pageEvent.recordTotalChange(this.option[i]);
                                    //this.option['offset'] = 0;
                                    break;
                            }
                        }
                    }
                    this.pageReflash();
                }
            }
            if (this.pageCurrent >= this.pageCount) {
                this.pagingConf.last = true;
            }
            else {
                this.pagingConf.last = false;
            }
        };
        Paging.prototype.remove = function (dom) {
            if (dom) {
                d.remove(dom);
            }
        };
        /**
         * 销毁分页条
         */
        Paging.prototype.destroy = function () {
            if (this.pagingWrapper) {
                this.remove(this.pagingWrapper);
                this.pagingWrapper = null;
            }
            if (this.pagingConf.scroll && this.pagingConf.scroll.auto) {
                d.off(this.pagingConf.el, 'scroll', this.scrollAutoHandle);
                //this.pagingConf.el.removeEventListener('scroll', this.scrollAutoHandle);
            }
        };
        /**
         * 翻页方法
         * @param {number} page
         */
        Paging.prototype.go = function (page) {
            this.pagingConf.offset = this.getOffset(page);
            //this.change();
        };
        return Paging;
    }());
    exports.Paging = Paging;
});

define("PopMenu", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="PopMenu"/>
    var d = G.d;
    var Component = G.Component;
    var tools = G.tools;
    var NewPopMenuItem = /** @class */ (function (_super) {
        __extends(NewPopMenuItem, _super);
        function NewPopMenuItem(para) {
            var _this = _super.call(this, para) || this;
            _this.text = tools.isEmpty(para.title) ? '' : para.title;
            _this.icon = tools.isEmpty(para.icon) ? '' : para.icon;
            _this.content = tools.obj.merge(para.content, {
                click: tools.isEmpty(para.onClick) ? function () {
                } : para.onClick,
                children: tools.isEmpty(para.children) ? [] : para.children
            });
            return _this;
        }
        // 容器
        NewPopMenuItem.prototype.wrapperInit = function (para) {
            return h("div", { className: "pop-mbmenu-item fmbitem" },
                h("div", { className: "pop-mbmenu-textwrapper" }));
        };
        Object.defineProperty(NewPopMenuItem.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            // 是否可用
            set: function (disabled) {
                this._disabled = !!disabled;
                this.wrapper.classList.toggle('nouse', this._disabled);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenuItem.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                if (selected === this._selected) {
                    return;
                }
                this._selected = !!selected;
                this.wrapper.classList.toggle('selected', this._selected);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenuItem.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                this._text = text;
                this.textEl && (this.textEl.innerText = text);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenuItem.prototype, "textEl", {
            get: function () {
                if (!this._textEl) {
                    this._textEl = d.query('.pop-mbmenu-textwrapper', this.wrapper);
                }
                return this._textEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenuItem.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (icon) {
                var _a, _b;
                if (icon) {
                    if (typeof icon === 'string') {
                        (_a = this.iconEl.classList).add.apply(_a, icon.split(' '));
                        this._icon = icon;
                    }
                }
                else {
                    this._icon && (_b = this.iconEl.classList).remove.apply(_b, this._icon.split(' '));
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenuItem.prototype, "iconEl", {
            get: function () {
                if (!this._iconEl) {
                    this._iconEl = h("i", { className: "pop-mbmenu-icon", "data-role": "icon" });
                    d.before(this.textEl, this._iconEl);
                }
                return this._iconEl;
            },
            enumerable: true,
            configurable: true
        });
        NewPopMenuItem.prototype.destory = function () {
            d.remove(this.wrapper);
            this._textEl = null;
            this._iconEl = null;
        };
        return NewPopMenuItem;
    }(Component));
    exports.NewPopMenuItem = NewPopMenuItem;
    var NewPopMenu = /** @class */ (function (_super) {
        __extends(NewPopMenu, _super);
        function NewPopMenu(para) {
            var _this = _super.call(this, {
                title: '', icon: '', content: {}
            }) || this;
            _this.container = para.container;
            _this.contextMenu = _this;
            _this.originChildren = para.items;
            _this.splitItems(para.items);
            _this.setChildren();
            _this.show = false;
            d.on(_this.wrapper, 'click', '.next-item', function (event) {
                event.stopPropagation();
                var itemWrappers = d.queryAll('.pop-mbmenu-item', _this.wrapper), index = parseInt(_this.wrapper.dataset.index), nextIndex = index + 1 >= _this.wrapperItemsArr.length ? _this.wrapperItemsArr.length - 1 : index + 1;
                if (index !== _this.wrapperItemsArr.length - 1) {
                    _this.wrapper.dataset['index'] = nextIndex + '';
                    _this.setChildren(nextIndex);
                }
            });
            d.on(_this.wrapper, 'click', '.prev-item', function (e) {
                e.stopPropagation();
                var itemWrappers = d.queryAll('.pop-mbmenu-item', _this.wrapper), index = parseInt(_this.wrapper.dataset.index), prevIndex = index - 1 < 0 ? 0 : index - 1;
                _this.wrapper.dataset['index'] = prevIndex + '';
                _this.setChildren(prevIndex);
            });
            d.on(_this.wrapper, 'click', '.fmbitem', function (event) {
                event.stopPropagation();
                var fmbitem = d.closest(event.target, '.fmbitem'), index = parseInt(fmbitem.dataset.index), item = _this.children[index];
                item.selected = true;
                _this.onOpen && _this.onOpen(item);
            });
            return _this;
        }
        Object.defineProperty(NewPopMenu.prototype, "contextMenu", {
            get: function () {
                return this._contextMenu;
            },
            set: function (menu) {
                this._contextMenu = menu;
            },
            enumerable: true,
            configurable: true
        });
        NewPopMenu.prototype.wrapperInit = function () {
            return h("div", { className: "pop-mbmenu-wrapper", "data-index": "0" });
        };
        NewPopMenu.prototype.setChildren = function (index) {
            var _this = this;
            if (index === void 0) { index = 0; }
            this.wrapper.innerHTML = '';
            var items = this.wrapperItemsArr[index];
            if (this.wrapperItemsArr.length === 1) {
                items.forEach(function (item, i) {
                    i === 0 && item.wrapper.classList.add('leftBorderRadius');
                    i === items.length - 1 && item.wrapper.classList.add('rightBorderRadius');
                    _this.wrapper.appendChild(item.wrapper);
                });
            }
            else {
                if (index !== 0) {
                    var firstPrevBtn = this.prevBtn;
                    this.wrapper.appendChild(this.prevBtn);
                }
                items.forEach(function (item, i) {
                    (index === 0 && i === 0) && item.wrapper.classList.add('leftBorderRadius');
                    _this.wrapper.appendChild(item.wrapper);
                });
                var lastNextBtn = this.nextBtn;
                if (index === this.wrapperItemsArr.length - 1) {
                    lastNextBtn.classList.add('nouse');
                }
                this.wrapper.appendChild(lastNextBtn);
            }
            this.wrapper.appendChild(h("div", { className: "arrow" }));
            this.setArrowPostiton(this.x);
        };
        Object.defineProperty(NewPopMenu.prototype, "children", {
            get: function () {
                if (!this._children) {
                    this._children = [];
                }
                return this._children;
            },
            set: function (items) {
                this._children = items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenu.prototype, "show", {
            get: function () {
                return this._show;
            },
            set: function (isShow) {
                this._show = isShow;
                if (isShow === true) {
                    this.splitItems(this.originChildren);
                    this.wrapper.dataset['index'] = '0';
                    this.setChildren();
                    this.wrapper.style.opacity = '1';
                    this.wrapper.style.display = 'flex';
                    this.wrapper.style.display = '-webkit-flex';
                }
                else {
                    this.wrapper.style.opacity = '0';
                    this.wrapper.style.display = 'none';
                }
            },
            enumerable: true,
            configurable: true
        });
        NewPopMenu.prototype.setPosition = function (x, y) {
            this.x = x;
            this.wrapper.style.top = (y - 45) + 'px';
            var x1 = x, width = parseInt(window.getComputedStyle(this.wrapper).width);
            this.wrapperItemsArr.length === 1 ? x1 -= width / 2 : x1 -= 120;
            if (x + 120 > window.innerWidth) {
                x1 = window.innerWidth - width;
                d.query('.arrow', this.wrapper).style.left = (x - x1 - 5) + 'px';
            }
            else if (x1 < 0) {
                x1 = 0;
                d.query('.arrow', this.wrapper).style.left = (x - 5) + 'px';
            }
            else {
                d.query('.arrow', this.wrapper).style.left = 'calc(50% - 5px)';
            }
            this.wrapper.style.left = x1 + 'px';
        };
        NewPopMenu.prototype.setArrowPostiton = function (x) {
            var x1 = x;
            this.wrapperItemsArr.length === 1 ? x1 -= 50 : x1 -= 120;
            if (x + 120 > window.innerWidth) {
                x1 = window.innerWidth - 240;
                d.query('.arrow', this.wrapper).style.left = (x - x1 - 5) + 'px';
            }
            if (x1 < 0) {
                x1 = 0;
                d.query('.arrow', this.wrapper).style.left = (x - 5) + 'px';
            }
        };
        Object.defineProperty(NewPopMenu.prototype, "prevBtn", {
            get: function () {
                this._prevBtn = h("div", { className: "pop-mbmenu-item prev-item" }, "<");
                return this._prevBtn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenu.prototype, "nextBtn", {
            get: function () {
                this._nextBtn = h("div", { className: "pop-mbmenu-item next-item" }, ">");
                return this._nextBtn;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(NewPopMenu.prototype, "wrapperItemsArr", {
            get: function () {
                if (!this._wrapperItemsArr) {
                    this._wrapperItemsArr = [];
                }
                return this._wrapperItemsArr;
            },
            set: function (itemArr) {
                this._wrapperItemsArr = itemArr;
            },
            enumerable: true,
            configurable: true
        });
        NewPopMenu.prototype.splitItems = function (items) {
            var _this = this;
            this.children = [];
            this.wrapperItemsArr = [];
            items.forEach(function (item, index) {
                item.container = _this.wrapper;
                var mbItem = new NewPopMenuItem(item);
                mbItem.wrapper.dataset['index'] = index + '';
                _this.children.push(mbItem);
            });
            if (this.children.length <= 3) {
                this.wrapperItemsArr.push(this.children);
            }
            else {
                this.wrapper.style.width = '240px';
                var arr = this.children.slice(3), frontArr = this.children.slice(0, 3), len = Math.ceil(arr.length / 3) + 1;
                this.wrapperItemsArr.push(frontArr);
                for (var i = 0; i < len - 1; i++) {
                    var itemArr = arr.slice(i * 3, (i + 1) * 3);
                    this.wrapperItemsArr.push(itemArr);
                }
            }
        };
        Object.defineProperty(NewPopMenu.prototype, "onOpen", {
            get: function () {
                return this._onOpen;
            },
            set: function (cb) {
                this._onOpen = cb;
            },
            enumerable: true,
            configurable: true
        });
        NewPopMenu.prototype.destory = function () {
            d.off(this.wrapper);
            d.remove(this.wrapper);
        };
        return NewPopMenu;
    }(NewPopMenuItem));
    exports.NewPopMenu = NewPopMenu;
    var PopMenu = /** @class */ (function () {
        function PopMenu(para) {
            var _this = this;
            this.menuDom = null;
            //添加遮罩层
            var cover = h("div", { className: "showMenu-cover hide" });
            d.on(cover, 'click', function (e) {
                _this.destroy();
                e.stopPropagation();
            });
            //遍历菜单栏
            var div = h("div", { className: "showMenu" },
                h("div", { className: "menus" }),
                h("div", { className: "triangle-down" }));
            d.append(cover, div);
            document.body.appendChild(cover);
            this.menuDom = cover;
            var ulid = d.query('.menus', div);
            para.arr.forEach(function (a) {
                var cdiv = document.createElement("div");
                cdiv.innerHTML = a;
                ulid.appendChild(cdiv);
            });
            d.on(ulid, 'click', 'div', function (e) {
                para.callback(e.target, _this.customData);
            });
        }
        /**
         * 显示菜单
         * @param {number} top
         * @param {number} left
         * @param [custom]
         */
        PopMenu.prototype.show = function (top, left, custom) {
            // let odiv = dom;
            this.menuDom.classList.remove('hide');
            this.customData = custom;
            var ulid = d.query('.menus', this.menuDom);
            //跟随元素的中间位置
            var tran = d.query('.triangle-down', this.menuDom), menuWidth = ulid.offsetWidth, 
            // position = odiv.getBoundingClientRect(),
            // x1 = odiv.offsetWidth / 2,  写在外面
            // x2 = position.left,
            // y1 = position.top,
            // y1 = top,
            // x = left,
            x3 = window.screen.width, t = x3 - left;
            //防止元素超出左右边界
            if (t <= menuWidth / 2) {
                ulid.style.left = (x3 - menuWidth) + 'px';
            }
            else {
                if (left <= menuWidth / 2) {
                    ulid.style.left = 0 + 'px';
                }
                else {
                    ulid.style.left = (left - menuWidth / 2) + 'px';
                }
            }
            ulid.style.top = (top - 42) + 'px';
            tran.style.left = (left - 8) + 'px';
            tran.style.top = (top - 8) + 'px';
        };
        PopMenu.prototype.hide = function () {
            this.menuDom.classList.add('hide');
        };
        PopMenu.prototype.destroy = function () {
            d.remove(this.menuDom);
        };
        return PopMenu;
    }());
    exports.PopMenu = PopMenu;
});

define("Popover", ["require", "exports", "Mask"], function (require, exports, mask_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Popover"/>
    var d = G.d;
    var Component = G.Component;
    var tools = G.tools;
    var Popover = /** @class */ (function (_super) {
        __extends(Popover, _super);
        function Popover(para) {
            var _this = _super.call(this, para) || this;
            _this.events = (function (self) {
                var click1, click2;
                return {
                    on: function () {
                        //点击show
                        d.on(self.target, 'click', click1 = function (e) {
                            e.stopPropagation();
                            if (Popover.popView !== self) {
                                Popover.popView && (Popover.popView.show = false);
                            }
                            Popover.popView = self;
                            // e.stopPropagation();
                            // d.off(document, 'click', click);
                            self.show = !self.show;
                            if (self.isWatch && self.show) {
                                self.calcPosition();
                            }
                        });
                        //点击设置的点击事件
                        d.on(self.wrapper, 'click', '.popover-item', click2 = function (e) {
                            // e.stopPropagation();
                            var index = d.closest(e.target, '[data-index]').dataset.index;
                            typeof self.onClick === 'function' && self.onClick.call(this, index);
                        });
                    },
                    off: function () {
                        d.off(self.target, 'click', click1);
                        d.off(self.wrapper, 'click', '.popover-item', click2);
                    }
                };
            })(_this);
            _this._isWatch = false;
            _this._popoverItems = [];
            _this._items = null;
            _this.init(para);
            return _this;
        }
        Popover.prototype.wrapperInit = function () {
            //创建popover框
            return d.create("<div class=\"popover-wrapper\"><div class=\"arrow\"></div><ul class=\"popover-list\"></ul></div>");
        };
        //初始化popover
        Popover.prototype.init = function (para) {
            // this.container = para.container;
            this.onClick = para.onClick;
            this.onClose = para.onClose;
            this.target = para.target;
            this.isWatch = para.isWatch;
            this.animated = tools.isEmpty(para.animated) ? true : para.animated;
            //创建popover框
            // this._wrapper = d.create(`<div class="popover-wrapper"></div>`);
            // let arrow = d.create('<div class="arrow"></div>');
            // let list = d.create('<ul class="popover-list"></ul>');
            // this._wrapper.appendChild(arrow);
            // this._wrapper.appendChild(list);
            this.items = para.items;
            // this.container.appendChild(this._wrapper);
            this.isBackground = para.isBackground;
            this.position = para.position;
            this.events.on();
            this.show = para.show;
            this.wrapper.style.display = 'none';
            if (Popover.popView === null) {
                d.on(document, 'click', function (ev) {
                    Popover.popView && (Popover.popView.show = false);
                });
            }
        };
        // //绑定事件
        // private clickEventInit() {
        //     let self = this;
        //     //点击show
        //     d.on(self.target, 'click', (e) => {
        //         e.stopPropagation();
        //         self.show = !self.show;
        //         if(self.isWatch && self.show){
        //             self.calcPosition();
        //         }
        //     });
        //     //点击设置的点击事件
        //     d.on(self.wrapper, 'click', '.popover-item',(e) => {
        //         e.stopPropagation();
        //         let index: string = d.closest((<HTMLElement>e.target), '[data-index]').dataset.index;
        //         typeof self.onClick === 'function' && self.onClick(index);
        //     });
        // }
        //popover方向设置
        Popover.prototype.calcPosition = function () {
            var self = this, target = self.target;
            var width = target.offsetWidth;
            var height = target.offsetHeight;
            var left = target.offsetLeft;
            var top = target.offsetTop;
            if (target.offsetParent) {
                var parent_1 = target.offsetParent;
                while (parent_1) {
                    left += parent_1.offsetLeft;
                    top += parent_1.offsetTop;
                    parent_1 = parent_1.offsetParent;
                }
            }
            var currentWidth = self.wrapper.offsetWidth;
            var currentHeight = self.wrapper.offsetHeight;
            var arrow = self.wrapper.querySelector('.arrow');
            var arrowWidth = arrow.offsetWidth;
            var arrowHeight = arrow.offsetHeight;
            var hypotenuse = Math.sqrt(arrowWidth * arrowWidth + arrowHeight * arrowHeight) / 2 - 3;
            var docHeight = document.documentElement.offsetHeight;
            var docWidth = document.documentElement.offsetWidth;
            setPosition(self.position);
            function setPosition(position) {
                arrow.removeAttribute('style');
                arrow.classList.remove('arrow-bottom');
                arrow.classList.remove('arrow-right');
                arrow.classList.remove('arrow-top');
                arrow.classList.remove('arrow-left');
                switch (position) {
                    case 'auto':
                        setPosition('down');
                        var b = self.wrapper.offsetTop - (docHeight - currentHeight);
                        if (b > 0) {
                            setPosition('up');
                            var t = self.wrapper.offsetTop;
                            if (t < 0 && Math.abs(t) > b) {
                                setPosition('down');
                            }
                        }
                        if (self.wrapper.offsetLeft > (docWidth - currentWidth)) {
                            var diffVal = self.wrapper.offsetLeft - (docWidth - currentWidth) + 5;
                            self.wrapper.style.left = left + (width / 2) - (currentWidth / 2) - diffVal + 'px';
                            var arrowLeft = currentWidth / 2 - arrowWidth / 2 + diffVal;
                            arrow.style.left = arrowLeft + 'px';
                            if (arrowLeft > (currentWidth - 7 - arrowWidth)) {
                                setPosition('left');
                            }
                        }
                        else if (self.wrapper.offsetLeft < 0) {
                            var diffVal = 0 - self.wrapper.offsetLeft + 5;
                            self.wrapper.style.left = left + (width / 2) - (currentWidth / 2) + diffVal + 'px';
                            var arrowLeft = currentWidth / 2 - arrowWidth / 2 - diffVal;
                            arrow.style.left = arrowLeft + 'px';
                            if (arrowLeft < 7) {
                                setPosition('right');
                            }
                        }
                        break;
                    case 'left':
                        self.wrapper.style.top = top + height / 2 - currentHeight / 2 + 'px';
                        self.wrapper.style.left = left - currentWidth - hypotenuse + 'px';
                        arrow.style.top = currentHeight / 2 - arrowHeight / 2 + 'px';
                        arrow.classList.add('arrow-left');
                        break;
                    case 'right':
                        self.wrapper.style.top = top + height / 2 - currentHeight / 2 + 'px';
                        self.wrapper.style.left = left + width + hypotenuse + 'px';
                        arrow.style.top = currentHeight / 2 - arrowHeight / 2 + 'px';
                        arrow.classList.add('arrow-right');
                        break;
                    case 'up':
                        self.wrapper.style.top = top - currentHeight - hypotenuse + 'px';
                        self.wrapper.style.left = left + (width / 2) - (currentWidth / 2) + 'px';
                        arrow.style.left = currentWidth / 2 - arrowWidth / 2 + 'px';
                        arrow.classList.add('arrow-top');
                        break;
                    case 'down':
                        self.wrapper.style.top = top + height + hypotenuse + 'px';
                        self.wrapper.style.left = left + (width / 2) - (currentWidth / 2) + 'px';
                        arrow.style.left = currentWidth / 2 - arrowWidth / 2 + 'px';
                        arrow.classList.add('arrow-bottom');
                        break;
                }
            }
        };
        //添加遮罩层
        Popover.prototype.addBackground = function () {
            var self = this;
            this.mask = mask_1.Mask.getInstance();
            this.mask.background = this.isBackground;
            this.mask.addClick(this, function () {
                self.show = false;
            });
            this.mask.show(this);
        };
        //隐藏遮罩层
        Popover.prototype.removeBackground = function () {
            this.mask.hide();
            typeof this.onClose === 'function' && this.onClose();
        };
        Object.defineProperty(Popover.prototype, "isWatch", {
            get: function () {
                return this._isWatch;
            },
            set: function (isWatch) {
                if (tools.isNotEmpty(isWatch)) {
                    this._isWatch = isWatch;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (e) {
                this._onClick = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover.prototype, "onClose", {
            get: function () {
                return this._onClose;
            },
            set: function (e) {
                this._onClose = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover.prototype, "popoverItems", {
            get: function () {
                return this._popoverItems;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover.prototype, "items", {
            get: function () {
                return this._items;
            },
            //生成popover每项item
            set: function (e) {
                this._items = e;
                var list = this.wrapper.querySelector('.popover-list');
                this._popoverItems = [];
                for (var i = 0, len = e.length; i < len; i++) {
                    var item = e[i];
                    item.index = i + '';
                    var popoverItem = new PopoverItem({
                        title: item.title,
                        container: list,
                        disabled: item.disabled,
                        name: item.name,
                        onClick: item.onClick,
                        index: item.index,
                        icon: item.icon,
                        show: item.show
                    });
                    this._popoverItems.push(popoverItem);
                }
            },
            enumerable: true,
            configurable: true
        });
        //添加一项popover的item
        Popover.prototype.addItem = function (e) {
            var item = e;
            var list = this.wrapper.querySelector('.popover-list');
            var index = this.items.length;
            item.index = index + '';
            this._items.push({
                title: item.title,
                container: list,
                disabled: item.disabled,
                name: item.name,
                onClick: item.onClick,
                index: item.index,
                icon: item.icon
            });
            var popoverItem = new PopoverItem(this._items[this._items.length - 1]);
            this._popoverItems.push(popoverItem);
            this.calcPosition();
        };
        //删除一项popover的item
        Popover.prototype.itemRemove = function (index) {
            delete this.items[index];
            var del = false;
            if (!tools.isEmpty(this._popoverItems[index])) {
                this._popoverItems[index].destroy();
                this.calcPosition();
                del = true;
            }
            delete this._popoverItems[index];
            return del;
        };
        Object.defineProperty(Popover.prototype, "show", {
            get: function () {
                return this._show;
            },
            set: function (e) {
                var _this = this;
                if (!(this._show === e)) {
                    this._show = tools.isEmpty(e) ? false : e;
                    if (this._show) {
                        // this.addBackground();
                        this.wrapper.style.display = 'block';
                        if (this.animated) {
                            this.wrapper.classList.remove('to-lucency');
                            this.wrapper.classList.add('to-opacity');
                        }
                        else {
                            this.wrapper.style.opacity = '1';
                        }
                    }
                    else {
                        // this.removeBackground();
                        if (this.animated) {
                            this.wrapper.classList.remove('to-opacity');
                            this.wrapper.classList.add('to-lucency');
                            var timer_1 = setTimeout(function () {
                                _this.wrapper.style.display = 'none';
                                clearTimeout(timer_1);
                            }, 300);
                        }
                        else {
                            this.wrapper.style.opacity = '0';
                            this.wrapper.style.display = 'none';
                        }
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Popover.prototype, "position", {
            get: function () {
                return this._position;
            },
            set: function (position) {
                this._position = tools.isEmpty(position) ? 'auto' : position;
                this.calcPosition();
            },
            enumerable: true,
            configurable: true
        });
        // protected triangle = (() => {
        //     let el ;
        //
        //     let setPos = (x, y) => {};
        //
        //     return {setPos};
        //
        // })();
        //
        // protected getTpl(){
        //
        // }
        //销毁popover
        Popover.prototype.destroy = function () {
            _super.prototype.destroy.call(this);
            this.events.off();
            this._popoverItems.forEach(function (item) {
                if (!tools.isEmpty(item)) {
                    item.destroy();
                }
            });
        };
        Popover.popView = null;
        return Popover;
    }(Component));
    exports.Popover = Popover;
    //生成popover每项item的类
    var PopoverItem = /** @class */ (function (_super) {
        __extends(PopoverItem, _super);
        function PopoverItem(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            _this._onClick = null;
            _this._show = true;
            _this.wrapper.dataset.index = _this.para.index;
            _this.init();
            _this.show = para.show;
            return _this;
        }
        PopoverItem.prototype.wrapperInit = function () {
            return d.create("<li class=\"popover-item\"></li>", 'ul');
        };
        PopoverItem.prototype.init = function () {
            var _this = this;
            var para = this.para;
            // this.container = para.container;
            // this.container.appendChild(this.wrapper);
            this.title = para.title;
            this.name = para.name;
            this.icon = para.icon;
            this.disabled = para.disabled;
            this.onClick = para.onClick;
            d.on(this.wrapper, 'click', function (e) {
                typeof _this.onClick === 'function' && _this.onClick(e);
            });
        };
        Object.defineProperty(PopoverItem.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (e) {
                this._title = e;
                this.wrapper.innerHTML = this._title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverItem.prototype, "onClick", {
            get: function () {
                return this._onClick;
            },
            set: function (e) {
                this._onClick = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverItem.prototype, "icon", {
            get: function () {
                return this._icon;
            },
            set: function (e) {
                if (tools.isEmpty(this.icon) && !tools.isEmpty(e)) {
                    var icon = d.create('<span class="popover-icon ' + e + '"></span>');
                    d.prepend(this.wrapper, icon);
                }
                else if (!tools.isEmpty(e)) {
                    var icon = d.create('<span class="popover-icon ' + e + '"></span>');
                    d.replace(icon, this.wrapper.firstElementChild);
                }
                this._icon = e;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverItem.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (e) {
                this._disabled = tools.isEmpty(e) ? false : e;
                if (this._disabled) {
                    this.wrapper.classList.add('disabled');
                }
                else {
                    this.wrapper.classList.remove('disabled');
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PopoverItem.prototype, "show", {
            get: function () {
                return this._show;
            },
            set: function (isShow) {
                if (tools.isNotEmpty(isShow)) {
                    this._show = isShow;
                    this.wrapper.classList.toggle('hide', !isShow);
                }
            },
            enumerable: true,
            configurable: true
        });
        return PopoverItem;
    }(Component));
});

/// <amd-module name="SlideTab"/>
define("SlideTab", ["require", "exports", "Tab", "DataManager"], function (require, exports, tab_1, DataManager_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var SlideTab = /** @class */ (function (_super) {
        __extends(SlideTab, _super);
        function SlideTab(para) {
            var _this = _super.call(this, para) || this;
            _this.slideEvent = (function () {
                var translate = 0, moveHandler = null, endHandler = null;
                var startHandler = function (e) {
                    translate = -_this.current * _this.width;
                    _this.panelContainer.style.removeProperty('transition');
                    var panel = d.closest(e.target, '.tab-pane'), disX = e.changedTouches[0].clientX, disY = e.changedTouches[0].clientY, direction, scale = 1, isFirst = true;
                    // console.log(panel);
                    d.on(_this.panelContainer, 'touchmove', moveHandler = function (e) {
                        var currentX = e.changedTouches[0].clientX, currentY = e.changedTouches[0].clientY;
                        if (isFirst) {
                            isFirst = false;
                            var angle = Math.atan2(disY - currentY, disX - currentX) / Math.PI * 180;
                            direction = getDirection(angle);
                        }
                        if (panel.scrollTop === 0 && direction !== 'down') {
                            e.preventDefault();
                        }
                        if (direction === 'left' || direction === 'right') {
                            panel && (panel.style.overflow = 'hidden');
                            var deltaX = currentX - disX;
                            disX = currentX;
                            if ((_this.current === 0 && e.direction === 'right')
                                || (_this.current === _this.len - 1 && e.direction === 'left')) {
                                scale *= .96;
                                deltaX *= scale;
                            }
                            else {
                                deltaX = deltaX * 1.15;
                            }
                            translate += deltaX;
                            // this.panelContainer.style.transform = 'translateX(' + translate + 'px)';
                            _this.change(translate);
                        }
                    });
                    d.on(document, 'touchend', endHandler = function () {
                        _this.current = Math.round(-translate / _this.width);
                        d.off(document, 'touchend', endHandler);
                        d.off(_this.panelContainer, 'touchmove', moveHandler);
                        panel && (panel.style.overflow = 'auto');
                    });
                };
                var getDirection = function (angle) {
                    if (angle <= 45 && angle > -45) {
                        return 'right';
                    }
                    else if (angle <= 135 && angle > 45) {
                        return 'down';
                    }
                    else if (angle <= -45 && angle > -135) {
                        return 'up';
                    }
                    else if (angle > 135 || angle <= -135) {
                        return 'left';
                    }
                    else {
                        return null;
                    }
                };
                return {
                    on: function () {
                        d.on(_this.panelContainer, 'touchstart', startHandler);
                        // d.on(this.panelContainer, 'panleft panright panstart panend', handler = (e: any) => {
                        //     // e.srcEvent.preventDefault && e.srcEvent.preventDefault();
                        //     if(e.isFirst){
                        //         translate = -this.current * this.width;
                        //         this.panelContainer.style.removeProperty('transition');
                        //         scale = 1;
                        //     }
                        //     let deltaX = e.deltaX * 1.15;
                        //
                        //     if((this.current === 0 && e.direction === 'right')
                        //         || (this.current === this.len - 1 && e.direction === 'left')){
                        //         scale *= .96;
                        //         deltaX *= scale;
                        //     }
                        //     translate += deltaX;
                        //     // this.panelContainer.style.transform = 'translateX(' + translate + 'px)';
                        //     this.change(translate);
                        //     if(e.isFinal){
                        //         this.current = Math.round(-translate / this.width);
                        //     }
                        // });
                    },
                    off: function () {
                        // d.off(this.panelContainer, 'panleft panright panstart panend', handler);
                        d.off(_this.panelContainer, 'touchstart', startHandler);
                    }
                };
            })();
            _this._current = 0;
            _this.panelContainer.classList.add('slide-tab-wrapper');
            _this.width = _this.panelContainer.offsetWidth;
            _this.slideEvent.on();
            return _this;
        }
        SlideTab.prototype.change = function (translate) {
            this.panelContainer.style.webkitTransform = 'translateX(' + translate + 'px)';
            this.panelContainer.style.transform = 'translateX(' + translate + 'px)';
        };
        Object.defineProperty(SlideTab.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (index) {
                index = Math.max(0, index);
                index = Math.min(this.len - 1, index);
                this._current = index;
                this.selected(index);
            },
            enumerable: true,
            configurable: true
        });
        SlideTab.prototype.refreshData = function (index) {
            var dataManager = this.dataManagers[index], num = this.temDataManagers.indexOf(dataManager);
            if (num > -1) {
                dataManager.refresh();
                this.temDataManagers.splice(num, 1);
            }
        };
        SlideTab.prototype.selected = function (index) {
            var translate = -index * this.width;
            this.panelContainer.style.transition = 'all 500ms';
            // this.panelContainer.style.transform = 'translateX(' + translate + 'px)';
            this.change(translate);
            _super.prototype.active.call(this, index);
            this.refreshData(index);
        };
        SlideTab.prototype.active = function (index) {
            _super.prototype.active.call(this, index);
            var translate = -index * this.width;
            this._current = index;
            this.panelContainer.style.removeProperty('transition');
            this.change(translate);
            this.refreshData(index);
        };
        SlideTab.prototype.addTab = function (tabs) {
            var _this = this;
            _super.prototype.addTab.call(this, tabs);
            Array.isArray(tabs) && tabs.forEach(function (tab) {
                _this.initDataManager(tab);
            });
        };
        SlideTab.prototype.deleteTab = function (index) {
            if (index in this.dataManagers) {
                this.dataManagers.splice(index, 1);
                // console.log(this.para.tabs[index]);
                _super.prototype.deleteTab.call(this, index);
            }
        };
        SlideTab.prototype.initDataManager = function (tab) {
            if (!Array.isArray(this.dataManagers)) {
                this.dataManagers = [];
            }
            if (!Array.isArray(this.temDataManagers)) {
                this.temDataManagers = [];
            }
            if (tab.dataManager) {
                var len = this.dataManagers.length, page_1 = tab.dataManager, dataManager_1 = new DataManager_1.DataManager({
                    page: {
                        size: page_1.pageSize || 50,
                        container: d.query("div.tab-pane[data-index=\"" + len + "\"]", this.panelContainer),
                        isPulldownRefresh: page_1.isPulldownRefresh || false,
                    },
                    render: function (start, length, isRefresh) {
                        typeof page_1.render === 'function' && page_1.render(start, length, dataManager_1.data, isRefresh);
                    },
                    ajax: {
                        fun: page_1.ajaxFun,
                        ajaxData: page_1.ajaxData
                    }
                });
                this.dataManagers.push(dataManager_1);
                this.temDataManagers.push(dataManager_1);
            }
            else {
                this.dataManagers.push(null);
            }
        };
        return SlideTab;
    }(tab_1.Tab));
    exports.SlideTab = SlideTab;
});

define("Progress", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Progress"/>
    var d = G.d;
    var Progress = /** @class */ (function () {
        function Progress(para) {
            this.init(para);
        }
        Progress.prototype.init = function (para) {
            this.dom = this.initTpl();
            para.container.appendChild(this.dom);
            this.bgDom = d.query('.progress-bg', this.dom);
            this.textDom = d.query('.progress-text', this.dom);
            //进度条线宽，默认10px
            if (para.strokeWidth) {
                this.bgDom.style.height = para.strokeWidth + 'px';
            }
            //进度条宽度，默认100%
            if (para.width) {
                this.dom.style.width = para.width + 'px';
            }
            //初始进度条百分比，默认0
            if (para.percent) {
                this.format(para.percent);
            }
            //是否显示进度数值或状态图标,默认显示
            if (para.showInfo === false) {
                this.textDom.classList.add('hide');
            }
        };
        Progress.prototype.format = function (width, isError) {
            if (isError === void 0) { isError = false; }
            this.bgDom.style.width = width + '%';
            this.textDom.innerHTML = width + '%';
            if (width === 100) {
                this.dom.classList.add('progress-status-success');
                this.textDom.innerHTML = '<span class="iconfont icon-check-circle"></span>';
            }
            else {
                this.dom.classList.remove('progress-status-success');
            }
            if (isError) {
                this.textDom.innerHTML = '<span class="iconfont icon-cross-circle"></span>';
                this.dom.classList.add('progress-status-error');
            }
            else {
                this.dom.classList.remove('progress-status-error');
            }
        };
        Progress.prototype.initTpl = function () {
            return d.create("<div class=\"bw-progress\"><div class=\"progress-outer\">\n            <div class=\"progress-inner\">\n                <div class=\"progress-bg\">\n                \n                </div>\n            </div>\n        </div>\n        <span class=\"progress-text\">0%</span>\n        </div>");
        };
        return Progress;
    }());
    exports.Progress = Progress;
});

///<amd-module name="RingProgress"/>
define("RingProgress", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tools = G.tools;
    var d = G.d;
    var Component = G.Component;
    var RingProgress = /** @class */ (function (_super) {
        __extends(RingProgress, _super);
        function RingProgress(para) {
            var _this = _super.call(this, para) || this;
            _this.timer = null;
            _this.drawRingProgress = function () {
                _this.ctx.clearRect(0, 0, _this.wrapper.width, _this.wrapper.height);
                // 绘制的顺序是外圆==>环==>內圆==>文本（在globalCompositeOperation=source-over的情况下）
                // 绘制外圆
                _this.ctx.beginPath();
                _this.ctx.arc(_this.radius, _this.radius, _this.radius, 0, Math.PI * 2, false);
                _this.ctx.fillStyle = _this.color.out;
                _this.ctx.closePath();
                _this.ctx.fill();
                // 绘制环（实际是扇形，需要內圆遮盖为环形）
                _this.ctx.beginPath();
                _this.ctx.fillStyle = _this.color.ring;
                _this.ctx.moveTo(_this.radius, _this.radius);
                _this.ctx.arc(_this.radius, _this.radius, _this.radius, Math.PI / 2, Math.PI / 2 + _this.percent / 100 * 2 * Math.PI, false);
                _this.ctx.closePath();
                _this.ctx.fill();
                // 绘制內圆
                _this.ctx.beginPath();
                _this.ctx.arc(_this.radius, _this.radius, _this.radius - _this.ringWidth, 0, Math.PI * 2, false);
                _this.ctx.fillStyle = _this.color.inner;
                _this.ctx.closePath();
                _this.ctx.fill();
                // 显示文本
                var text = _this.percent + "%", top = parseInt(_this.ctx.font) / 2;
                _this.showInfo && (tools.isNotEmpty(_this.font) && (_this.ctx.font = _this.font.style + " " + _this.font.variant + " " + _this.font.weight + " " + _this.font.size + "px " + _this.font.family,
                    top = _this.font.size / 2),
                    _this.ctx.fillStyle = _this.color.font,
                    _this.ctx.fillText(text, _this.radius - _this.ctx.measureText(text).width / 2, _this.radius + top));
                if (_this.isEnd) {
                    clearInterval(_this.timer);
                }
                _this.percent += _this.step;
            };
            _this.reset = function () {
                _this.percent = 0;
                clearInterval(_this.timer);
                _this.timer = setInterval(_this.drawRingProgress, _this.interval);
            };
            _this.clickHandler = function () {
                if (_this.isRun && _this.timer) {
                    clearInterval(_this.timer);
                    _this.isRun = false;
                }
                else {
                    _this.timer = setInterval(_this.drawRingProgress, _this.interval);
                    _this.isRun = true;
                }
            };
            _this.dblclickHandler = function () {
                _this.reset();
            };
            _this._percent = 0;
            _this._showInfo = true;
            _this._isEnd = false;
            _this._isRun = false;
            _this.paraValidator(para);
            _this.initCanvas();
            _this.drawRingProgress();
            _this.isRun = true;
            !_this.isEnd && (_this.timer = setInterval(_this.drawRingProgress, _this.interval));
            d.on(_this.wrapper, 'click', _this.clickHandler);
            d.on(_this.wrapper, 'dblclick', _this.dblclickHandler);
            return _this;
        }
        RingProgress.prototype.wrapperInit = function () {
            return h("canvas", { id: "ringProgress-" + tools.getGuid(), className: "ring-progress" });
        };
        RingProgress.prototype.paraValidator = function (para) {
            // 设置各参数的默认值
            this.percent = para.percent;
            this.showInfo = para.showInfo;
            this.x = para.position.x;
            this.y = para.position.y;
            this.radius = para.radius;
            this.ringWidth = para.ringWidth;
            this.color = {
                ring: para.color.ring,
                out: para.color.out || getComputedStyle(this.container).backgroundColor,
                inner: para.color.inner || getComputedStyle(this.container).backgroundColor,
                font: para.color.font || 'black'
            };
            tools.isNotEmpty(para.font) && (this.font = {
                style: para.font.style || 'normal',
                variant: para.font.variant || 'normal',
                weight: para.font.weight || 'normal',
                size: para.font.size || 10,
                family: para.font.family || 'sans-serif'
            });
            this.interval = para.interval || 100;
            this.step = para.step || 1;
        };
        RingProgress.prototype.initCanvas = function () {
            // 初始化画布
            this.wrapper.style.width = this.radius * 2 + 'px';
            this.wrapper.style.height = this.radius * 2 + 'px';
            this.wrapper.style.position = 'absolute';
            this.wrapper.style.left = this.x - this.radius + 'px';
            this.wrapper.style.top = this.y - this.radius + 'px';
            this.wrapper.width = this.radius * 2;
            this.wrapper.height = this.radius * 2;
            this.ctx = this.wrapper.getContext('2d');
        };
        Object.defineProperty(RingProgress.prototype, "percent", {
            get: function () {
                return this._percent;
            },
            set: function (len) {
                this.isEnd = len > 100 ? true : false;
                this._percent = len > 100 ? 100 : len;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RingProgress.prototype, "showInfo", {
            get: function () {
                return this._showInfo;
            },
            set: function (showInfo) {
                this._showInfo = showInfo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RingProgress.prototype, "isEnd", {
            get: function () {
                return this._isEnd;
            },
            set: function (isEnd) {
                this.isRun = this.isEnd ? false : true;
                this._isEnd = isEnd;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RingProgress.prototype, "isRun", {
            get: function () {
                return this._isRun;
            },
            set: function (isRun) {
                this._isRun = isRun;
            },
            enumerable: true,
            configurable: true
        });
        RingProgress.prototype.destroy = function () {
            //销毁
            _super.prototype.destroy.call(this);
        };
        return RingProgress;
    }(Component));
    exports.RingProgress = RingProgress;
});

/// <amd-module name="Picker"/>
define("Picker", ["require", "exports", "ContainCom", "Mask", "Button"], function (require, exports, ContainCom_1, mask_1, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    var PickerList = /** @class */ (function (_super) {
        __extends(PickerList, _super);
        function PickerList(para) {
            var _this = _super.call(this, para) || this;
            _this.pickers = {};
            _this.event = (function () {
                var handler;
                return {
                    on: function () { return d.on(_this.wrapper, 'touchmove', handler = function (ev) { return ev.preventDefault(); }); },
                    off: function () { return d.off(_this.wrapper, 'touchmove', handler); }
                };
            })();
            PickerList.PICKER_LISTS.push(_this);
            _this.init(para);
            _this.event.on();
            para.className && _this.wrapper.classList.add(para.className);
            return _this;
        }
        PickerList.prototype.wrapperInit = function () {
            return h("div", { className: "picker-list-wrapper" },
                h("div", { className: "picker-list-header" }),
                this._body = h("div", { className: "picker-list-body" }));
        };
        PickerList.prototype.init = function (para) {
            var _this = this;
            this.onSet = para.onSet;
            this.onChange = para.onChange;
            this.isOnceDestroy = tools.isEmpty(para.isOnceDestroy) ? true : para.isOnceDestroy;
            this.isBackground = tools.isEmpty(para.isBackground) ? true : para.isBackground;
            this.header = d.query('.picker-list-header', this.wrapper);
            this.initHeader();
            var length = this.childs.filter(function (child) { return child instanceof Picker; }).length;
            if (length > 0) {
                var width_1 = 100 / length;
                this.childs.forEach(function (child, index) {
                    if (child instanceof Picker) {
                        _this.pickers[child.name] = child;
                        child.wrapper.style.width = width_1 + '%';
                        child.on(Picker.EVT_PICK_CHANGE, function (val) {
                            _this.isWatchMsg && _this.changeMsg();
                            _this.onChange && _this.onChange({
                                currentIndex: index,
                                currentData: val,
                            });
                        });
                    }
                });
            }
            this.isWatchMsg = para.isWatchMsg;
            var isShow = tools.isEmpty(para.isShow) ? true : para.isShow;
            isShow && setTimeout(function () { return _this.show(); }, 100);
        };
        PickerList.prototype.changeMsg = function () {
            if (this.msgEl) {
                var str_1 = '';
                this.childs.forEach(function (child) {
                    if (child instanceof Picker) {
                        var value = child.value;
                        value = typeof value === 'object' ? value.text : value;
                        str_1 += value + child.title + ' ';
                    }
                });
                this.msgEl.innerText = str_1;
            }
        };
        PickerList.prototype.initHeader = function () {
            var _this = this;
            new Button_1.Button({
                container: this.header,
                content: '取消',
                onClick: function () {
                    _this.hide();
                }
            });
            new Button_1.Button({
                container: this.header,
                content: '完成',
                type: 'primary',
                // className: 'pull-right',
                onClick: function () {
                    var values = [], objOfValue = {};
                    _this.childs.forEach(function (picker, index) {
                        if (picker instanceof Picker) {
                            values[index] = picker.value;
                            objOfValue[picker.name] = picker.value;
                        }
                    });
                    _this.onSet && _this.onSet(values, objOfValue);
                    _this.hide();
                }
            });
        };
        Object.defineProperty(PickerList.prototype, "isWatchMsg", {
            get: function () {
                return this._isWatchMsg;
            },
            set: function (isWatchMsg) {
                this._isWatchMsg = isWatchMsg || false;
                if (this._isWatchMsg) {
                    this.msgEl = h("div", { className: "picker-list-msg" });
                    this.changeMsg();
                    d.after(this.header, this.msgEl);
                }
                else {
                    this.msgEl && d.remove(this.msgEl);
                    this.msgEl = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PickerList.prototype, "isBackground", {
            get: function () {
                return this._isBackground;
            },
            set: function (isBackground) {
                var _this = this;
                if (this._isBackground !== isBackground) {
                    this._isBackground = isBackground;
                    this.mask = mask_1.Mask.getInstance();
                    this.mask.background = isBackground;
                    this.mask.addClick(this, function () {
                        _this.hide();
                    });
                }
            },
            enumerable: true,
            configurable: true
        });
        PickerList.prototype.show = function () {
            var _this = this;
            PickerList.PICKER_LISTS.forEach(function (pickList) { return pickList !== _this && pickList.hide(); });
            this.mask && (this.mask.wrapper.style.zIndex = '1005');
            this.mask && this.mask.show(this);
            this.wrapper.classList.add(PickerList.PICKER_LIST_ACTIVE);
        };
        PickerList.prototype.hide = function (isDestroy) {
            var _this = this;
            if (isDestroy === void 0) { isDestroy = false; }
            this.mask && this.mask.hide();
            this.mask && this.mask.wrapper.style.removeProperty('z-index');
            this.wrapper.classList.remove(PickerList.PICKER_LIST_ACTIVE);
            (this.isOnceDestroy || isDestroy) && setTimeout(function () {
                _this.destroy();
            }, 350);
        };
        Object.defineProperty(PickerList.prototype, "onSet", {
            get: function () {
                return this._onSet;
            },
            set: function (handler) {
                this._onSet = handler;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PickerList.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (handler) {
                if (typeof handler === 'function') {
                    this._onChange = tools.pattern.debounce(handler, 200);
                }
            },
            enumerable: true,
            configurable: true
        });
        PickerList.prototype.destroy = function () {
            var index = PickerList.PICKER_LISTS.indexOf(this);
            index > -1 && PickerList.PICKER_LISTS.splice(index, 1);
            this.childs.forEach(function (child) {
                if (child instanceof Picker) {
                    child.destroy();
                }
            });
            this.event.off();
            _super.prototype.destroy.call(this);
        };
        PickerList.PICKER_LIST_ACTIVE = 'picker-active';
        PickerList.BODY_DTPICKER = 'dtpicker-active-for-page';
        PickerList.PICKER_LISTS = [];
        return PickerList;
    }(ContainCom_1.ContainCom));
    exports.PickerList = PickerList;
    var Picker = /** @class */ (function (_super) {
        __extends(Picker, _super);
        function Picker(para) {
            var _this = _super.call(this, para) || this;
            // picker中的可选数据
            _this._optionData = [];
            // 可选项的dom 数组
            _this._options = [];
            // 设置标题名称
            _this._title = '';
            _this.selects = [];
            _this.multiEvent = (function () {
                var handler = function () {
                    var selectedEl = _this.options[_this.current], index = parseInt(selectedEl.dataset['index']), isSelected = selectedEl.classList.contains(Picker.PICK_MULTI_SELECTED);
                    if (isSelected) {
                        _this.selects.splice(_this.selects.indexOf(index), 1);
                    }
                    else {
                        _this.selects.push(index);
                    }
                    selectedEl.classList.toggle(Picker.PICK_MULTI_SELECTED, !isSelected);
                    _this.onSet && _this.onSet(_this.value);
                };
                return {
                    on: function () { return d.on(d.query('.pick-selected', _this.pickBody), 'click', handler); },
                    off: function () { return d.off(d.query('.pick-selected', _this.pickBody), 'click'); },
                };
            })();
            _this.oldCurrent = -1;
            // 当前选中的位置
            _this._current = -1;
            // 动画管理
            _this.animator = (function () {
                return {
                    change: function (angle) {
                        angle = Math.max(-30, angle);
                        angle = Math.min(_this._options.length * 20 + 10, angle);
                        _this.listWrapper.style.webkitTransform = 'perspective(1000px) rotateY(0) rotateX(' + (angle) + 'deg) translateZ(0)';
                        _this.listWrapper.style.transform = 'perspective(1000px) rotateY(0) rotateX(' + (angle) + 'deg) translateZ(0)';
                    },
                    ending: function (change) {
                        var time = 100, length = _this.options.length, position = Math.round(change / 20);
                        if (change < 0 || change > (length - 1) * 20) {
                            time = 150;
                        }
                        position = Math.max(0, position);
                        position = Math.min(length - 1, position);
                        _this.listWrapper.style.webkitTransition = time + 'ms ease-out';
                        _this.listWrapper.style.transition = time + 'ms ease-out';
                        _this.current = position;
                    }
                };
            })();
            // 事件管理
            _this.event = (function () {
                var begin = 0;
                var handler = function (ev) {
                    begin = -_this._current * 20;
                    _this.oldCurrent = _this.current;
                    _this.listWrapper.style.removeProperty('transition');
                    _this.listWrapper.style.removeProperty('-webkit-transition');
                    var disY = ev.targetTouches[0].clientY;
                    var moveHandler, endHandler;
                    d.on(_this.pickBody, 'touchmove', moveHandler = function (ev) {
                        var deltaY = ev.changedTouches[0].clientY - disY;
                        disY = ev.changedTouches[0].clientY;
                        begin += deltaY;
                        _this.changePickItem(Math.round(-begin / 20));
                        _this.animator.change(-begin);
                        return false;
                    });
                    d.on(_this.pickBody, 'touchend', endHandler = function () {
                        _this.animator.ending(-begin);
                        begin = -_this._current * 20;
                        d.off(_this.pickBody, 'touchmove', moveHandler);
                        d.off(_this.pickBody, 'touchend', endHandler);
                    });
                };
                return {
                    on: function () {
                        d.on(_this.pickBody, 'touchstart', handler);
                    },
                    off: function () {
                        d.off(_this.pickBody, 'touchstart', handler);
                    }
                };
            })();
            // 初始化属性
            _this.listWrapper = h("ul", { className: "picker-list pick-rule" });
            _this._name = para.name || tools.getGuid();
            _this.onChange = para.onChange;
            _this.onSet = para.onSet;
            _this.title = para.title;
            _this.optionData = para.optionData;
            _this.pickBody = h("div", { className: "pick-body" },
                h("div", { className: "pick-selected pick-rule" }),
                _this.listWrapper);
            d.append(_this.wrapper, _this.pickBody);
            _this.isMulti = para.isMulti;
            // 添加class样式
            if (tools.isNotEmpty(para.className)) {
                var classList = para.className.split(/\s+/);
                classList.forEach(function (className) {
                    _this.wrapper.classList.add(className);
                });
            }
            var platform = navigator.platform.toLowerCase();
            var userAgent = navigator.userAgent.toLowerCase();
            var isIos = (userAgent.indexOf('iphone') > -1 ||
                userAgent.indexOf('ipad') > -1 ||
                userAgent.indexOf('ipod') > -1) &&
                (platform.indexOf('iphone') > -1 ||
                    platform.indexOf('ipad') > -1 ||
                    platform.indexOf('ipod') > -1);
            if (isIos) {
                _this.listWrapper.style.webkitTransformOrigin = 'center center 89.5px';
                _this.listWrapper.style.transformOrigin = 'center center 89.5px';
            }
            // 定位到指定位置
            _this.current = typeof para.default === 'number' ? para.default : 0;
            if (_this.isMulti) {
                _this.options[_this.current].classList.add(Picker.PICK_MULTI_SELECTED);
            }
            // 开启事件
            _this.event.on();
            return _this;
        }
        Picker.prototype.wrapperInit = function () {
            return h("div", { className: "picker-wrapper" });
        };
        Object.defineProperty(Picker.prototype, "name", {
            get: function () {
                return this._name;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "optionData", {
            get: function () {
                return this._optionData.slice();
            },
            set: function (optionData) {
                if (optionData !== this._optionData) {
                    this._optionData = optionData;
                    this.initOption(optionData);
                    this.current = this.current === -1 ? 0 : this.current;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "options", {
            get: function () {
                return this._options.slice();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                title = tools.str.removeHtmlTags(title);
                this._title = title || '';
                if (title) {
                    this.titleWrapper = h("div", { className: "picker-title" });
                    this.titleWrapper.innerText = title || '';
                    d.prepend(this.wrapper, this.titleWrapper);
                }
                else {
                    this.titleWrapper && d.remove(this.titleWrapper);
                    this.titleWrapper = null;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (onChange) {
                if (typeof onChange === 'function') {
                    this._onChange = tools.pattern.debounce(onChange, 200);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "onSet", {
            get: function () {
                return this._onSet;
            },
            set: function (onSet) {
                if (typeof onSet === 'function') {
                    this._onSet = tools.pattern.debounce(onSet, 200);
                }
            },
            enumerable: true,
            configurable: true
        });
        // 初始化可选项dom
        Picker.prototype.initOption = function (options) {
            var _this = this;
            var frag = document.createDocumentFragment(), deg = 20;
            this._options = [];
            options && options.forEach(function (itemData, index) {
                var styles = {
                    webkitTransformOrigin: 'center center -90px',
                    transformOrigin: 'center center -90px',
                    webkitTransform: 'translateZ(90px) rotateX(' + -index * deg + 'deg)',
                    transform: 'translateZ(90px) rotateX(' + -index * deg + 'deg)',
                };
                var li = h("li", { className: "picker-item", "data-index": index, style: styles }, (typeof itemData === 'string' || typeof itemData === 'number') ? itemData : itemData.text);
                _this._options.push(li);
                d.append(frag, li);
            });
            this.listWrapper.innerHTML = '';
            d.append(this.listWrapper, frag);
        };
        Object.defineProperty(Picker.prototype, "isMulti", {
            get: function () {
                return this._isMulti;
            },
            set: function (isMulti) {
                this._isMulti = tools.isEmpty(isMulti) ? false : isMulti;
                if (this._isMulti) {
                    this.multiEvent.on();
                }
                else {
                    this.multiEvent.off();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Picker.prototype, "current", {
            get: function () {
                return this._current;
            },
            set: function (current) {
                if (typeof current === 'number') {
                    this.changePickItem(current);
                    this.animator.change(current * 20);
                }
            },
            enumerable: true,
            configurable: true
        });
        Picker.prototype.setCurrentByValue = function (value) {
            for (var i = 0, len = this.optionData.length; i < len; i++) {
                var itemData = this.optionData[i];
                var val = (typeof itemData === 'string' || typeof itemData === 'number') ? itemData : itemData.value;
                if (value === val) {
                    this.current = i;
                    break;
                }
            }
        };
        Object.defineProperty(Picker.prototype, "value", {
            // 获取选中的值
            get: function () {
                var _this = this;
                var result;
                if (Array.isArray(this._optionData)) {
                    if (this.isMulti) {
                        result = [];
                        this.selects.forEach(function (index) {
                            if (index in _this._optionData) {
                                var data = _this._optionData[index];
                                result.push(data);
                            }
                        });
                    }
                    else {
                        if (this._current in this._optionData) {
                            result = this._optionData[this._current];
                        }
                    }
                }
                return result || '';
            },
            enumerable: true,
            configurable: true
        });
        // current改变时，可视区范围进行改变
        Picker.prototype.changePickItem = function (change) {
            var _this = this;
            var step = 5, length = this._options.length, current = this._current;
            change = Math.max(0, change);
            change = Math.min(this._options.length - 1, change);
            for (var i = 0; i < length; i++) {
                this._options[i].classList.remove('visible');
            }
            this.options[current] && this.options[current].classList.remove(Picker.PICK_SELECTED);
            this.options[change] && this.options[change].classList.add(Picker.PICK_SELECTED);
            this._current = change;
            var start = Math.max(0, change - step), end = Math.min(length, change + step);
            for (var i = start; i < end; i++) {
                this._options[i].classList.add('visible');
            }
            // 触发事件
            if (this.oldCurrent !== this.current) {
                !this.isMulti && this.onSet && this.onSet(this.value);
                this.onChange && this.onChange(this.value);
                var events = this.eventHandlers[Picker.EVT_PICK_CHANGE];
                tools.isNotEmpty(events) && events.forEach(function (handler) {
                    handler(_this.value, _this);
                });
            }
        };
        Picker.prototype.destroy = function () {
            this.event.off();
            this.listWrapper = null;
            this.titleWrapper = null;
            this.pickBody = null;
            _super.prototype.destroy.call(this);
        };
        // 选中值发生改变是触发的事件
        Picker.EVT_PICK_CHANGE = 'EVENT_PICKER_ITEM_SELECTED';
        // 选中样式
        Picker.PICK_SELECTED = 'picker-selected';
        Picker.PICK_MULTI_SELECTED = 'picker-multi-selected';
        return Picker;
    }(Component));
    exports.Picker = Picker;
});

define("Spinner", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Spinner"/>
    var d = G.d;
    var Spinner = /** @class */ (function () {
        function Spinner(para) {
            this.para = para;
            this.spinnerDom = null;
            this.visible = false;
            this.methods = (function (self) {
                var arr = [], showType = Spinner.SHOW_TYPE;
                /**
                 * 附加方法
                 */
                arr[showType.append] = (function () {
                    return {
                        show: function () {
                            d.after(self.para.el, self.spinnerDom);
                            // self.para.el.parentNode.insertBefore(self.spinnerDom, self.para.el.nextSibling)
                        },
                        hide: function () {
                            d.remove(self.spinnerDom);
                        }
                    };
                }());
                /**
                 * 替换方法
                 */
                arr[showType.replace] = (function () {
                    var tmpDom = null;
                    return {
                        show: function () {
                            tmpDom = self.para.el.cloneNode();
                            tmpDom.innerHTML = '';
                            tmpDom.appendChild(self.spinnerDom);
                            d.replace(tmpDom, self.para.el);
                        },
                        hide: function () {
                            if (tmpDom) {
                                d.replace(self.para.el, tmpDom);
                                tmpDom = null;
                            }
                        }
                    };
                }());
                /**
                 * 覆盖方法
                 */
                arr[showType.cover] = (function () {
                    return {
                        show: function () {
                            var parent = self.para.el.parentNode, position = parent.style.position;
                            if (position !== 'relative | absolute | fixed') {
                                position = 'relative';
                            }
                            var spinnerDomStyle = self.spinnerDom.style, elDom = self.para.el;
                            self.spinnerDom.classList.add('spinner-cover');
                            spinnerDomStyle.width = elDom.offsetWidth + 'px';
                            spinnerDomStyle.height = elDom.offsetHeight + 'px';
                            spinnerDomStyle.left = elDom.offsetLeft + 'px';
                            spinnerDomStyle.top = elDom.offsetTop + 'px';
                            spinnerDomStyle.zIndex = '1005';
                            parent.insertBefore(self.spinnerDom, self.para.el.nextSibling);
                        },
                        hide: function () {
                            if (self.spinnerDom.parentNode) {
                                d.remove(self.spinnerDom);
                            }
                        }
                    };
                }());
                return arr;
            }(this));
            this.initSpinner();
        }
        Spinner.prototype.initSpinner = function () {
            var para = this.para;
            if (this.spinnerDom) {
                d.remove(this.spinnerDom);
            }
            this.spinnerDom = createSpinner(para.className);
            function createSpinner(className) {
                var style = para.size ? " style=\"width: " + para.size + "px;height: " + para.size + "px\"" : '';
                className = className ? " class=\"" + className + "\"" : '';
                return d.create("<div" + className + " style=\"text-align: center\"><span class=\"spinner\"" + style + "></span></div>");
            }
        };
        // public setPara(){
        //
        // }
        Spinner.prototype.show = function () {
            var method = this.methods[this.para.type];
            if (method) {
                method.show();
                this.visible = true;
            }
        };
        Spinner.prototype.hide = function () {
            var method = this.methods[this.para.type];
            if (method) {
                method.hide();
                this.visible = false;
            }
        };
        Spinner.prototype.isVisible = function () {
            return this.visible;
        };
        /**
         * 0 : 附加
         * 1 : 替换
         * 2 : 覆盖
         */
        Spinner.SHOW_TYPE = {
            append: 0,
            replace: 1,
            cover: 2
        };
        return Spinner;
    }());
    exports.Spinner = Spinner;
});

define("SubPage", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="SubPage"/>
    var d = G.d;
    exports.SubPage = (function () {
        var pageHtml = '<div class="sub-page">' +
            '<div class="buttons"><span data-action="toggle" style="transform: rotate(90deg);" class="mui-icon fa fa-expand"></span>' +
            '<span data-action="close" class="mui-icon ti-close mui-pull-right"></span></div>' +
            '</div>';
        var loading = document.createElement('div'), pageDom = null, contentDom = document.createElement('div'), body = document.body, isShow = false, onClose = function () { };
        contentDom.classList.add('content');
        loading.classList.add('mui-spinner', 'hide');
        function close() {
            if (isShow) {
                d.remove(pageDom, false);
                d.remove(contentDom, false);
                isShow = false;
                onClose();
            }
        }
        return {
            create: function () {
                if (pageDom === null) {
                    pageDom = G.d.create(pageHtml);
                    G.d.on(pageDom.querySelector('div.buttons'), 'click', '[data-action]', function () {
                        switch (this.dataset.action) {
                            case 'toggle':
                                if (pageDom.classList.toggle('full-page')) {
                                    this.classList.remove('fa-expand');
                                    this.classList.add('fa-compress');
                                }
                                else {
                                    this.classList.remove('fa-compress');
                                    this.classList.add('fa-expand');
                                }
                                break;
                            case 'close':
                                typeof close === 'function' && close();
                                break;
                        }
                    });
                }
                contentDom.innerHTML = '';
                contentDom.appendChild(loading);
                return contentDom;
            },
            show: function (cb) {
                cb = typeof cb !== 'function' ? function () { } : cb;
                if (!isShow) {
                    body.appendChild(pageDom);
                    isShow = true;
                    setTimeout(function () {
                        pageDom.appendChild(contentDom);
                        typeof cb === 'function' && cb();
                    }, 30);
                }
                else {
                    typeof cb === 'function' && cb();
                }
            },
            onClose: function (cb) {
                onClose = cb;
            },
            getLoading: function () {
                return loading;
            }
        };
    }());
});

// /// <amd-module name="TableLite"/>
// interface TableLitePara {
//     cols:COL[];
//     data:obj[];
//     table:HTMLElement;
// }
// export class TableLite{
//     private thead: HTMLTableSectionElement;
//     private tbody: HTMLTableSectionElement;
//     constructor(private para:TableLitePara){
//         this.thead = document.createElement('thead');
//         this.tbody = document.createElement('tbody');
//         this.initThead();
//         this.initTbody();
//     }
//     private initThead(){
//         console.log('into initThead...');
//         Array.isArray(this.para.cols) && this.para.cols.forEach((col) => {
//             let th = document.createElement('th');
//             th.innerHTML = col.title?col.title:'';
//             this.thead.appendChild(th);
//         });
//         debugger;
//         this.para.table.appendChild(this.thead);
//     }
//     private initTbody(){
//         Array.isArray(this.para.data) && this.para.data.forEach((o)=>{
//            this.row.addByData(o);
//         });
//         this.para.table.appendChild(this.tbody);
//     }
//     public row = (function (self) {
//         let addByData = function(data:any){
//             let tr = document.createElement('tr');
//             Array.isArray(self.para.cols) && self.para.cols.forEach((col) => {
//                 let td = document.createElement('td');
//                 td.innerHTML = data[col.name];
//                 tr.appendChild(td);
//             });
//             self.tbody.appendChild(tr);
//         };
//         let addByTr = function (tr:HTMLTableRowElement) {
//             console.log(tr);
//             self.tbody.appendChild(tr);
//         }
//         return {
//             addByData: addByData,
//             addByTr: addByTr
//         }
//     }(this));
// }

define("Tab", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="Tab"/>
    var tools = G.tools;
    var d = G.d;
    var Tab = /** @class */ (function () {
        function Tab(para) {
            var _this = this;
            this.para = para;
            this.activeList = [null, null];
            this.len = 0;
            this._tabIndex = false;
            /**
             * 激活某个tab
             * @param index
             */
            this.firstIndex = [];
            this.panelContainer = Tab.createPanelContainer();
            this.tabContainer = Tab.createTabContainer();
            this._onChange = para.onChange;
            // 构造tab 界面
            this.addTab(para.tabs);
            // 载入到界面
            para.tabParent && para.tabParent.appendChild(this.tabContainer);
            para.panelParent && para.panelParent.appendChild(this.panelContainer);
            // 点击事件绑定
            this.clickEvent = function (el) {
                var index = parseInt(el.dataset.index);
                _this.active(index);
                // if(typeof para.onClick === 'function'){
                //     para.onClick.call( this, index );
                // }
            };
            var self = this;
            d.on(this.tabContainer, 'click', 'li[data-index]', function () {
                self.clickEvent(this);
            });
            //默认激活第一个
            if (this.len > 0) {
                this.active(0);
            }
            this.tabIndexKey = para.tabIndexKey;
            this.tabIndex = para.tabIndex;
        }
        Object.defineProperty(Tab.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Tab.prototype, "tabIndex", {
            get: function () {
                return this._tabIndex;
            },
            set: function (tabIndex) {
                var _this = this;
                tabIndex = !!tabIndex;
                if (this._tabIndex === tabIndex) {
                    return;
                }
                this._tabIndex = tabIndex;
                var lis = d.queryAll('li[data-index]', this.tabContainer);
                lis.forEach(function (li) {
                    var keyHandle = function (e) {
                        var keyCode = e.keyCode || e.which || e.charCode;
                        if (tools.isNotEmpty(_this.tabIndexKey)) {
                            if (keyCode === _this.tabIndexKey) {
                                _this.clickEvent(li);
                            }
                        }
                        else if (keyCode === 13) {
                            _this.clickEvent(li);
                        }
                    };
                    if (tabIndex) {
                        li.tabIndex = parseInt(tools.getGuid(''));
                        d.on(li, 'keydown', keyHandle);
                    }
                    else {
                        li.removeAttribute('tabIndex');
                        d.off(li, 'keydown', keyHandle);
                    }
                });
            },
            enumerable: true,
            configurable: true
        });
        /**
         * 添加tab
         * @param tabs
         */
        Tab.prototype.addTab = function (tabs) {
            var _this = this;
            Array.isArray(tabs) && tabs.forEach(function (p) {
                d.append(_this.panelContainer, Tab.createPanel(p.dom, _this.len));
                d.append(_this.tabContainer, Tab.createTab({
                    index: _this.len,
                    title: p.titleDom ? p.titleDom : p.title
                }));
                _this.len++;
            });
        };
        Tab.prototype.deleteTab = function (index) {
            var tab = d.query("li[data-index=\"" + index + "\"]", this.tabContainer), panel = d.query("div.tab-pane[data-index=\"" + index + "\"]", this.panelContainer);
            tab && d.remove(tab);
            panel && d.remove(panel);
            this.len--;
            var curPanelChilds = this.panelContainer.children, curTabChilds = this.tabContainer.children;
            curPanelChilds && resetIndex(curPanelChilds);
            curTabChilds && resetIndex(curTabChilds);
            function resetIndex(parEl) {
                for (var i = 0, l = parEl.length; i < l; i++) {
                    var tempDom = parEl[i];
                    tempDom.dataset.index = i.toString();
                }
            }
        };
        Tab.prototype.active = function (index) {
            var tab = d.query("li[data-index=\"" + index + "\"]", this.tabContainer), panel = d.query("div.tab-pane[data-index=\"" + index + "\"]", this.panelContainer);
            var activeClass = 'active';
            this.activeList.forEach(function (a) { return d.classRemove(a, activeClass); });
            if (tab && panel) {
                d.classAdd(tab, activeClass);
                d.classAdd(panel, activeClass);
                this.activeList = [tab, panel];
                if (typeof this.para.onClick === 'function') {
                    this.para.onClick.call(this, index);
                }
            }
            if (this.firstIndex.indexOf(index) === -1) {
                typeof this.onChange === 'function' && this.onChange(index);
                this.firstIndex.push(index);
            }
        };
        Tab.prototype.getTab = function () {
            return this.tabContainer;
        };
        Tab.prototype.getPanel = function () {
            return this.panelContainer;
        };
        /**
         * 创建一个panel
         * @param dom
         * @param index
         * @return {HTMLElement}
         */
        Tab.createPanel = function (dom, index) {
            return h("div", { className: "tab-pane", "data-index": index }, dom);
        };
        Tab.createPanelContainer = function () {
            return h("div", { className: "tab-content" });
        };
        Tab.createTabContainer = function () {
            return h("ul", { className: "nav nav-tabs nav-tabs-line" });
        };
        Tab.createTab = function (obj) {
            if (typeof obj.title === 'string') {
                return h("li", { "data-index": obj.index, tabIndex: tools.getGuid('') },
                    h("a", null, obj.title));
            }
            else {
                var tempLi = h("li", { "data-index": obj.index, tabIndex: tools.getGuid('') });
                d.append(tempLi, obj.title);
                return tempLi;
            }
        };
        return Tab;
    }());
    exports.Tab = Tab;
});

define("LayoutImage", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var LayoutImage = /** @class */ (function (_super) {
        __extends(LayoutImage, _super);
        function LayoutImage(para) {
            var _this = _super.call(this, para) || this;
            _this.max = 4;
            _this._urls = [];
            _this.urls = para.urls;
            _this.size = para.size;
            return _this;
        }
        LayoutImage.prototype.wrapperInit = function (para) {
            return h("div", { className: "layout-img-wrapper" });
        };
        Object.defineProperty(LayoutImage.prototype, "urls", {
            get: function () {
                return this._urls;
            },
            set: function (urls) {
                var _this = this;
                Array.isArray(urls) && urls.forEach(function (url) {
                    _this.add(url);
                });
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LayoutImage.prototype, "size", {
            set: function (size) {
                if (size) {
                    this.wrapper.style.width = size;
                    this.wrapper.style.height = size;
                }
            },
            enumerable: true,
            configurable: true
        });
        LayoutImage.prototype.add = function (url) {
            if (this._urls.length >= this.max) {
                return;
            }
            d.append(this.wrapper, h("img", { src: url }));
            this._urls.push(url);
            this.wrapper.dataset.count = this._urls.length + '';
        };
        return LayoutImage;
    }(Component));
    exports.LayoutImage = LayoutImage;
});

/// <amd-module name="Transfer"/>
define("Transfer", ["require", "exports", "DropDown"], function (require, exports, dropdown_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var d = G.d;
    var Transfer = /** @class */ (function () {
        function Transfer(para) {
            this.para = para;
            para.container.classList.add('drop-wrapper');
            this.initTransfer();
            if (!para.dataRight) {
                para.dataRight = [];
            }
            this.addBtn();
            this.addEvent();
        }
        //初始化左右弹框
        Transfer.prototype.initTransfer = function () {
            var leftContainer = d.create("<div></div>"), rightContainer = d.create("<div></div>");
            this.para.container.appendChild(leftContainer);
            this.para.container.appendChild(rightContainer);
            var self = this;
            self.dropLeft = new dropdown_1.DropDown({
                el: leftContainer,
                data: this.para.dataLeft,
                onSelect: function (data, index) {
                    self.dropRight.dataAdd([data]);
                    self.dropLeft.dataDel(index);
                },
                inline: true
            });
            self.dropRight = new dropdown_1.DropDown({
                el: rightContainer,
                data: this.para.dataRight,
                onSelect: function (data, index) {
                    self.dropLeft.dataAdd([data]);
                    self.dropRight.dataDel(index);
                },
                inline: true
            });
        };
        //添加左右移动按钮
        Transfer.prototype.addBtn = function () {
            if (this.para.isToRight) {
                this.toRightBtn = d.create("<button class = 'btn-toright'></button>");
                this.para.container.appendChild(this.toRightBtn);
            }
            if (this.para.isToLeft) {
                this.toLeftBtn = d.create("<button class = 'btn-toleft'></button>");
                this.para.container.appendChild(this.toLeftBtn);
            }
        };
        Transfer.prototype.addEvent = function () {
            var _this = this;
            if (this.toLeftBtn) {
                d.on(this.toLeftBtn, 'click', function () {
                    _this.switchAll(_this.dropRight, _this.dropLeft);
                });
            }
            if (this.toRightBtn) {
                d.on(this.toRightBtn, 'click', function () {
                    _this.switchAll(_this.dropLeft, _this.dropRight);
                });
            }
        };
        //将源dropDown里的所有项转移到目标dropDown中
        Transfer.prototype.switchAll = function (src, target) {
            var data = src.getData();
            target.dataAdd(data);
            src.dataDelAll();
        };
        Transfer.prototype.getData = function (type) {
            if (type === 'left') {
                return this.dropLeft.getData();
            }
            if (type === 'right') {
                return this.dropRight.getData();
            }
        };
        return Transfer;
    }());
    exports.Transfer = Transfer;
});

define("Tooltip", ["require", "exports"], function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Tooltip = /** @class */ (function () {
        function Tooltip(para) {
            this.userPara = null;
            this.userPara = Object.assign({}, Tooltip.defaultPara, para);
            this.userPara.el.classList.add('tooltipiconfont');
            for (var key in this.userPara) {
                if (this.userPara.hasOwnProperty(key)) {
                    if (key != 'el' && key != 'offset') {
                        this.userPara.el.setAttribute(key != 'errorMsg' ? 'data-balloon-' + key : 'data-balloon', key != 'visible' ? this.userPara[key] : "");
                    }
                }
            }
            !this.userPara.visible && this.userPara.el.removeAttribute("data-balloon-visible");
        }
        Tooltip.prototype.show = function () {
        };
        ;
        Tooltip.prototype.hide = function () {
            for (var key in this.userPara) {
                if (this.userPara.hasOwnProperty(key)) {
                    if (key != 'el' && key != 'offset') {
                        this.userPara.el.removeAttribute(key != 'errorMsg' ? 'data-balloon-' + key : 'data-balloon');
                    }
                }
            }
            this.userPara.visible && this.userPara.el.removeAttribute("data-balloon-visible");
        };
        ;
        Tooltip.clear = function (el) {
            for (var key in el.dataset) {
                if (key.indexOf('balloon') === 0) {
                    delete el.dataset[key];
                }
            }
        };
        Tooltip.defaultPara = {
            pos: "up",
            length: "fit",
            visible: false,
            errorMsg: "",
            el: null
        };
        return Tooltip;
    }());
    exports.Tooltip = Tooltip;
});

define("MbPage", ["require", "exports", "Tab", "Button"], function (require, exports, tab_1, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var MbPage = /** @class */ (function (_super) {
        __extends(MbPage, _super);
        function MbPage(para) {
            var _this = _super.call(this, para) || this;
            _this.para = para;
            var defaultPara = {
                container: document.body,
                className: ''
            };
            _this.init(G.tools.obj.merge(true, defaultPara, para));
            return _this;
        }
        MbPage.prototype.init = function (para) {
            // this.initTpl(para);
            this.headerHeight = para.headerHeight;
            this.body = para.body;
            this.left = para.left;
            this.right = para.right;
            this.title = para.title;
        };
        MbPage.prototype.wrapperInit = function () {
            var wrapper = d.create("<div class=\"mbPage\"></div>");
            this._headerEl = d.create("<header class=\"mbPage-header\"></header>");
            this.bodyEl = d.create("<div class=\"mbPage-body\"></div>");
            this._leftEl = d.create("<div class=\"mbPage-left\"></div>");
            this._rightEl = d.create("<div class=\"mbPage-right\"></div>");
            this._titleEl = d.create("<div class=\"mbPage-title\"></div>");
            d.append(wrapper, this._headerEl);
            d.append(wrapper, this.bodyEl);
            d.append(this._headerEl, this._leftEl);
            d.append(this._headerEl, this._titleEl);
            d.append(this._headerEl, this._rightEl);
            return wrapper;
        };
        Object.defineProperty(MbPage.prototype, "headerHeight", {
            // private _headerHeight: string;
            set: function (height) {
                if (tools.isEmpty(height)) {
                    return;
                }
                this._headerEl.style.height = height;
                this.bodyEl.style.paddingTop = height;
                this._titleEl.style.lineHeight = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbPage.prototype, "body", {
            get: function () {
                return this._body;
            },
            set: function (body) {
                if (!body) {
                    return;
                }
                var tabs = body.tabs;
                if (tabs) {
                    this._titleEl.innerHTML = null;
                    this.bodyEl.innerHTML = null;
                    this.tab = new tab_1.Tab({
                        tabParent: this._titleEl,
                        panelParent: this.bodyEl,
                        tabs: tabs
                    });
                }
                else {
                    this.bodyEl.innerHTML = null;
                    d.append(this.bodyEl, body);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbPage.prototype, "left", {
            get: function () {
                return this._left;
            },
            set: function (left) {
                var _this = this;
                if (!left) {
                    return;
                }
                if (Array.isArray(left)) {
                    left.forEach(function (obj) {
                        new Button_1.Button(tools.obj.merge({
                            container: _this._leftEl,
                        }, obj));
                    });
                }
                else {
                    this._leftEl.innerHTML = null;
                    d.append(this._leftEl, left);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbPage.prototype, "right", {
            get: function () {
                return this._right;
            },
            set: function (right) {
                var _this = this;
                if (!right) {
                    return;
                }
                if (Array.isArray(right)) {
                    right.forEach(function (obj) {
                        new Button_1.Button(tools.obj.merge({
                            container: _this._rightEl,
                        }, obj));
                    });
                }
                else {
                    this._rightEl.innerHTML = null;
                    d.append(this._rightEl, right);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MbPage.prototype, "title", {
            get: function () {
                return this._title;
            },
            set: function (title) {
                if (!this.tab) {
                    this._titleEl.innerHTML = "<div class=\"text-title\">" + tools.str.toEmpty(title) + "</div>";
                    this._title = title;
                }
            },
            enumerable: true,
            configurable: true
        });
        return MbPage;
    }(Component));
    exports.MbPage = MbPage;
});

define("SlideUp", ["require", "exports", "Button"], function (require, exports, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    /// <amd-module name="SlideUp"/>
    var d = G.d;
    var tools = G.tools;
    var Component = G.Component;
    var SlideUp = /** @class */ (function (_super) {
        __extends(SlideUp, _super);
        function SlideUp(para) {
            var _this = _super.call(this, para) || this;
            var mergePara = G.tools.obj.merge(true, {
                position: 'bottomRight',
                width: 280,
                // height : 200,
                className: '',
                text: '点击查看',
                contentHasClose: false,
                isShow: false,
            }, para);
            var classList = _this.wrapper.classList;
            classList.add(mergePara.position);
            classList.add(mergePara.className);
            _this.init(mergePara);
            return _this;
        }
        SlideUp.prototype.wrapperInit = function (para) {
            var wrapper = d.create("<div class=\"slide-up\"></div>");
            this._slideEl = d.create("<div class=\"slide-up-slideEl\"></div>");
            this._fixedEl = d.create("<div class=\"slide-up-fixedEl\"></div>");
            this._contentEl = d.create("<div class=\"slide-up-content\"></div>");
            this._textEl = d.create("<div class=\"slide-up-text\"></div>");
            this._iconEL = d.create("<div class=\"slide-up-icon\"></div>");
            d.append(wrapper, this._slideEl);
            d.append(wrapper, this._fixedEl);
            d.append(this._slideEl, this._contentEl);
            d.append(this._fixedEl, this._textEl);
            d.append(this._fixedEl, this._iconEL);
            // d.append(para.container,this.wrapper);
            return wrapper;
        };
        SlideUp.prototype.init = function (para) {
            // this.initTpl(para);
            var _this = this;
            this.width = para.width;
            this.height = para.height;
            this.text = para.text;
            this.contentTitle = para.contentTitle;
            this.contentEl = para.contentEl;
            this.isShow = para.isShow;
            this.button = new Button_1.Button({
                container: this._iconEL,
                type: 'link',
                icon: 'expanse',
                onClick: function () {
                    _this.isShow = !_this._isShow;
                }
            });
            d.on(this._fixedEl, 'click', function () {
                _this.isShow = !_this._isShow;
            });
        };
        Object.defineProperty(SlideUp.prototype, "width", {
            get: function () {
                return this._width;
            },
            set: function (width) {
                if (tools.isEmpty(width)) {
                    return;
                }
                this.wrapper.style.width = width + 'px';
                this._width = width;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "height", {
            get: function () {
                return this._height ? this._height : this._contentEl.offsetHeight;
            },
            set: function (height) {
                if (tools.isEmpty(height)) {
                    return;
                }
                this._contentEl.style.height = height + 'px';
                this._height = height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "text", {
            get: function () {
                return this._text;
            },
            set: function (text) {
                this._textEl.innerHTML = text;
                this._text = text;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "contentTitle", {
            get: function () {
                return this._contentTitle;
            },
            set: function (title) {
                if (!title) {
                    return;
                }
                if (!this._contentTitleEl) {
                    this._contentTitleEl = d.create("<div class=\"slide-up-title\"></div>");
                    d.prepend(this._slideEl, this._contentTitleEl);
                }
                this._contentTitleEl.innerHTML = title;
                this._contentTitle = title;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "contentEl", {
            get: function () {
                return this._contentEl;
            },
            set: function (contentEl) {
                if (!contentEl) {
                    return;
                }
                this._contentEl.innerHTML = null;
                d.append(this._contentEl, contentEl);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "button", {
            get: function () {
                return this._button;
            },
            set: function (button) {
                if (this._button) {
                    this._button.destroy();
                }
                this._button = button;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SlideUp.prototype, "isShow", {
            get: function () {
                return this._isShow;
            },
            set: function (isShow) {
                this._slideEl.style.height = isShow ? (this._contentTitleEl ? this.height + 30 : this.height) + 'px' : '0';
                this._isShow = isShow;
            },
            enumerable: true,
            configurable: true
        });
        return SlideUp;
    }(Component));
    exports.SlideUp = SlideUp;
});

/// <amd-module name="Panel"/>
define("Panel", ["require", "exports", "Button"], function (require, exports, Button_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var Component = G.Component;
    var d = G.d;
    var tools = G.tools;
    var Panel = /** @class */ (function (_super) {
        __extends(Panel, _super);
        function Panel(para) {
            var _this = _super.call(this, para) || this;
            _this._panelItems = [];
            _this.selectedIndexes = [];
            _this.event = (function () {
                var clickHandler = function (ev) {
                    var li = d.closest(ev.target, '.panel-item-wrapper');
                    if (li) {
                        var index = parseInt(li.dataset['index']);
                        var panelItem = _this._panelItems[index];
                        panelItem.toggle();
                        if (panelItem.selected) {
                            if (_this.selectedIndexes.indexOf(index) === -1) {
                                _this.selectedIndexes.push(index);
                            }
                        }
                    }
                };
                var selector = '.panel-item-wrapper:not(.disabled)>.panel-item-title';
                return {
                    on: function () {
                        d.on(_this.wrapper, 'click', selector, clickHandler);
                    },
                    off: function () {
                        d.off(_this.wrapper, 'click', selector, clickHandler);
                    }
                };
            })();
            _this.onChange = para.onChange;
            _this.initPanelItems(para);
            _this.event.on();
            return _this;
        }
        Object.defineProperty(Panel.prototype, "panelItems", {
            get: function () {
                return this._panelItems.slice();
            },
            enumerable: true,
            configurable: true
        });
        Panel.prototype.wrapperInit = function (para) {
            return h("ul", { className: "panel-wrapper" });
        };
        Panel.prototype.initPanelItems = function (para) {
            var _this = this;
            para.panelItems.forEach(function (itemPara, index) {
                var panelItem = new PanelItem(itemPara);
                _this._panelItems.push(panelItem);
                d.append(_this.wrapper, panelItem.wrapper);
                panelItem.wrapper.dataset['index'] = index;
                panelItem.onChange = function (item) {
                    _this.onChange && _this.onChange({ index: index, isSelected: item.selected, item: item });
                };
            });
            var isOpenFirst = tools.isEmpty(para.isOpenFirst) ? true : para.isOpenFirst;
            if (isOpenFirst && this._panelItems[0]) {
                this._panelItems[0].selected = true;
                this.selectedIndexes.push(0);
            }
        };
        Panel.prototype.toggle = function (flag) {
            var _this = this;
            this.selectedIndexes.forEach(function (i) {
                _this._panelItems[i].selected = flag;
            });
        };
        Object.defineProperty(Panel.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (handler) {
                this._onChange = handler;
            },
            enumerable: true,
            configurable: true
        });
        Panel.prototype.destroy = function () {
            this.event.off();
            this._panelItems.forEach(function (item) {
                item.destroy();
            });
            this._panelItems = null;
            _super.prototype.destroy.call(this);
        };
        return Panel;
    }(Component));
    exports.Panel = Panel;
    var PanelItem = /** @class */ (function () {
        function PanelItem(para) {
            this._wrapper = null;
            this._btnGroup = [];
            this.iconEl = null;
            this._disabled = false;
            this._selected = false;
            this.titleEl = h("a", { href: "#", className: "panel-item-title" },
                h("span", null, tools.isNotEmpty(para.title) ? para.title : ''));
            this._contentEl = h("div", { className: "panel-item-content" });
            this.btnGroupEl = h("div", { className: "panel-item-btn-group" });
            this.content = para.content;
            this.icon = para.icon;
            this.disabled = para.disabled;
            this.initBtnGroup(para.btn);
            d.append(this.wrapper, this.titleEl);
            d.append(this.wrapper, this.btnGroupEl);
            d.append(this.wrapper, this.contentEl);
        }
        Object.defineProperty(PanelItem.prototype, "contentEl", {
            get: function () {
                return this._contentEl;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PanelItem.prototype, "wrapper", {
            get: function () {
                if (this._wrapper === null) {
                    this._wrapper = h("li", { className: "panel-item-wrapper" });
                }
                return this._wrapper;
            },
            enumerable: true,
            configurable: true
        });
        PanelItem.prototype.initBtnGroup = function (btns) {
            var _this = this;
            btns && btns.forEach(function (btn) {
                btn.container = _this.btnGroupEl;
                _this._btnGroup.push(new Button_1.Button(btn));
            });
        };
        Object.defineProperty(PanelItem.prototype, "btnGroup", {
            get: function () {
                return this._btnGroup.slice();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PanelItem.prototype, "icon", {
            set: function (icon) {
                if (tools.isNotEmpty(icon)) {
                    this.iconEl && d.remove(this.iconEl);
                    this.iconEl = h("i", { className: 'iconfont ' + 'icon-' + icon });
                    d.prepend(this.titleEl, this.iconEl);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PanelItem.prototype, "content", {
            get: function () {
                return this._content;
            },
            set: function (content) {
                if (tools.isNotEmpty(content)) {
                    this._content = content;
                    d.append(this.contentEl, content);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PanelItem.prototype, "disabled", {
            get: function () {
                return this._disabled;
            },
            set: function (disabled) {
                if (tools.isNotEmpty(disabled) && !this.selected) {
                    this._disabled = disabled;
                    this.wrapper.classList.toggle('disabled', disabled);
                }
            },
            enumerable: true,
            configurable: true
        });
        PanelItem.prototype.toggle = function () {
            this.selected = !this._selected;
        };
        Object.defineProperty(PanelItem.prototype, "selected", {
            get: function () {
                return this._selected;
            },
            set: function (selected) {
                if (tools.isNotEmpty(selected) && selected !== this._selected && !this.disabled) {
                    this._selected = selected;
                    this.wrapper.classList.toggle('selected', selected);
                    this.onChange && this.onChange(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(PanelItem.prototype, "onChange", {
            get: function () {
                return this._onChange;
            },
            set: function (handler) {
                this._onChange = handler;
            },
            enumerable: true,
            configurable: true
        });
        PanelItem.prototype.destroy = function () {
            d.remove(this.iconEl);
            d.remove(this.contentEl);
            d.remove(this.titleEl);
            d.remove(this.btnGroupEl);
            d.remove(this.wrapper);
            this._contentEl = null;
            this.titleEl = null;
            this.iconEl = null;
            this.btnGroupEl = null;
            this._wrapper = null;
        };
        return PanelItem;
    }());
});
